'use strict';
var WIN = window,
    Game_Mode = 0,
    Game_ID_1, Game_ID_2, VS_Player_Team_ID, Player_Name, VS_Player_Team_Name, VS_Opponent_Team_ID, VS_Opponent_Name, VS_Opponent_Team_Name, VSMODECODE8, VS_Upload_Errors = 0,
    Unix_Hour = 0,
    VSMODECODE11 = new SR_Image,
    VSMODECODE12 = new SR_Image,
    VSMODECODE13 = new SR_Image,
    VSMODECODE14 = new SR_Image,
    VSMODECODE15 = new SR_Image,
    VSMODECODE16 = new SR_Image,
    Save_Cookie, VS_Opponent_Data, VS_Game_ID_Plain = [0, 0, 0, 0, 0, 0, 0, 0],
    Game_Language, Stage_Eff_Canvas = new SR_Image,
    Stage_Terrain_Img = new SR_Image,
    Terrain_Textures = Array(13),
    Player_Img = new SR_Image,
    Drop_Img = new SR_Image,
    Item_Img = new SR_Image,
    Enemy_Head_Img = new SR_Image,
    Sign_Img = new SR_Image,
    Projectiles_Img = new SR_Image,
    Title_Img = new SR_Image,
    Effect_Img = new SR_Image,
    Hut_Img = new SR_Image,
    Water_Img = new SR_Image,
    Water_Red_Img = new SR_Image,
    Forget_Tree_Img = new SR_Image,
    Map_Elev_Index = new SR_Image,
    Map_Tiles_Img = new SR_Image,
    Map_Feature_Index = new SR_Image,
    Map_Features_Img = new SR_Image,
    Sequence_Step = 0,
    Text_Fade = 0,
    Current_Stage = 0,
    Current_Screen = 0,
    Sign_Touched_Mode = 0,
    Displayed_Object = 0,
    Selected_Player = 3,
    Mouse_Up = !1,
    Menu_Column = 0,
    Menu_Row = 0,
    Menu_Entry = 0,
    Ranger_Class_Proxy = [0, 0, 0, 0],
    Item_Inv_Proxy = [0, 0, 0, 0],
    Comp1_Inv_Proxy = [0, 0, 0, 0],
    Comp2_Inv_Proxy = [0, 0, 0, 0],
    Target_HP_Current = 0,
    Target_HP_Max = 0,
    En_Count_From_Max = 0,
    Target_Array_ID = 0,
    Click_To_Sell_Mode = 0,
    Enemy_Spawn_Scale = 100,
    Anger_Crown_Lightning = 0,
    LV = [1, 1],
    FP = [1, 1],
    Rank = [0, 0],
    SP = [0, 0, 0, 0, 0, 0, 0, 0],
    Team_EXP = 0,
    Team_Gold = 0,
    Ranger_Class = [0, 0, 0, 0, 0, 0, 0, 0],
    LP_Current = [50, 50, 50, 50, 50, 50, 50, 50],
    MP_Bar = [0, 0, 0, 0, 0, 0, 0, 0],
    LP_SP = [0, 0, 0, 0, 0, 0, 0, 0],
    STR_SP = [0, 0, 0, 0, 0, 0, 0, 0],
    DEX_SP = [0, 0, 0, 0, 0, 0, 0, 0],
    MAG_SP = [0, 0, 0, 0, 0, 0, 0, 0],
    LP_Max = [50, 50, 50, 50, 50, 50, 50, 50],
    STR = [0, 0, 0, 0, 0, 0, 0, 0],
    DEX = [0, 0, 0, 0, 0, 0, 0, 0],
    MAG = [0, 0, 0, 0, 0, 0, 0, 0],
    AT_Min = [0, 0, 0, 0, 0, 0, 0, 0],
    AT_Max = [0, 0, 0, 0, 0, 0, 0, 0],
    Agi_Min = [0, 0, 0, 0, 0, 0, 0, 0],
    Agi_Max = [0, 0, 0, 0, 0, 0, 0, 0],
    RANGE = [0, 0, 0, 0, 0, 0, 0, 0],
    Sett_Auto_Move = [1, 1, 1, 1, 1, 1, 1, 1],
    Sett_Move_If_Dying = 0,
    Sett_Dmg_Indicators = 0,
    Sett_LP_Bar_Disp = 0,
    Sett_PL_Symbol = 0,
    Sett_Drag_Dead_Body = 1,
    STR_Aura = [0, 0, 0, 0, 0, 0, 0, 0],
    DEX_Aura = [0, 0, 0, 0, 0, 0, 0, 0],
    MAG_Aura = [0, 0, 0, 0, 0, 0, 0, 0],
    Item_Inv = [0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    ],
    Comp1_Inv = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    Comp2_Inv = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    Class_Name_List = "Stickman Boxer Gladiator Sniper Magician Priest Gunner Whipper Angel".split(" "),
    Rank_List = "123456789S".split(""),
    Shop_Items = [
        [
            [3, 7, 11, 15, 54, 64, 68, 72, 116, 121, 131, 137, 153, 178, 202, 214, 226, 253, 312, 328, 345, 360, 394, 410, 429, 451, 471, 479, 496, 504, 512, 520, 549],
            [4, 8, 12,
                16, 55, 65, 69, 73, 117, 122, 132, 138, 154, 179, 203, 215, 227, 254, 313, 329, 346, 361, 395, 411, 430, 452, 472, 480, 497, 505, 513, 521, 550
            ],
            [5, 9, 13, 17, 56, 66, 70, 74, 118, 123, 133, 139, 155, 180, 204, 216, 228, 255, 314, 330, 347, 362, 396, 412, 431, 453, 473, 481, 498, 506, 514, 522, 551],
            [6, 10, 14, 18, 57, 67, 71, 75, 119, 124, 134, 140, 156, 181, 205, 217, 229, 256, 315, 331, 348, 363, 397, 413, 432, 454, 474, 482, 499, 507, 515, 523, 552],
            [58, 60, 61, 62, 63, 115, 126, 127, 128, 129, 135, 141, 157, 182, 206, 218, 230, 257, 316, 332, 349, 364, 398, 414, 433, 455, 475, 483, 500, 508, 516, 524, 553],
            [76, 77,
                78, 79, 80, 81, 82, 83, 120, 125, 136, 142, 158, 183, 207, 219, 231, 258, 317, 333, 350, 365, 399, 415, 434, 456, 476, 484, 501, 509, 517, 525, 554
            ],
            [188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 208, 220, 232, 259, 318, 334, 351, 366, 400, 416, 435, 457, 477, 485, 502, 510, 518, 526, 555],
            [289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 319, 335, 352, 367, 401, 417, 436, 458, 478, 486, 503, 511, 519, 527, 556]
        ],
        [
            [19, 20, 21, 22, 23, 0, 0, 0, 0],
            [24, 25, 26, 27, 28, 0, 0, 0, 0],
            [31, 32, 33, 34, 35, 36, 37, 38, 0],
            [29, 39, 40, 41, 42, 43, 44, 45, 47, 46, 341,
                389, 406, 441, 459
            ],
            [51, 52, 53, 48, 0, 0, 0, 0, 0],
            [243, 244, 245, 0, 0, 0, 0, 0, 0],
            [277, 285, 0, 0, 0, 0, 0, 0, 0]
        ],
        [
            [270, 270, 0, 0, 0, 0, 0, 0, 0],
            [271, 271, 0, 0, 0, 0, 0, 0, 0],
            [272, 272, 0, 0, 0, 0, 0, 0, 0],
            [273, 273, 0, 0, 0, 0, 0, 0, 0],
            [274, 274, 0, 0, 0, 0, 0, 0, 0],
            [275, 275, 0, 0, 0, 0, 0, 0, 0],
            [276, 276, 0, 0, 0, 0, 0, 0, 0],
            [307, 307, 0, 0, 0, 0, 0, 0, 0]
        ],
        [
            [19, 84, 143, 209, 323, 418, 20, 85, 144, 210, 324, 419, 21, 86, 145, 211, 325, 420, 22, 87, 146, 212, 326, 421, 23, 88, 147, 213, 327, 422],
            [24, 89, 148, 221, 336, 0, 25, 90, 149, 222, 337, 0, 26, 91, 150, 223, 338, 0, 27, 92, 151, 224, 339, 0, 28, 93, 152, 225, 340, 0],
            [31, 96, 161, 260, 369, 0, 32, 97, 162, 261, 370, 0, 33, 98, 163, 262, 371, 0, 34, 99, 164, 263, 372, 0, 35, 100, 165, 264, 373, 0, 36, 101, 166, 265, 374, 0, 37, 102, 167, 266, 375, 0, 38, 103, 168, 267, 376, 0],
            [39, 104, 169, 237, 353, 0, 40, 105, 170, 242, 354, 0, 41, 106, 171, 240, 355, 0, 42, 107, 172, 268, 0, 0, 43, 108, 173, 269, 356, 0, 44, 109, 174, 238, 357, 0, 45, 110, 175, 249, 0, 0, 47, 111, 176, 239, 358, 0, 46, 130, 177, 241, 359, 0, 341, 342, 343, 344, 368, 0, 389, 390, 391, 392, 393, 0, 406, 407, 408, 409, 0, 0, 459, 460, 461, 462, 463, 0],
            [385, 386, 387, 388, 0, 0, 0, 0, 0],
            [243, 244, 245, 246, 247, 248, 250, 251, 252,
                320, 321, 322
            ],
            [277, 285, 377, 279, 287, 379, 281, 308, 381, 283, 310, 0]
        ]
    ],
    Item_Catalogue = Array(558);
Item_Catalogue[0] = ["NONE", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[59] = ["NG", 0, 0, 13, 12, 9, 4287137928, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[1] = ["gold", 0, 0, 1, 0, 0, 4294967295, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[2] = ["onigiri", 0, 0, 2, 0, 0, 4294967295, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[3] = ["glove", 0, 100, 3, 2, 1, 4284901119, 1, 0, 0, 1, 3, 0, 0, 15, 20, 15, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[4] = ["sword", 0, 100, 4, 3, 2, 4287137928, 1, 0, 0, 1, 5, 0, 0, 20, 30, 30, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[5] = ["bow", 0, 100, 5, 4, 3, 4294954086, 1, 4, 0, 2, 3, 1, 100, 30, 40, 90, 1, 3, 4294954086, 1, 16, 16, 8, 8, 0, 0, 300, 10, 5, 100, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[6] = ["magic", 0, 100, 6, 5, 4, 4278255615, 1, 3, 0, 5, 10, 1, 30, 80, 90, 90, 0, 2, 4278225151, 1, 16, 16, 8, 8, 0, 0, 300, 10, 0, 100, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[58] = ["staff", 0, 100, 12, 11, 5, 4288217343, 1, 6, 0, 1, 2, 1, 0, 80, 90, 70, 0, 15, 4291598847, 2, 24, 24, 24, 24, 0, 0, 100, 40, 0, 100, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[76] = ["gun", 0, 100, 14, 13, 6, 4288256409, 1, 3, 0, 2, 6, 1, 30, 20, 30, 60, 1, 17, 4288256409, 1, 16, 16, 8, 8, 0, 0, 50, 10, 0, 100, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[7] = ["mach punch", 1, 250, 3, 2, 1, 4291611852, 1, 0, 0, 1, 3, 0, 0, 5, 10, 15, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[11] = ["thunder glove", 1, 500, 3, 2, 1, 4294967142, 1, 3, 0, 2, 4, 1, 10, 15, 22, 15, 1, 1, 4294967040, 1, 12, 48, 16, 16, 0, 0, 10, 10, 0, 100, 0, 0, 0, 3, 0, 10, 0, 0, 1, 29, 0];
Item_Catalogue[15] = ["fire glove", 1, 750, 3, 2, 1, 4294919236, 1, 3, 0, 2, 4, 1, 8, 15, 22, 15, 1, 5, 4294927889, 2, 16, 32, 16, 32, 0, 0, 40, 10, 0, 100, 0, 0, 0, 1, 50, 10, 0, 0, 7, 9, 0];
Item_Catalogue[54] = ["poison glove", 1, 1E3, 3, 2, 1, 4278255360, 1, 3, 0, 2, 4, 1, 8, 15, 22, 15, 1, 6, 4278255360, 2, 16, 16, 16, 16, 0, 0, 10, 10, 0, 100, 0, 0, 0, 4, 15, 12, 0, 0, 2, 2, 0];
Item_Catalogue[64] = ["freeze glove", 2, 1500, 3, 2, 1, 4291611903, 1, 3, 0, 2, 4, 1, 10, 15, 24, 15, 1, 4, 4291611903, 1, 16, 32, 16, 16, 0, 0, 10, 10, 0, 100, 0, 0, 0, 5, 5, 15, 0, 0, 8, 12, 0];
Item_Catalogue[68] = ["needle glove", 2, 2E3, 3, 2, 1, 4291603080, 1, 3, 0, 2, 4, 9, 20, 15, 24, 15, 1, 9, 4291603080, 1, 16, 16, 16, 16, 30, 5, 10, 10, 0, 100, 0, 0, 0, 0, 0, 50, 0, 0, 10, 12, 0];
Item_Catalogue[72] = ["spark glove", 2, 2500, 3, 2, 1, 4294967176, 1, 4, 0, 2, 4, 6, 30, 15, 24, 15, 0, 13, 4294967244, 2, 16, 16, 8, 8, 8, 20, 80, 10, 5, 100, 0, 1, 0, 3, 0, 50, 0, 0, 1, 29, 0];
Item_Catalogue[116] = ["sonic punch", 2, 3E3, 3, 2, 1, 4294967295, 1, 1, 1, 1, 3, 0, 0, 5, 10, 15, 0, 14, 4294967295, 2, 16, 16, 0, 0, 0, 1, 0, 15, 0, 0, 0, 0, 0, 0, 0, -1, 0];
Item_Catalogue[121] = ["thunder knuckle", 3, 4E3, 3, 18, 1, 4294967142, 1, 3, 0, 4, 8, 2, 10, 15, 26, 15, 1, 10, 4294967091, 2, 12, 32, 16, 16, 10, 0, 8, 8, 0, 100, 0, 0, 0, 3, 0, 25, 0, 0, 1, 29, 0];
Item_Catalogue[131] = ["fire knuckle", 3, 4500, 3, 18, 1, 4294919236, 1, 2, 0, 5, 10, 1, 1, 15, 26, 15, 1, 5, 4294927889, 2, 16, 32, 32, 16, 0, 0, 40, 10, 0, 100, 0, 0, 0, 1, 50, 25, 0, 0, 15, 18, 0];
Item_Catalogue[137] = ["mach knuckle", 3, 5E3, 3, 18, 1, 4291611852, 1, 0, 0, 12, 18, 0, 0, 5, 10, 15, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[153] = ["poison knuckle", 3, 5500, 3, 18, 1, 4278255360, 1, 3, 0, 6, 12, 1, 8, 15, 26, 15, 1, 9, 4278255360, 2, 16, 32, 16, 16, 0, 0, 10, 20, 0, 100, 0, 0, 0, 4, 15, 30, 0, 0, 4, 4, 0];
Item_Catalogue[178] = ["freeze knuckle", 4, 6E3, 3, 18, 1, 4291611903, 1, 3, 0, 8, 16, 2, 10, 15, 28, 15, 1, 4, 4291611903, 1, 16, 32, 16, 16, 0, 0, 10, 10, 0, 100, 0, 0, 0, 5, 10, 30, 0, 0, 12, 20, 0];
Item_Catalogue[202] = ["needle knuckle", 4, 6500, 3, 18, 1, 4291603080, 1, 403, 0, 8, 16, 18, 20, 15, 28, 15, 1, 9, 4291603080, 1, 16, 16, 16, 16, 50, 5, 10, 10, 0, 100, 0, 0, 0, 0, 0, 80, 0, 0, 11, 13, 0];
Item_Catalogue[214] = ["spark knuckle", 4, 7E3, 3, 18, 1, 4294967176, 1, 1204, 0, 8, 16, 8, 30, 15, 28, 15, 1, 18, 4294967244, 2, 2, 8, 8, 8, 8, 20, 100, 10, 5, 100, 0, 2, 0, 3, 0, 80, 0, 0, 1, 50, 0];
Item_Catalogue[226] = ["sonic knuckle", 4, 7500, 3, 18, 1, 4294967295, 1, 5703, 1, 12, 18, 9, 10, 5, 10, 15, 1, 12, 4287137928, 2, 16, 3, 0, 0, 0, 10, 10, 15, 0, 90, 1, 0, 0, 0, 0, -1, 0];
Item_Catalogue[253] = ["thunder claw", 5, 8E3, 3, 19, 1, 4294967142, 1, 3, 0, 9, 18, 3, 20, 15, 30, 15, 1, 9, 4294967091, 2, 8, 24, 16, 16, 3, 3, 10, 10, 0, 95, 0, 0, 0, 3, 0, 35, 0, 0, 1, 45, 0];
Item_Catalogue[312] = ["fire claw", 5, 8500, 3, 19, 1, 4294919236, 1, 3, 0, 9, 18, 3, 3, 15, 30, 15, 1, 9, 4294927889, 2, 8, 24, 16, 16, 0, 0, 60, 10, 0, 100, 0, 0, 0, 1, 50, 35, 0, 0, 10, 15, 0];
Item_Catalogue[328] = ["mach claw", 5, 9E3, 3, 19, 1, 4291611852, 1, 0, 0, 36, 54, 0, 0, 5, 10, 15, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[345] = ["poison claw", 5, 9500, 3, 19, 1, 4278255360, 1, 3, 0, 9, 18, 3, 8, 15, 30, 15, 1, 9, 4278255360, 2, 8, 20, 8, 8, 0, 7, 10, 20, 0, 100, 0, 0, 0, 4, 15, 40, 0, 0, 5, 5, 0];
Item_Catalogue[360] = ["freeze claw", 6, 1E4, 3, 19, 1, 4291611903, 1, 3, 0, 10, 20, 3, 10, 15, 32, 15, 1, 9, 2295123199, 2, 8, 32, 8, 8, 0, 9, 10, 10, 0, 100, 1, 0, 0, 5, 15, 45, 0, 0, 18, 36, 0];
Item_Catalogue[394] = ["needle claw", 6, 11E3, 3, 19, 1, 4291603080, 1, 303, 0, 10, 20, 30, 20, 15, 32, 15, 1, 9, 4291603080, 1, 8, 8, 8, 8, 0, 5, 10, 10, 0, 90, 0, 2, 0, 0, 0, 90, 0, 0, 12, 14, 0];
Item_Catalogue[410] = ["spark claw", 6, 12E3, 3, 19, 1, 4294967176, 1, 109, 0, 10, 20, 10, 1, 15, 32, 15, 1, 13, 4294967244, 2, 8, 8, 8, 8, 8, 20, 120, 10, 1, 99, 0, 2, 20, 3, 0, 100, 0, 0, 1, 99, 0];
Item_Catalogue[429] = ["sonic claw", 6, 13E3, 3, 19, 1, 4294967295, 1, 3, 1, 36, 54, 7, 10, 5, 10, 15, 1, 12, 1157627903, 2, 32, 3, 0, 0, 0, 10, 10, 10, 0, 90, 1, 0, 0, 0, 0, -1, 0];
Item_Catalogue[451] = ["thunder cestus", 7, 15E3, 3, 20, 1, 4294967142, 1, 9, 0, 11, 22, 5, 4, 15, 34, 15, 1, 20, 4294967091, 2, 16, 48, 16, 16, 10, 3, 10, 10, 0, 95, 1, 0, 0, 3, 0, 40, 0, 0, 1, 120, 0];
Item_Catalogue[471] = ["fire cestus", 7, 16E3, 3, 20, 1, 4294919236, 1, 9, 0, 11, 22, 5, 2, 15, 34, 15, 1, 22, 4294927889, 2, 4, 24, 16, 16, 10, 0, 50, 10, 0, 95, 1, 0, 0, 1, 50, 40, 0, 0, 20, 40, 0];
Item_Catalogue[479] = ["mach cestus", 7, 17E3, 3, 20, 1, 4291611852, 1, 0, 0, 80, 120, 0, 0, 4, 6, 15, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[496] = ["poison cestus", 7, 18E3, 3, 20, 1, 4278255360, 1, 109, 0, 11, 22, 6, 5, 15, 34, 15, 0, 6, 4278242304, 2, 16, 16, 24, 24, 0, 9, 10, 10, 0, 80, 0, 1, 0, 4, 5, 50, 0, 0, 24, 24, 0];
Item_Catalogue[504] = ["freeze cestus", 8, 19E3, 3, 20, 1, 4291611903, 1, 109, 0, 12, 24, 6, 10, 15, 36, 15, 1, 16, 2295123199, 2, 16, 16, 12, 12, 0, 9, 10, 30, 0, 60, 1, 0, 0, 5, 20, 60, 0, 0, 26, 60, 0];
Item_Catalogue[8] = ["iron sword", 1, 250, 4, 3, 2, 4289374890, 1, 0, 0, 5, 10, 0, 0, 20, 30, 30, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[12] = ["fire sword", 1, 500, 4, 3, 2, 4294919236, 1, 1, 0, 10, 15, 0, 0, 20, 30, 30, 0, 5, 4294927889, 2, 16, 32, 16, 32, 0, 0, 50, 10, 50, 100, 0, 1, 0, 1, 20, 10, 0, 0, 1, 3, 10];
Item_Catalogue[16] = ["thunder sword", 1, 750, 4, 3, 2, 4294967142, 1, 1, 0, 10, 15, 0, 0, 20, 30, 30, 1, 10, 4294967108, 2, 16, 16, 8, 8, 0, 0, 12, 10, 50, 100, 0, 0, 0, 3, 0, 10, 0, 0, 1, 7, 10];
Item_Catalogue[55] = ["ice sword", 1, 1E3, 4, 3, 2, 4289374975, 1, 1, 0, 10, 15, 0, 0, 20, 30, 30, 0, 8, 2292886271, 2, 12, 12, 8, 8, 0, 0, 10, 10, 0, 100, 0, 0, 0, 2, 20, 12, 0, 0, 3, 5, 10];
Item_Catalogue[65] = ["long sword", 2, 1500, 4, 3, 2, 4290493371, 1, 0, 0, 10, 20, 0, 0, 20, 30, 35, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[69] = ["lightsaber", 2, 2E3, 4, 3, 2, 4294967142, 2, 7, 0, 10, 15, 1, 1, 20, 30, 30, 1, 10, 2298478404, 2, 16, 32, 16, 16, 0, 0, 10, 10, 0, 100, 0, 0, 0, 3, 0, 70, 0, 0, 1, 7, 70];
Item_Catalogue[73] = ["flame sword", 2, 2500, 4, 3, 2, 4294919236, 1, 7, 1, 10, 15, 1, 5, 20, 30, 30, 1, 6, 4294927889, 2, 8, 32, 16, 16, 0, 0, 20, 10, 0, 100, 0, 0, 0, 1, 50, 70, 0, 0, 1, 3, 70];
Item_Catalogue[117] = ["frozen sword", 2, 3E3, 4, 3, 2, 4288269567, 1, 7, 1, 10, 15, 1, 20, 20, 30, 30, 1, 4, 4288269567, 2, 16, 64, 64, 32, 0, 5, 10, 40, 0, 100, 0, 0, 0, 2, 20, 70, 0, 0, 20, 30, 3];
Item_Catalogue[122] = ["sabel", 3, 4E3, 4, 21, 2, 4289374890, 1, 0, 0, 20, 40, 0, 0, 20, 30, 30, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[132] = ["fire sabel", 3, 4500, 4, 21, 2, 4294919236, 1, 7, 0, 12, 18, 1, 1, 20, 30, 30, 1, 6, 4294927889, 2, 20, 6, 16, 16, 0, 0, 50, 15, 0, 99, 1, 0, 0, 1, 25, 20, 0, 0, 5, 6, 10];
Item_Catalogue[138] = ["thunder sabel", 3, 5E3, 4, 21, 2, 4294967142, 1, 10, 0, 12, 18, 1, 20, 20, 30, 30, 1, 10, 4294967108, 2, 16, 16, 8, 8, 0, 3, 9, 10, 10, 100, 0, 0, 0, 3, 0, 20, 0, 0, 1, 29, 10];
Item_Catalogue[154] = ["ice sabel", 3, 5500, 4, 21, 2, 4289374975, 1, 7, 0, 12, 18, 1, 1, 20, 30, 30, 1, 4, 2292886271, 2, 16, 32, 16, 16, 0, 0, 50, 10, 0, 90, 1, 0, 0, 2, 20, 25, 0, 0, 10, 20, 10];
Item_Catalogue[179] = ["long sabel", 4, 6E3, 4, 21, 2, 4290493371, 1, 0, 0, 20, 50, 0, 0, 20, 30, 40, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[203] = ["lightsaber", 4, 6500, 4, 21, 2, 4284940134, 2, 7, 0, 15, 20, 1, 1, 20, 30, 30, 1, 18, 2286223172, 2, 16, 32, 16, 16, 0, 0, 10, 10, 0, 100, 0, 0, 0, 3, 0, 100, 0, 0, 1, 14, 100];
Item_Catalogue[215] = ["flame sabel", 4, 7E3, 4, 21, 2, 4294919236, 1, 7, 1, 15, 20, 1, 5, 20, 30, 30, 1, 6, 4294927889, 2, 8, 32, 16, 16, 0, 0, 20, 10, 0, 100, 0, 0, 50, 1, 50, 100, 0, 0, 2, 6, 100];
Item_Catalogue[227] = ["frozen sabel", 4, 7500, 4, 21, 2, 4288269567, 1, 7, 0, 15, 20, 1, 15, 20, 30, 30, 1, 4, 4288269567, 2, 12, 16, 8, 8, 0, 15, 100, 10, 0, 100, 0, 0, 100, 5, 5, 100, 0, 0, 20, 30, 10];
Item_Catalogue[254] = ["blade", 5, 8E3, 4, 22, 2, 4289374890, 1, 0, 0, 50, 80, 0, 0, 20, 30, 30, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[313] = ["fire blade", 5, 8500, 4, 22, 2, 4294919236, 1, 7, 0, 20, 20, 1, 1, 20, 30, 30, 1, 9, 2298439185, 2, 8, 32, 16, 16, 0, 0, 200, 15, 0, 99, 0, 0, 0, 1, 30, 30, 0, 0, 3, 4, 10];
Item_Catalogue[329] = ["thunder blade", 5, 9E3, 4, 22, 2, 4294967142, 1, 7, 0, 20, 20, 30, 1, 20, 30, 30, 1, 10, 2298478404, 2, 16, 40, 32, 16, 90, 0, 3, 3, 0, 100, 0, 0, 0, 3, 0, 30, 0, 0, 1, 29, 1];
Item_Catalogue[346] = ["ice blade", 5, 9500, 4, 22, 2, 4289374975, 1, 7, 0, 20, 20, 1, 15, 20, 30, 30, 1, 4, 2292886271, 2, 8, 16, 8, 8, 0, 20, 60, 10, 0, 100, 1, 0, 50, 2, 20, 35, 0, 0, 15, 35, 10];
Item_Catalogue[361] = ["long blade", 6, 1E4, 4, 22, 2, 4290493371, 1, 0, 0, 50, 100, 0, 0, 20, 30, 45, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[395] = ["lightsaber", 6, 11E3, 4, 22, 2, 4284901119, 2, 7, 0, 20, 25, 1, 1, 20, 30, 30, 1, 9, 2286175487, 2, 16, 32, 16, 16, 0, 0, 10, 10, 0, 100, 0, 0, 0, 3, 0, 120, 0, 0, 1, 45, 120];
Item_Catalogue[411] = ["flame blade", 6, 12E3, 4, 22, 2, 4294919236, 1, 7, 1, 20, 25, 1, 10, 20, 30, 30, 1, 6, 2298430481, 2, 10, 30, 16, 16, 0, 0, 60, 10, -1, 90, 1, 0, 0, 1, 50, 120, 0, 0, 6, 9, 120];
Item_Catalogue[430] = ["frozen blade", 6, 13E3, 4, 22, 2, 4288269567, 1, 3, 1, 20, 25, 1, 20, 20, 30, 30, 1, 4, 3432631551, 2, 16, 64, 48, 48, 0, 5, 10, 40, 0, 100, 0, 0, 0, 5, 5, 120, 0, 0, 40, 60, 3];
Item_Catalogue[452] = ["GreatSword", 7, 15E3, 4, 23, 2, 4289374890, 1, 0, 0, 150, 250, 0, 0, 20, 30, 30, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[472] = ["fire GS", 7, 16E3, 4, 23, 2, 4294919236, 1, 1, 0, 30, 30, 0, 0, 20, 30, 30, 0, 23, 3439289873, 2, 16, 32, 16, 32, 0, 0, 200, 10, 50, 100, 0, 1, 0, 1, 35, 40, 0, 0, 6, 8, 15];
Item_Catalogue[480] = ["thunder GS", 7, 17E3, 4, 23, 2, 4294967142, 1, 7, 0, 30, 30, 9, 1, 20, 30, 30, 1, 10, 2298478404, 2, 8, 32, 16, 16, 30, 0, 3, 3, 0, 100, 0, 0, 0, 3, 0, 40, 0, 0, 1, 29, 10];
Item_Catalogue[497] = ["ice GS", 7, 18E3, 4, 23, 2, 4289374975, 1, 7, 1, 30, 30, 1, 40, 20, 30, 30, 1, 22, 2292886271, 2, 8, 48, 48, 48, 0, 5, 6, 10, 0, 100, 1, 0, 0, 2, 25, 45, 0, 0, 25, 55, 10];
Item_Catalogue[505] = ["long GS", 8, 19E3, 4, 23, 2, 4290493371, 1, 0, 0, 100, 200, 0, 0, 20, 30, 50, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[9] = ["triple shot", 1, 250, 5, 14, 3, 4294954086, 1, 3, 0, 2, 3, 3, 100, 30, 40, 150, 1, 3, 4294954086, 1, 16, 16, 8, 8, 0, 0, 300, 10, 5, 100, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[13] = ["poison arrow", 1, 500, 5, 4, 3, 4278255360, 1, 4, 0, 4, 6, 1, 100, 30, 40, 90, 1, 3, 4278255360, 1, 16, 16, 8, 8, 0, 0, 300, 10, 5, 100, 0, 0, 0, 4, 50, 10, 1, 0, 1, 1, 1, 0, 6, 4278255360, 1, 32, 32, 32, 32, 0, 0, 100, 10, 0, 100, 0, 0];
Item_Catalogue[17] = ["double arrow", 1, 750, 5, 15, 3, 4294954086, 1, 4, 0, 8, 12, 2, 100, 30, 40, 90, 1, 3, 4294954086, 1, 16, 16, 8, 8, 0, 0, 300, 10, 5, 100, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[56] = ["fire arrow", 1, 1E3, 5, 4, 3, 4294919236, 1, 4, 0, 8, 12, 1, 100, 30, 40, 90, 1, 3, 4294919236, 1, 16, 16, 8, 8, 0, 0, 300, 10, 5, 100, 0, 0, 0, 1, 50, 12, 1, 1, 4, 6, 1, 0, 5, 4294927889, 2, 16, 32, 16, 32, 0, 0, 100, 10, 30, 100, 0, 1];
Item_Catalogue[66] = ["triple arrow", 2, 1500, 5, 16, 3, 4294954086, 1, 4, 0, 8, 12, 3, 100, 30, 40, 90, 1, 3, 4294954086, 1, 16, 16, 8, 8, 0, 0, 300, 10, 5, 100, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[70] = ["quad arrow", 2, 2E3, 5, 17, 3, 4294954086, 1, 4, 0, 8, 12, 4, 100, 30, 40, 90, 1, 3, 4294954086, 1, 16, 16, 8, 8, 0, 0, 300, 10, 5, 100, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[74] = ["oct arrow", 2, 2500, 5, 17, 3, 4294954086, 1, 4, 0, 4, 6, 8, 100, 45, 60, 90, 1, 3, 4294954086, 1, 16, 16, 8, 8, 0, 0, 300, 10, 5, 100, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[118] = ["double poison", 2, 3E3, 5, 15, 3, 4288269312, 1, 4, 0, 8, 12, 2, 100, 30, 40, 90, 1, 3, 4288269312, 1, 16, 16, 8, 8, 0, 0, 300, 10, 5, 100, 0, 0, 0, 4, 50, 20, 1, 0, 1, 2, 1, 0, 6, 2291780608, 1, 32, 32, 32, 32, 0, 0, 100, 10, 0, 100, 0, 0];
Item_Catalogue[123] = ["quint shot", 3, 4E3, 5, 14, 3, 4294954086, 1, 3, 0, 4, 6, 5, 100, 30, 40, 150, 1, 3, 4294954086, 1, 16, 16, 8, 8, 0, 0, 300, 10, 5, 100, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[133] = ["double fire", 3, 4500, 5, 15, 3, 4294919236, 1, 4, 0, 9, 15, 2, 100, 30, 40, 90, 1, 3, 4294919236, 1, 16, 16, 8, 8, 0, 0, 300, 10, 5, 100, 0, 0, 0, 1, 50, 20, 1, 1, 8, 9, 1, 0, 5, 4294927889, 2, 16, 32, 16, 32, 0, 0, 100, 10, 30, 100, 0, 1];
Item_Catalogue[139] = ["double iron arrow", 3, 5E3, 5, 15, 3, 4284900966, 1, 4, 0, 16, 24, 2, 80, 30, 40, 90, 1, 3, 4284900966, 1, 16, 16, 8, 8, 0, 0, 300, 10, 8, 100, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[155] = ["triple iron arrow", 3, 5500, 5, 16, 3, 4284900966, 1, 104, 0, 15, 20, 3, 80, 30, 40, 90, 1, 3, 4284900966, 1, 16, 16, 8, 8, 30, 0, 300, 10, 8, 100, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[180] = ["triple poison", 4, 6E3, 5, 16, 3, 4288269312, 1, 4, 0, 10, 16, 3, 80, 30, 40, 90, 1, 3, 4288269312, 1, 16, 16, 8, 8, 0, 0, 300, 10, 8, 100, 0, 0, 0, 4, 50, 25, 1, 0, 2, 2, 1, 0, 6, 2291780608, 1, 32, 32, 32, 32, 0, 0, 100, 10, 0, 100, 0, 0];
Item_Catalogue[204] = ["fire shot", 4, 6500, 5, 14, 3, 4294919236, 1, 3, 0, 4, 6, 3, 15, 30, 40, 90, 1, 3, 4294919236, 1, 16, 16, 8, 8, 0, 0, 300, 10, 0, 100, 0, 0, 0, 1, 50, 30, 5, 1, 6, 8, 1, 1, 5, 4294927889, 2, 16, 32, 16, 16, 0, 0, 100, 10, 0, 100, 1, 0];
Item_Catalogue[216] = ["quad iron arrow", 4, 7E3, 5, 17, 3, 4284900966, 1, 4, 0, 16, 24, 4, 80, 30, 40, 90, 1, 3, 4284900966, 1, 16, 16, 8, 8, 0, 0, 300, 10, 8, 100, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[228] = ["nonuple arrow", 4, 7500, 5, 17, 3, 4284900966, 1, 4, 0, 8, 12, 9, 80, 45, 60, 90, 1, 3, 4284900966, 1, 16, 16, 8, 8, 0, 0, 300, 10, 8, 100, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[255] = ["poison shot", 5, 8E3, 5, 14, 3, 4288269312, 1, 3, 0, 4, 6, 3, 15, 30, 40, 90, 1, 3, 4288269312, 1, 16, 16, 4, 4, 0, 0, 300, 10, 0, 100, 0, 0, 0, 4, 50, 35, 1, 0, 2, 2, 1, 0, 6, 2291780608, 1, 24, 24, 8, 8, 0, 0, 100, 10, 0, 100, 1, 0];
Item_Catalogue[314] = ["flame arrow", 5, 8500, 5, 4, 3, 4294940979, 1, 4, 0, 16, 24, 1, 80, 30, 40, 90, 1, 3, 4294940979, 1, 16, 16, 8, 8, 0, 0, 300, 10, 8, 100, 0, 0, 0, 1, 50, 35, 3, 1, 8, 9, 5, 0, 6, 4294927889, 2, 16, 16, 16, 16, 0, 0, 100, 10, 0, 98, 0, 1];
Item_Catalogue[330] = ["sept shot", 5, 9E3, 5, 14, 3, 4294954086, 1, 803, 0, 6, 9, 7, 80, 30, 40, 150, 1, 3, 4294954086, 1, 16, 16, 8, 8, 0, 0, 300, 10, 5, 100, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[347] = ["pierce arrow", 5, 9500, 5, 17, 3, 4293848814, 1, 4, 0, 16, 24, 4, 80, 30, 40, 90, 1, 3, 4293848814, 1, 16, 16, 8, 8, 0, 0, 300, 10, 8, 100, 1, 0, 0, 0, 0, 0, 0];
Item_Catalogue[362] = ["quint poison", 6, 1E4, 5, 17, 3, 4288269312, 1, 4, 0, 16, 24, 5, 80, 30, 40, 90, 1, 3, 4288269312, 1, 16, 16, 8, 8, 0, 0, 300, 10, 5, 100, 0, 0, 0, 4, 50, 40, 1, 0, 2, 2, 1, 0, 6, 2291780608, 1, 24, 24, 8, 8, 0, 0, 100, 10, 0, 100, 0, 0];
Item_Catalogue[396] = ["double flame", 6, 11E3, 5, 15, 3, 4294940979, 1, 4, 0, 16, 24, 2, 80, 30, 40, 90, 1, 3, 4294940979, 1, 16, 16, 8, 8, 0, 0, 300, 10, 8, 100, 0, 0, 0, 1, 50, 40, 3, 1, 8, 9, 3, 0, 6, 4294927889, 2, 16, 16, 16, 16, 0, 0, 100, 10, 0, 98, 0, 1];
Item_Catalogue[412] = ["quad steel arrow", 6, 12E3, 5, 17, 3, 4288256409, 1, 604, 0, 48, 72, 4, 60, 30, 40, 90, 1, 3, 4288256409, 1, 16, 16, 8, 8, 0, 0, 300, 10, 8, 100, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[431] = ["undecuple arrow", 6, 13E3, 5, 17, 3, 4288256409, 1, 4, 0, 24, 36, 11, 80, 45, 60, 90, 1, 3, 4288256409, 1, 16, 16, 8, 8, 0, 0, 300, 10, 8, 100, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[453] = ["nonuple shot", 7, 15E3, 5, 14, 3, 4294954086, 1, 803, 0, 8, 12, 9, 80, 30, 40, 150, 1, 3, 4294954086, 1, 16, 16, 8, 8, 0, 0, 300, 10, 5, 100, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[473] = ["flame shot", 7, 16E3, 5, 14, 3, 4294919236, 1, 803, 0, 8, 12, 5, 10, 30, 40, 90, 1, 3, 4294919236, 1, 16, 16, 8, 8, 0, 0, 300, 10, 0, 100, 0, 0, 0, 1, 50, 45, 5, 1, 12, 16, 1, 1, 22, 4294927889, 2, 16, 16, 16, 16, 0, 0, 100, 10, 0, 100, 1, 0];
Item_Catalogue[481] = ["oct poison", 7, 17E3, 5, 17, 3, 4288269312, 1, 4, 0, 16, 24, 8, 80, 30, 40, 90, 1, 3, 4288269312, 1, 16, 16, 8, 8, 0, 0, 300, 10, 5, 100, 0, 0, 0, 4, 50, 45, 1, 0, 3, 3, 1, 0, 6, 2291780608, 1, 24, 24, 8, 8, 0, 0, 100, 10, 0, 100, 0, 0];
Item_Catalogue[498] = ["double hell fire", 7, 18E3, 5, 15, 3, 4294901862, 1, 4, 0, 16, 24, 2, 70, 30, 40, 90, 1, 3, 4288217139, 1, 16, 16, 8, 8, 0, 0, 300, 10, 9, 100, 0, 0, 0, 1, 50, 50, 1, 1, 90, 99, 1, 0, 24, 4294910532, 2, 16, 32, 16, 32, 0, 0, 100, 10, 30, 100, 0, 1];
Item_Catalogue[506] = ["quint gold arrow", 8, 19E3, 5, 4, 3, 4294956800, 1, 104, 0, 96, 144, 5, 80, 30, 40, 90, 1, 3, 4294956800, 1, 16, 16, 8, 8, 30, 0, 300, 10, 8, 100, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[10] = ["explosion", 1, 250, 6, 5, 4, 4294936576, 1, 3, 0, 5, 10, 1, 30, 80, 90, 90, 0, 2, 4294936576, 1, 16, 16, 8, 8, 0, 0, 100, 10, 0, 100, 0, 0, 0, 1, 0, 0, 1, 1, 5, 10, 1, 0, 2, 1157597184, 1, 48, 48, 32, 32, 0, 0, 10, 10, 0, 100, 0, 0];
Item_Catalogue[14] = ["ice", 1, 500, 6, 5, 4, 4290493439, 1, 3, 0, 5, 10, 1, 30, 80, 90, 90, 0, 7, 4287138047, 1, 16, 16, 8, 8, 0, 0, 100, 10, 0, 100, 0, 0, 0, 2, 30, 0, 0];
Item_Catalogue[18] = ["fire", 1, 750, 6, 5, 4, 4294910498, 1, 4, 0, 2, 6, 1, 60, 80, 90, 80, 1, 5, 4294927889, 2, 16, 32, 16, 16, 0, 0, 100, 10, 5, 100, 0, 0, 0, 1, 80, 0, 1, 1, 2, 6, 1, 0, 5, 4294927889, 2, 32, 32, 32, 32, 0, 0, 200, 10, 50, 100, 0, 1];
Item_Catalogue[57] = ["thunder", 1, 1E3, 6, 5, 4, 4294967142, 1, 5, 0, 1, 30, 3, 5, 80, 90, 80, 1, 10, 4294967142, 2, 16, 16, 16, 16, 0, 0, 100, 10, 0, 100, 0, 0, 0, 3, 0, 0, 0];
Item_Catalogue[67] = ["freeze", 2, 1500, 6, 5, 4, 4291611903, 1, 3, 0, 5, 10, 1, 30, 80, 90, 90, 1, 16, 4291611903, 1, 16, 16, 8, 8, 0, 0, 100, 10, 0, 100, 0, 0, 0, 5, 50, 0, 0];
Item_Catalogue[71] = ["blizzard", 2, 2E3, 6, 5, 4, 4287138047, 1, 8, 0, 5, 10, 9, 30, 120, 135, 90, 1, 16, 4287138047, 1, 16, 16, 8, 8, 100, 0, 100, 10, 8, 100, 0, 0, 0, 2, 30, 0, 0];
Item_Catalogue[75] = ["volcano", 2, 2500, 6, 5, 4, 4294919168, 1, 4, 0, 2, 6, 1, 50, 120, 135, 80, 0, 12, 4294919168, 2, 16, 16, 8, 8, 0, 0, 100, 10, 8, 100, 0, 0, 0, 1, 50, 0, 4, 1, 2, 6, 9, 0, 5, 4294927889, 2, 16, 32, 16, 32, 50, 0, 100, 10, 5, 98, 0, 1];
Item_Catalogue[119] = ["thunder storm", 2, 3E3, 6, 5, 4, 4294967091, 1, 8, 0, 1, 30, 12, 0, 120, 135, 90, 1, 10, 4294967091, 2, 16, 16, 8, 8, 100, 0, 100, 10, 90, 100, 0, 0, 0, 3, 0, 0, 0];
Item_Catalogue[124] = ["delta explosion", 3, 4E3, 6, 24, 4, 4294936576, 1, 9, 1, 10, 20, 3, 5, 80, 90, 80, 1, 2, 2298447906, 2, 8, 40, 24, 24, 10, 10, 15, 3, 0, 80, 1, 0, 0, 1, 0, 0, 0];
Item_Catalogue[134] = ["icicle", 3, 4500, 6, 24, 4, 4290493439, 1, 3, 0, 15, 25, 1, 50, 80, 90, 90, 1, 9, 4287138047, 1, 16, 24, 8, 8, 0, 0, 100, 10, 0, 100, 0, 0, 0, 2, 35, 0, 0];
Item_Catalogue[140] = ["fire rise", 3, 5E3, 6, 24, 4, 4294910498, 1, 4, 0, 2, 6, 5, 80, 80, 90, 80, 1, 5, 4294927889, 2, 16, 32, 16, 16, 20, 0, 100, 10, -2, 99, 0, 1, 0, 1, 30, 0, 0];
Item_Catalogue[156] = ["big thunder", 3, 5500, 6, 24, 4, 4294967142, 1, 5, 1, 1, 150, 1, 8, 80, 90, 80, 1, 10, 4294967142, 2, 32, 64, 64, 64, 0, 5, 100, 10, 0, 100, 1, 0, 0, 3, 0, 0, 0];
Item_Catalogue[181] = ["big icicle", 4, 6E3, 6, 24, 4, 4291611903, 1, 5, 1, 10, 20, 1, 8, 80, 90, 90, 1, 9, 4291611903, 1, 32, 64, 64, 64, 0, 5, 100, 10, 0, 100, 1, 0, 0, 5, 50, 0, 0];
Item_Catalogue[205] = ["ice meteor", 4, 6500, 6, 24, 4, 4287138047, 1, 5, 0, 100, 150, 1, 5, 120, 135, 90, 1, 16, 4287138047, 2, 16, 16, 8, 8, 0, 0, 100, 10, 0, 100, 0, 0, 0, 2, 30, 0, 4, 0, 10, 15, 9, 1, 16, 4287138047, 2, 16, 16, 8, 8, 0, 10, 100, 10, 5, 100, 0, 0];
Item_Catalogue[217] = ["super volcano", 4, 7E3, 6, 24, 4, 4294919168, 1, 4, 0, 2, 6, 1, 50, 120, 135, 80, 0, 12, 4294919168, 2, 16, 16, 8, 8, 0, 0, 100, 10, 8, 100, 0, 0, 0, 1, 50, 0, 6, 1, 4, 8, 15, 0, 5, 4294927889, 2, 16, 32, 16, 32, 50, 0, 100, 10, 5, 98, 0, 1];
Item_Catalogue[229] = ["thunder spear", 4, 7500, 6, 24, 4, 4294967091, 1, 108, 0, 1, 30, 24, 0, 120, 135, 90, 1, 10, 4294967091, 2, 5, 32, 5, 32, 200, 10, 100, 10, 90, 90, 0, 1, 0, 3, 0, 0, 0];
Item_Catalogue[256] = ["time explosion", 5, 8E3, 6, 25, 4, 4294919185, 1, 4, 0, 20, 40, 1, 40, 80, 90, 80, 0, 12, 4294919185, 1, 16, 16, 8, 8, 0, 100, 500, 10, 10, 98, 0, 1, 0, 1, 0, 0, 4, 1, 15, 25, 10, 1, 6, 1157588480, 1, 8, 32, 32, 32, 10, 10, 20, 5, 0, 98, 1, 0];
Item_Catalogue[315] = ["ice spike", 5, 8500, 6, 25, 4, 4290493439, 1, 3, 0, 15, 25, 1, 50, 80, 90, 90, 1, 9, 4287138047, 1, 16, 24, 8, 8, 0, 0, 100, 10, 0, 100, 0, 0, 0, 2, 40, 0, 7, 0, 5, 15, 3, 1, 9, 4287138047, 1, 8, 16, 8, 8, 0, 9, 10, 10, 0, 98, 0, 2];
Item_Catalogue[331] = ["inferno", 5, 9E3, 6, 25, 4, 4294910498, 1, 103, 0, 2, 6, 7, 5, 80, 90, 60, 1, 6, 2298439185, 2, 20, 20, 16, 16, 70, 0, 200, 10, 0, 100, 0, 0, 0, 1, 30, 0, 0];
Item_Catalogue[348] = ["electric shock", 5, 9500, 6, 25, 4, 4294967142, 1, 9, 0, 1, 20, 30, 1, 80, 90, 30, 1, 10, 2298478438, 2, 16, 12, 16, 16, 60, 0, 30, 10, 0, 90, 0, 0, 0, 3, 0, 0, 0];
Item_Catalogue[363] = ["freeze explosion", 6, 1E4, 6, 25, 4, 4291611903, 1, 9, 1, 5, 10, 6, 9, 80, 90, 90, 1, 4, 2295123199, 2, 16, 48, 48, 48, 0, 25, 30, 10, 0, 80, 0, 2, 0, 5, 10, 0, 0];
Item_Catalogue[397] = ["ice orb", 6, 11E3, 6, 25, 4, 4287138047, 1, 3, 0, 0, 0, 1, 6, 120, 135, 60, 1, 2, 4287138047, 2, 16, 16, 16, 16, 0, 150, 150, 10, 0, 100, 0, 0, 0, 2, 30, 0, 2, 0, 10, 15, 50, 1, 9, 4287138047, 2, 16, 16, 8, 8, 0, 6, 50, 10, 0, 95, 0, 0];
Item_Catalogue[413] = ["lava", 6, 12E3, 6, 25, 4, 4294919168, 1, 4, 0, 2, 6, 1, 50, 120, 135, 80, 0, 12, 4294919168, 2, 16, 16, 8, 8, 0, 0, 100, 10, 8, 100, 0, 0, 0, 1, 50, 0, 9, 1, 6, 9, 30, 0, 5, 1157588497, 2, 16, 24, 16, 32, 50, 0, 100, 10, 1, 100, 0, 1];
Item_Catalogue[432] = ["thunder orb", 6, 13E3, 6, 25, 4, 4294967091, 2, 3, 0, 0, 0, 1, 10, 120, 135, 60, 0, 2, 4294967142, 2, 16, 16, 16, 16, 0, 200, 200, 10, 0, 100, 0, 0, 0, 3, 0, 0, 2, 0, 1, 90, 25, 0, 15, 4294967142, 2, 16, 16, 8, 8, 0, 10, 50, 10, 0, 60, 0, 0];
Item_Catalogue[454] = ["spread explosion", 7, 15E3, 6, 26, 4, 4294936576, 1, 4, 0, 20, 40, 10, 50, 80, 90, 80, 0, 12, 4294936610, 2, 16, 16, 8, 8, 15, 50, 200, 10, 5, 100, 0, 2, 0, 1, 0, 0, 1, 1, 30, 50, 1, 0, 21, 4294936610, 2, 48, 48, 32, 32, 0, 0, 10, 20, 0, 100, 0, 0];
Item_Catalogue[474] = ["ice bolt", 7, 16E3, 6, 26, 4, 4290493439, 1, 5, 0, 25, 35, 3, 5, 80, 90, 90, 1, 9, 4287138047, 1, 16, 16, 8, 8, 0, 0, 100, 10, 0, 100, 0, 0, 0, 2, 45, 0, 0];
Item_Catalogue[482] = ["hell fire", 7, 17E3, 6, 26, 4, 4294910498, 1, 103, 0, 2, 6, 30, 5, 80, 90, 40, 1, 6, 2298439185, 2, 16, 16, 16, 16, 40, 0, 80, 10, 0, 100, 0, 0, 0, 1, 50, 0, 0];
Item_Catalogue[499] = ["lightning", 7, 18E3, 6, 26, 4, 4294967142, 1, 11, 0, 1, 90, 30, 5, 80, 90, 80, 1, 20, 4294967142, 2, 16, 16, 16, 16, 60, 0, 150, 10, 0, 100, 0, 0, 0, 3, 0, 0, 0];
Item_Catalogue[507] = ["permafrost", 8, 19E3, 6, 26, 4, 4291611903, 1, 9, 1, 15, 25, 6, 9, 80, 90, 90, 1, 22, 1724697855, 2, 24, 48, 48, 48, 0, 25, 30, 10, 0, 70, 1, 0, 0, 5, 30, 0, 0];
Item_Catalogue[60] = ["staff of wood", 1, 250, 12, 11, 5, 4287120384, 1, 6, 0, 2, 3, 1, 0, 80, 90, 70, 0, 15, 4288243251, 2, 24, 24, 24, 24, 0, 0, 100, 40, 0, 100, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[61] = ["long staff", 1, 500, 12, 11, 5, 4289374890, 1, 6, 0, 3, 4, 1, 0, 80, 90, 110, 0, 15, 4289374890, 2, 24, 24, 24, 24, 0, 0, 100, 40, 0, 100, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[62] = ["staff of thunder", 1, 750, 12, 11, 5, 4294967142, 1, 6, 0, 1, 9, 1, 0, 80, 90, 70, 0, 15, 4294967142, 2, 24, 24, 24, 24, 0, 0, 100, 40, 0, 100, 0, 0, 0, 3, 0, 0, 0];
Item_Catalogue[63] = ["staff of ice", 1, 1E3, 12, 11, 5, 4290493439, 1, 6, 0, 4, 5, 1, 0, 80, 90, 70, 0, 15, 4290493439, 2, 24, 24, 24, 24, 0, 0, 100, 40, 0, 100, 0, 0, 0, 2, 10, 0, 0];
Item_Catalogue[115] = ["battle staff", 2, 1500, 12, 11, 5, 4294919236, 1, 6, 0, 10, 10, 1, 0, 80, 90, 30, 0, 15, 4294927974, 2, 24, 24, 24, 24, 0, 0, 100, 40, 0, 100, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[126] = ["staff of fire", 2, 2E3, 12, 11, 5, 4294927889, 1, 6, 0, 2, 3, 1, 0, 80, 90, 70, 0, 15, 4294927889, 2, 24, 24, 24, 24, 0, 0, 100, 10, 0, 100, 0, 0, 0, 1, 30, 0, 0];
Item_Catalogue[127] = ["lightning staff", 2, 2500, 12, 11, 5, 4294967142, 1, 5, 0, 1, 25, 1, 10, 80, 90, 70, 1, 10, 4294967142, 2, 16, 24, 16, 16, 10, 0, 100, 20, 0, 100, 0, 0, 0, 3, 0, 0, 0];
Item_Catalogue[128] = ["staff of poison", 2, 3E3, 12, 11, 5, 4282711876, 1, 6, 0, 0, 1, 1, 0, 80, 90, 70, 0, 15, 4282711876, 1, 24, 24, 8, 8, 0, 0, 100, 10, 0, 100, 0, 0, 0, 4, 20, 0, 0];
Item_Catalogue[129] = ["long wood staff", 3, 4E3, 12, 11, 5, 4288243251, 1, 6, 0, 10, 15, 1, 0, 80, 90, 130, 0, 15, 4288243251, 2, 24, 24, 24, 24, 0, 0, 100, 40, 0, 100, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[135] = ["staff of freeze", 3, 4500, 12, 11, 5, 4291611903, 1, 6, 0, 5, 10, 1, 0, 80, 90, 70, 0, 15, 4291611903, 2, 24, 24, 24, 24, 0, 0, 100, 40, 0, 100, 0, 0, 0, 5, 20, 0, 0];
Item_Catalogue[141] = ["staff of light", 1, 5E3, 12, 11, 5, 4294967295, 1, 6, 0, 5, 5, 1, 0, 80, 90, 70, 0, 13, 2298478591, 2, 16, 16, 8, 8, 0, 100, 200, 40, 0, 100, 1, 0, 50, 3, 0, 0, 0];
Item_Catalogue[157] = ["staff of flame", 3, 5500, 12, 34, 5, 4294927889, 1, 6, 0, 4, 6, 1, 0, 80, 90, 70, 0, 15, 4294927889, 2, 24, 24, 24, 24, 0, 0, 100, 10, 0, 100, 0, 0, 0, 1, 30, 0, 0];
Item_Catalogue[182] = ["combat staff", 4, 6E3, 12, 34, 5, 4294919236, 1, 6, 0, 25, 25, 1, 0, 80, 90, 30, 0, 15, 4294919236, 2, 24, 24, 24, 24, 0, 0, 100, 40, 0, 100, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[206] = ["staff of poisoner", 4, 6500, 12, 34, 5, 4284874956, 1, 6, 0, 1, 1, 1, 0, 80, 90, 70, 0, 15, 4284874956, 1, 24, 24, 8, 8, 0, 0, 100, 10, 0, 100, 0, 0, 0, 4, 30, 0, 0];
Item_Catalogue[218] = ["long iron staff", 4, 7E3, 12, 34, 5, 4284900966, 1, 6, 0, 10, 15, 1, 0, 80, 90, 150, 0, 15, 4288256409, 2, 24, 24, 24, 24, 0, 0, 100, 40, 0, 100, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[230] = ["staff of icicle", 4, 7500, 12, 34, 5, 4290493439, 1, 6, 0, 10, 15, 1, 0, 80, 90, 70, 0, 15, 4290493439, 2, 24, 24, 24, 24, 0, 0, 100, 40, 0, 100, 0, 0, 0, 2, 15, 0, 0];
Item_Catalogue[257] = ["explosion staff", 5, 8E3, 12, 34, 5, 4294936576, 1, 6, 1, 10, 15, 1, 0, 80, 90, 70, 0, 2, 2298447906, 2, 24, 24, 24, 24, 0, 0, 100, 40, 0, 100, 0, 0, 0, 1, 0, 0, 0];
Item_Catalogue[316] = ["warrior staff", 5, 8500, 12, 34, 5, 4288217088, 1, 6, 0, 35, 35, 1, 0, 80, 90, 30, 0, 15, 4288217088, 2, 24, 24, 24, 24, 0, 0, 100, 40, 0, 100, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[332] = ["inferno staff", 5, 9E3, 12, 45, 5, 4294927889, 1, 6, 0, 10, 15, 1, 0, 80, 90, 70, 1, 6, 4294927889, 2, 16, 16, 16, 16, 0, 0, 100, 10, 0, 96, 0, 0, 20, 1, 30, 0, 0];
Item_Catalogue[349] = ["electric staff", 5, 9500, 12, 45, 5, 4294967142, 1, 6, 0, 1, 9, 3, 2, 80, 90, 70, 0, 14, 2298478438, 2, 16, 16, 16, 16, 15, 0, 30, 10, 0, 90, 0, 0, 0, 3, 0, 0, 0];
Item_Catalogue[364] = ["long silver staff", 6, 1E4, 12, 45, 5, 4294967295, 1, 6, 0, 10, 15, 1, 0, 80, 90, 170, 0, 15, 4294967295, 2, 24, 24, 24, 24, 0, 0, 100, 40, 0, 100, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[398] = ["poisonous staff", 6, 11E3, 12, 45, 5, 4284874905, 1, 6, 0, 1, 2, 1, 0, 80, 90, 70, 0, 15, 4284874905, 1, 24, 24, 8, 8, 0, 0, 100, 10, 0, 100, 0, 0, 0, 4, 40, 0, 0];
Item_Catalogue[414] = ["freeze exp staff", 6, 12E3, 12, 45, 5, 4291611903, 1, 6, 1, 5, 5, 1, 0, 80, 90, 70, 0, 15, 4291611903, 2, 16, 16, 12, 12, 0, 0, 100, 40, 0, 100, 0, 0, 0, 5, 5, 0, 0];
Item_Catalogue[433] = ["mega exp staff", 6, 13E3, 12, 45, 5, 4294936576, 1, 6, 1, 10, 15, 1, 0, 80, 90, 70, 0, 2, 2298447906, 2, 32, 32, 32, 32, 0, 0, 100, 40, 0, 100, 0, 0, 0, 1, 0, 0, 0];
Item_Catalogue[455] = ["strike rod", 7, 15E3, 12, 60, 5, 4294919236, 1, 6, 0, 55, 55, 1, 0, 80, 90, 30, 0, 21, 4294919236, 2, 24, 24, 24, 24, 0, 0, 100, 40, 0, 100, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[475] = ["inferno rod", 7, 16E3, 12, 60, 5, 4294927889, 1, 6, 0, 20, 25, 1, 0, 80, 90, 70, 1, 22, 4294927889, 2, 12, 12, 16, 16, 0, 0, 150, 10, 0, 96, 1, 0, 20, 1, 30, 0, 0];
Item_Catalogue[483] = ["thunder rod", 7, 17E3, 12, 60, 5, 4294967142, 1, 6, 0, 1, 30, 3, 0, 80, 90, 70, 0, 21, 2298478438, 2, 16, 16, 16, 16, 15, 0, 100, 10, 0, 100, 0, 0, 0, 3, 0, 0, 0];
Item_Catalogue[500] = ["long gold rod", 7, 18E3, 12, 60, 5, 4294956800, 1, 6, 0, 10, 15, 1, 0, 80, 90, 190, 0, 15, 4294956800, 2, 24, 24, 24, 24, 0, 0, 100, 40, 0, 100, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[508] = ["poisonous rod", 8, 19E3, 12, 60, 5, 4288217343, 1, 6, 0, 2, 2, 1, 0, 80, 90, 70, 0, 15, 4288217343, 1, 24, 24, 8, 8, 0, 0, 100, 10, 0, 100, 0, 0, 0, 4, 50, 0, 0];
Item_Catalogue[77] = ["handgun", 1, 250, 14, 13, 6, 4291611852, 1, 3, 0, 8, 12, 1, 30, 20, 30, 60, 1, 17, 4291611852, 1, 16, 16, 8, 8, 0, 0, 50, 10, 0, 100, 0, 0, 0, 0, 0, 5, 0];
Item_Catalogue[78] = ["submachine-gun", 1, 500, 14, 27, 6, 4284901017, 1, 3, 0, 4, 8, 1, 30, 5, 10, 50, 1, 17, 4284901017, 1, 16, 16, 8, 8, 0, 0, 50, 10, 0, 100, 0, 0, 0, 0, 0, 5, 0];
Item_Catalogue[79] = ["shotgun", 1, 750, 14, 28, 6, 4288243251, 1, 3, 0, 1, 20, 5, 30, 50, 60, 50, 0, 13, 4288243251, 1, 16, 16, 8, 8, 5, 0, 30, 10, 0, 100, 0, 1, 0, 0, 0, 15, 0];
Item_Catalogue[80] = ["rifle", 1, 1E3, 14, 29, 6, 4284914073, 1, 3, 0, 20, 40, 1, 50, 50, 60, 120, 1, 17, 4284914073, 1, 16, 32, 8, 8, 0, 0, 300, 10, 0, 100, 0, 0, 0, 0, 0, 10, 0];
Item_Catalogue[81] = ["grenade", 2, 1500, 14, 30, 6, 4294927872, 1, 4, 0, 8, 12, 1, 40, 70, 80, 60, 1, 17, 4294927872, 1, 16, 16, 8, 8, 0, 0, 100, 10, 10, 100, 0, 0, 0, 1, 50, 25, 4, 1, 2, 6, 4, 0, 5, 4294927889, 2, 16, 32, 16, 32, 0, 0, 100, 10, 8, 98, 0, 1];
Item_Catalogue[82] = ["laser gun", 2, 2E3, 14, 31, 6, 4288217088, 1, 3, 1, 8, 12, 1, 30, 20, 30, 50, 1, 18, 4288217088, 1, 8, 16, 8, 8, 0, 0, 200, 10, 0, 100, 1, 0, 0, 1, 100, 20, 0];
Item_Catalogue[83] = ["bazooka", 2, 2500, 14, 32, 6, 4278229248, 1, 3, 0, 40, 60, 1, 30, 80, 90, 60, 1, 17, 4278229248, 1, 32, 32, 16, 16, 0, 0, 50, 10, 5, 100, 0, 0, 0, 0, 0, 30, 3, 0, 20, 30, 6, 0, 6, 2291754547, 1, 24, 24, 12, 12, 10, 0, 50, 20, 0, 97, 1, 0];
Item_Catalogue[120] = ["homing laser", 2, 3E3, 14, 33, 6, 4288269312, 1, 3, 0, 8, 12, 2, 30, 20, 30, 70, 1, 11, 4288269312, 1, 16, 16, 8, 8, 0, 0, 200, 10, 0, 100, 0, 0, 50, 3, 0, 20, 0];
Item_Catalogue[125] = ["beretta", 3, 4E3, 14, 13, 6, 4291611852, 1, 3, 0, 24, 36, 1, 30, 20, 30, 60, 1, 17, 4291611852, 1, 16, 16, 8, 8, 0, 0, 50, 10, 0, 100, 0, 0, 0, 0, 0, 10, 0];
Item_Catalogue[136] = ["uzi", 3, 4500, 14, 27, 6, 4281545574, 1, 3, 0, 12, 24, 1, 30, 5, 10, 50, 1, 17, 4281545574, 1, 16, 16, 8, 8, 0, 0, 50, 10, 0, 100, 0, 0, 0, 0, 0, 15, 0];
Item_Catalogue[142] = ["remington", 3, 5E3, 14, 28, 6, 4282655266, 1, 3, 0, 1, 40, 7, 30, 50, 60, 50, 0, 13, 4282655266, 1, 16, 16, 8, 8, 7, 0, 30, 10, 0, 100, 0, 1, 0, 0, 0, 30, 0];
Item_Catalogue[158] = ["sniper rifle", 3, 5500, 14, 29, 6, 4278203187, 1, 3, 0, 60, 80, 1, 50, 50, 60, 120, 1, 17, 4284914073, 1, 16, 32, 8, 8, 0, 0, 300, 10, 0, 100, 0, 0, 0, 0, 0, 20, 0];
Item_Catalogue[183] = ["grenade launcher", 4, 6E3, 14, 30, 6, 4291572480, 1, 4, 0, 12, 24, 1, 40, 70, 80, 60, 1, 17, 4291572480, 1, 16, 16, 8, 8, 0, 0, 100, 10, 10, 100, 0, 0, 0, 1, 50, 40, 4, 1, 6, 18, 4, 0, 5, 2298426129, 2, 16, 32, 16, 32, 0, 0, 100, 10, 8, 96, 0, 1];
Item_Catalogue[207] = ["laser beam gun", 4, 6500, 14, 31, 6, 4291559424, 1, 3, 1, 16, 24, 1, 25, 20, 30, 50, 1, 18, 4291559424, 1, 8, 16, 8, 8, 0, 0, 200, 10, 0, 100, 1, 0, 0, 1, 100, 35, 0];
Item_Catalogue[219] = ["cannon", 4, 7E3, 14, 32, 6, 4288256256, 1, 3, 0, 80, 120, 1, 30, 80, 90, 60, 1, 17, 4288256256, 1, 32, 32, 16, 16, 0, 0, 50, 10, 5, 100, 0, 0, 0, 0, 0, 50, 3, 0, 50, 70, 6, 1, 6, 2295109939, 1, 12, 48, 16, 16, 0, 5, 25, 20, 0, 98, 1, 0];
Item_Catalogue[231] = ["homing laser beam", 4, 7500, 14, 33, 6, 4291624755, 1, 3, 0, 8, 12, 5, 30, 20, 30, 70, 1, 11, 4291624755, 1, 16, 16, 8, 8, 0, 0, 200, 10, 0, 100, 0, 0, 100, 3, 0, 35, 0];
Item_Catalogue[258] = ["3-round burst", 5, 8E3, 14, 13, 6, 4284900966, 1, 603, 0, 24, 36, 3, 30, 20, 30, 60, 1, 17, 4284900966, 1, 16, 16, 8, 8, 10, 0, 50, 10, 0, 100, 0, 0, 0, 0, 0, 10, 0];
Item_Catalogue[317] = ["mini uzi", 5, 8500, 14, 27, 6, 4281545625, 1, 103, 0, 12, 24, 2, 30, 5, 10, 50, 1, 17, 4281545625, 1, 16, 16, 8, 8, 5, 0, 50, 10, 0, 100, 0, 0, 0, 0, 0, 25, 0];
Item_Catalogue[333] = ["scattergun", 5, 9E3, 14, 28, 6, 4284883456, 1, 803, 0, 1, 80, 9, 30, 50, 60, 50, 0, 13, 4284883456, 1, 16, 16, 8, 8, 9, 0, 30, 10, 0, 100, 0, 2, 0, 0, 0, 40, 0];
Item_Catalogue[350] = ["hunting gun", 5, 9500, 14, 29, 6, 4284887859, 1, 3, 0, 140, 160, 1, 50, 50, 60, 120, 1, 17, 4284900966, 1, 16, 32, 8, 8, 0, 0, 300, 10, 0, 100, 0, 0, 0, 0, 0, 30, 0];
Item_Catalogue[365] = ["M9 grenade", 6, 1E4, 14, 30, 6, 4294910481, 1, 4, 0, 18, 48, 1, 40, 70, 80, 60, 1, 17, 4294910481, 1, 16, 16, 8, 8, 0, 0, 100, 10, 10, 100, 0, 0, 0, 1, 50, 55, 4, 1, 6, 18, 9, 0, 5, 3439272465, 2, 16, 32, 16, 32, 0, 0, 100, 10, 15, 90, 0, 1];
Item_Catalogue[399] = ["power laser gun", 6, 11E3, 14, 31, 6, 4291559424, 1, 3, 1, 24, 36, 1, 20, 20, 30, 50, 1, 18, 4291559424, 1, 8, 16, 8, 8, 0, 0, 200, 10, 0, 100, 1, 0, 0, 1, 100, 45, 0];
Item_Catalogue[415] = ["wave cannon", 6, 12E3, 14, 32, 6, 4284900864, 1, 3, 0, 120, 180, 1, 30, 80, 90, 60, 1, 17, 4284900864, 1, 32, 32, 16, 16, 0, 0, 50, 10, 5, 100, 0, 0, 0, 0, 0, 70, 9, 0, 100, 150, 6, 1, 11, 4284892194, 2, 12, 40, 20, 20, 25, 10, 50, 20, 0, 98, 1, 0];
Item_Catalogue[434] = ["pierce homing", 6, 13E3, 14, 33, 6, 4294967091, 1, 3, 0, 12, 16, 7, 30, 20, 30, 70, 1, 11, 4294967091, 1, 8, 16, 8, 8, 0, 0, 200, 10, 0, 100, 1, 0, 150, 3, 0, 45, 0];
Item_Catalogue[456] = ["magnum", 7, 15E3, 14, 61, 6, 4291611852, 1, 3, 1, 80, 120, 1, 30, 20, 30, 60, 1, 17, 4291611852, 1, 16, 16, 8, 8, 0, 0, 50, 10, 0, 100, 0, 0, 0, 0, 0, 15, 0];
Item_Catalogue[476] = ["micro uzi", 7, 16E3, 14, 27, 6, 4280427110, 1, 103, 0, 16, 32, 3, 30, 5, 10, 50, 1, 17, 4280427110, 1, 16, 16, 8, 8, 5, 0, 50, 10, 0, 100, 0, 0, 0, 0, 0, 35, 0];
Item_Catalogue[484] = ["triple shotgun", 7, 17E3, 14, 28, 6, 4287120418, 1, 803, 0, 1, 120, 15, 30, 50, 60, 50, 0, 13, 4287120418, 1, 16, 16, 8, 8, 11, 0, 30, 10, 0, 100, 0, 2, 0, 0, 0, 50, 0];
Item_Catalogue[501] = ["rail gun", 7, 18E3, 14, 29, 6, 4282664004, 1, 3, 0, 300, 320, 1, 50, 50, 60, 150, 1, 17, 4282664004, 1, 16, 32, 8, 8, 0, 0, 300, 10, 0, 100, 0, 0, 0, 0, 0, 40, 0];
Item_Catalogue[509] = ["napalm gun", 8, 19E3, 14, 30, 6, 4294906112, 1, 4, 0, 26, 96, 1, 40, 70, 80, 60, 1, 17, 4294906112, 1, 16, 16, 8, 8, 0, 0, 100, 10, 10, 100, 0, 0, 0, 1, 50, 70, 4, 1, 15, 45, 9, 0, 5, 3439269896, 2, 16, 32, 16, 32, 0, 0, 100, 10, 8, 94, 0, 1];
Item_Catalogue[188] = ["whip", 0, 100, 15, 35, 7, 4294936576, 1, 0, 0, 1, 4, 0, 0, 15, 20, 40, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[189] = ["stone whip", 1, 250, 15, 35, 7, 4287120384, 1, 4, 0, 1, 4, 3, 80, 15, 20, 40, 0, 12, 4282664004, 1, 16, 16, 8, 8, 0, 20, 200, 10, 5, 100, 0, 0, 0, 0, 0, 10, 0, 0, 3, 5, 0];
Item_Catalogue[190] = ["fire whip", 1, 500, 15, 35, 7, 4294919236, 1, 4, 0, 1, 4, 4, 50, 15, 20, 40, 0, 5, 2298439185, 2, 16, 32, 16, 32, 0, 0, 100, 10, 8, 95, 0, 1, 0, 1, 30, 40, 0, 0, 3, 5, 0];
Item_Catalogue[191] = ["iron whip", 1, 750, 15, 35, 7, 4289374890, 1, 0, 0, 10, 20, 0, 0, 15, 20, 40, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[192] = ["thunder whip", 1, 1E3, 15, 35, 7, 4294967040, 1, 5, 0, 1, 4, 5, 5, 15, 20, 40, 1, 10, 4294967108, 2, 16, 16, 8, 8, 50, 0, 100, 10, 0, 100, 0, 0, 0, 3, 0, 90, 0, 0, 1, 33, 0];
Item_Catalogue[193] = ["ice whip", 2, 1500, 15, 35, 7, 4291611903, 1, 103, 0, 2, 5, 5, 30, 15, 20, 40, 1, 4, 2295123199, 2, 16, 16, 8, 8, 0, 30, 200, 10, 5, 100, 0, 1, 0, 2, 20, 60, 0, 0, 15, 20, 0];
Item_Catalogue[194] = ["thorn whip", 2, 2E3, 15, 35, 7, 4291603080, 1, 3, 0, 2, 6, 7, 20, 15, 20, 40, 1, 9, 4291603080, 1, 16, 16, 8, 8, 0, 5, 100, 10, 0, 100, 1, 0, 0, 0, 0, 80, 0, 0, 18, 22, 0];
Item_Catalogue[195] = ["poison whip", 2, 2500, 15, 35, 7, 4287103231, 1, 9, 0, 2, 7, 5, 1, 15, 20, 40, 0, 6, 2290614527, 1, 16, 16, 8, 8, 50, 10, 200, 10, 0, 99, 0, 1, 0, 4, 100, 120, 0, 0, 1, 1, 0];
Item_Catalogue[196] = ["explosion whip", 2, 3E3, 15, 35, 7, 4294927906, 1, 9, 1, 2, 8, 3, 5, 15, 20, 40, 1, 2, 2298430498, 2, 8, 40, 16, 16, 10, 10, 15, 3, 0, 80, 1, 0, 0, 1, 0, 150, 0, 0, 30, 40, 0];
Item_Catalogue[197] = ["stone chain", 3, 4E3, 15, 36, 7, 4287120384, 1, 4, 0, 3, 9, 3, 80, 15, 20, 40, 0, 13, 4284900966, 1, 16, 16, 8, 8, 0, 20, 200, 10, 7, 100, 0, 0, 0, 0, 0, 40, 0, 0, 18, 30, 0];
Item_Catalogue[198] = ["fire chain", 3, 4500, 15, 36, 7, 4294919236, 1, 9, 0, 3, 10, 4, 1, 15, 20, 40, 1, 5, 1728026897, 2, 12, 24, 24, 24, 0, 0, 100, 10, 0, 95, 1, 0, 0, 1, 30, 60, 0, 0, 6, 10, 0];
Item_Catalogue[199] = ["iron chain", 3, 5E3, 15, 36, 7, 4289374890, 1, 0, 0, 20, 40, 0, 0, 15, 20, 40, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[200] = ["thunder chain", 3, 5500, 15, 36, 7, 4294967040, 1, 105, 0, 3, 12, 5, 5, 15, 20, 40, 1, 18, 2298478404, 2, 8, 32, 8, 8, 50, 0, 100, 10, 0, 100, 0, 0, 0, 3, 0, 130, 0, 0, 1, 66, 0];
Item_Catalogue[201] = ["ice chain", 4, 6E3, 15, 36, 7, 4291611903, 1, 103, 0, 4, 13, 5, 30, 15, 20, 40, 1, 4, 2295123199, 2, 16, 16, 8, 8, 0, 20, 200, 10, 20, 100, 0, 1, 0, 2, 20, 90, 0, 0, 30, 40, 0];
Item_Catalogue[208] = ["thorn chain", 4, 6500, 15, 36, 7, 4291603080, 1, 803, 0, 4, 14, 15, 20, 15, 20, 40, 1, 9, 4291603080, 1, 16, 16, 8, 8, 0, 5, 100, 10, 0, 100, 1, 0, 0, 0, 0, 120, 0, 0, 18, 22, 0];
Item_Catalogue[220] = ["poison chain", 4, 7E3, 15, 36, 7, 4287103231, 1, 9, 0, 4, 15, 5, 1, 15, 20, 40, 0, 6, 2290614527, 1, 16, 16, 8, 8, 0, 20, 300, 10, 0, 99, 0, 1, 0, 4, 150, 180, 0, 0, 2, 2, 0];
Item_Catalogue[232] = ["explosion chain", 4, 7500, 15, 36, 7, 4294927906, 1, 9, 1, 4, 16, 3, 5, 15, 20, 40, 1, 2, 2298430498, 2, 32, 8, 16, 16, 0, 19, 20, 3, 0, 80, 1, 0, 0, 1, 0, 220, 0, 0, 60, 80, 0];
Item_Catalogue[259] = ["stone flail", 5, 8E3, 15, 37, 7, 4287120384, 1, 4, 0, 5, 17, 3, 80, 15, 20, 40, 0, 13, 4284900966, 1, 16, 16, 8, 8, 0, 20, 200, 10, 7, 100, 0, 0, 0, 0, 0, 60, 0, 0, 32, 52, 0];
Item_Catalogue[318] = ["fire flail", 5, 8500, 15, 37, 7, 4294919236, 1, 9, 0, 5, 18, 4, 1, 15, 20, 40, 1, 5, 2298452241, 2, 8, 16, 20, 20, 0, 0, 300, 10, 0, 99, 1, 0, 0, 1, 30, 80, 0, 0, 8, 15, 0];
Item_Catalogue[334] = ["iron flail", 5, 9E3, 15, 37, 7, 4289374890, 1, 0, 0, 40, 80, 0, 0, 15, 20, 40, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[351] = ["thunder flail", 5, 9500, 15, 37, 7, 4294967040, 1, 5, 0, 5, 20, 5, 5, 15, 20, 40, 1, 18, 4294967108, 2, 6, 16, 8, 8, 0, 0, 100, 10, 0, 100, 0, 0, 0, 3, 0, 150, 0, 0, 1, 99, 0];
Item_Catalogue[366] = ["ice flail", 6, 1E4, 15, 37, 7, 4291611903, 1, 109, 0, 6, 21, 5, 3, 15, 20, 40, 1, 4, 2295123199, 2, 16, 16, 8, 8, 0, 20, 200, 10, 20, 100, 0, 1, 0, 2, 20, 120, 0, 0, 45, 60, 0];
Item_Catalogue[400] = ["thorn flail", 6, 11E3, 15, 37, 7, 4291603080, 1, 403, 0, 6, 22, 45, 20, 15, 20, 40, 1, 9, 4291603080, 1, 8, 8, 8, 8, 0, 5, 100, 10, 0, 100, 1, 0, 0, 0, 0, 160, 0, 0, 18, 22, 0];
Item_Catalogue[416] = ["poison flail", 6, 12E3, 15, 37, 7, 4287103231, 1, 9, 0, 6, 23, 5, 1, 15, 20, 40, 0, 6, 2290614527, 1, 16, 16, 8, 8, 100, 20, 300, 20, 0, 99, 0, 1, 0, 4, 200, 240, 0, 0, 4, 5, 0];
Item_Catalogue[435] = ["explosion flail", 6, 13E3, 15, 37, 7, 4294927906, 1, 9, 1, 6, 24, 3, 5, 15, 20, 40, 1, 19, 2298430498, 2, 16, 16, 16, 16, 0, 19, 20, 3, 0, 80, 1, 0, 0, 1, 0, 360, 0, 0, 120, 160, 0];
Item_Catalogue[457] = ["morning star", 7, 15E3, 15, 38, 7, 4289374890, 1, 0, 0, 100, 200, 0, 0, 15, 20, 40, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[477] = ["stone ms", 7, 16E3, 15, 38, 7, 4287120384, 1, 104, 0, 7, 26, 3, 80, 15, 20, 40, 0, 13, 4282664004, 1, 16, 16, 8, 8, 0, 20, 200, 10, 9, 100, 0, 0, 0, 0, 0, 70, 0, 0, 60, 110, 0];
Item_Catalogue[485] = ["fire ms", 7, 17E3, 15, 38, 7, 4294919236, 1, 9, 1, 7, 27, 4, 1, 15, 20, 40, 1, 22, 1728026897, 2, 16, 16, 20, 20, 0, 0, 100, 10, 0, 98, 1, 0, 0, 1, 30, 90, 0, 0, 8, 15, 0];
Item_Catalogue[502] = ["thunder ms", 7, 18E3, 15, 38, 7, 4294967040, 1, 5, 0, 7, 28, 5, 5, 15, 20, 40, 1, 20, 4294967108, 2, 16, 32, 8, 8, 50, 0, 100, 10, 0, 100, 0, 0, 0, 3, 0, 170, 0, 0, 1, 222, 0];
Item_Catalogue[510] = ["ice ms", 8, 19E3, 15, 38, 7, 4291611903, 1, 11, 0, 8, 29, 5, 3, 15, 20, 40, 1, 4, 2295123199, 2, 16, 16, 8, 8, 0, 20, 200, 10, 10, 100, 0, 1, 0, 2, 25, 120, 0, 0, 90, 120, 0];
Item_Catalogue[289] = ["ring", 0, 100, 18, 41, 8, 4291611852, 25, 0, 0, 2, 3, 0, 0, 20, 30, 60, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[290] = ["fire ring", 1, 250, 18, 41, 8, 4294919236, 25, 3, 0, 3, 4, 1, 1, 20, 30, 60, 0, 6, 2298439185, 2, 24, 24, 16, 16, 0, 0, 100, 10, 0, 98, 1, 0, 0, 1, 50, 30, 0, 0, 4, 6, 0];
Item_Catalogue[291] = ["thunder ring", 1, 500, 18, 41, 8, 4294967108, 25, 11, 0, 3, 4, 7, 10, 20, 30, 60, 1, 10, 4294967040, 1, 16, 16, 16, 16, 0, 10, 100, 10, 0, 90, 0, 0, 0, 3, 0, 90, 0, 0, 1, 29, 0];
Item_Catalogue[292] = ["long ring", 1, 750, 18, 41, 8, 4287120384, 25, 0, 0, 5, 10, 0, 0, 20, 30, 90, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[293] = ["ice ring", 1, 1E3, 18, 41, 8, 4289374975, 25, 9, 0, 3, 4, 3, 1, 20, 30, 60, 1, 4, 4289374975, 2, 16, 24, 16, 16, 0, 25, 50, 10, 0, 90, 0, 1, 0, 2, 20, 80, 0, 0, 15, 30, 0];
Item_Catalogue[294] = ["thorn ring", 2, 1500, 18, 41, 8, 4291603080, 25, 9, 0, 4, 5, 16, 5, 20, 30, 60, 1, 9, 4291603080, 1, 16, 16, 16, 16, 0, 10, 100, 10, 0, 100, 0, 0, 0, 0, 0, 110, 0, 0, 10, 30, 0];
Item_Catalogue[295] = ["power ring", 2, 2E3, 18, 41, 8, 4294967295, 25, 0, 0, 15, 30, 0, 0, 20, 30, 60, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[296] = ["quick ring", 2, 2500, 18, 41, 8, 4288282521, 25, 3, 1, 4, 5, 1, 1, 5, 10, 60, 0, 13, 4289396650, 1, 80, 12, 40, 8, 0, 15, 50, 10, 0, 98, 1, 0, 0, 0, 0, 50, 0, 0, 10, 10, 0];
Item_Catalogue[297] = ["charge ring", 2, 3E3, 18, 41, 8, 4294936644, 25, 3, 0, 4, 5, 1, 1, 20, 30, 60, 0, 2, 4294919236, 1, 16, 16, 16, 16, 0, 200, 200, 25, 0, 100, 1, 0, 50, 1, 50, 200, 2, 0, 4, 6, 20, 0, 6, 4294927889, 2, 16, 16, 16, 16, 0, 0, 50, 10, 0, 86, 0, 0];
Item_Catalogue[298] = ["fire circle", 3, 4E3, 18, 42, 8, 4294919236, 25, 3, 0, 5, 6, 1, 1, 20, 30, 60, 0, 6, 4294927889, 2, 16, 24, 16, 16, 0, 0, 100, 10, 0, 100, 1, 0, 0, 1, 50, 120, 2, 0, 6, 8, 20, 0, 6, 2298439185, 2, 16, 16, 16, 16, 0, 0, 50, 10, 0, 86, 0, 0];
Item_Catalogue[299] = ["thunder circle", 3, 4500, 18, 42, 8, 4294967108, 25, 11, 0, 5, 6, 11, 15, 20, 30, 60, 1, 10, 4294967040, 1, 16, 16, 16, 16, 0, 10, 100, 10, 0, 90, 0, 2, 0, 3, 0, 120, 0, 0, 1, 59, 0];
Item_Catalogue[300] = ["long circle", 3, 5E3, 18, 42, 8, 4287120384, 25, 0, 0, 10, 15, 0, 0, 20, 30, 120, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[301] = ["ice circle", 3, 5500, 18, 42, 8, 4289374975, 25, 11, 0, 5, 6, 1, 1, 20, 30, 60, 0, 7, 4289374975, 2, 16, 16, 16, 16, 0, 100, 100, 10, 0, 100, 1, 0, 0, 2, 20, 120, 2, 0, 5, 10, 30, 1, 4, 2292886271, 2, 8, 24, 8, 8, 0, 10, 50, 10, 0, 86, 0, 0];
Item_Catalogue[302] = ["thorn circle", 4, 6E3, 18, 42, 8, 4291603080, 25, 9, 0, 6, 7, 16, 5, 20, 30, 60, 1, 9, 4291603080, 1, 16, 16, 16, 16, 0, 10, 100, 10, 0, 100, 0, 2, 0, 0, 0, 130, 0, 0, 20, 60, 0];
Item_Catalogue[303] = ["power circle", 4, 6500, 18, 42, 8, 4294967295, 25, 0, 0, 30, 60, 0, 0, 20, 30, 60, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[304] = ["quick circle", 4, 7E3, 18, 42, 8, 4288282521, 25, 9, 1, 6, 7, 3, 1, 5, 10, 60, 0, 13, 4289396650, 1, 24, 24, 16, 16, 0, 15, 50, 10, 0, 95, 1, 0, 0, 0, 0, 50, 0, 0, 10, 10, 0];
Item_Catalogue[305] = ["charge circle", 4, 7500, 18, 42, 8, 4294967108, 25, 3, 0, 6, 7, 1, 1, 20, 30, 60, 0, 6, 4284900966, 1, 32, 24, 16, 16, 0, 200, 200, 25, 0, 100, 1, 0, 50, 3, 50, 400, 2, 0, 1, 99, 20, 1, 10, 2298478336, 2, 16, 16, 16, 16, 0, 0, 100, 10, 80, 86, 0, 0];
Item_Catalogue[306] = ["fire chakram", 5, 8E3, 18, 43, 8, 4294919236, 25, 3, 0, 7, 8, 1, 5, 20, 30, 60, 0, 6, 4294927889, 2, 16, 24, 16, 16, 0, 0, 180, 10, 2, 100, 0, 2, 0, 1, 50, 150, 2, 0, 12, 16, 20, 0, 6, 2298439185, 2, 16, 16, 16, 16, 0, 0, 50, 10, 0, 86, 0, 0];
Item_Catalogue[319] = ["thunder chakram", 5, 8500, 18, 43, 8, 4294967108, 25, 11, 0, 7, 8, 15, 20, 20, 30, 60, 1, 10, 2298478336, 1, 16, 16, 16, 16, 0, 10, 100, 10, 0, 95, 0, 2, 0, 3, 0, 150, 0, 0, 1, 149, 0];
Item_Catalogue[335] = ["long chakram", 5, 9E3, 18, 43, 8, 4287120384, 25, 0, 0, 20, 30, 0, 0, 20, 30, 150, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[352] = ["ice chakram", 5, 9500, 18, 43, 8, 4289374975, 20, 9, 0, 7, 8, 3, 1, 20, 30, 60, 1, 4, 4289374975, 2, 16, 24, 16, 16, 0, 25, 50, 10, 0, 90, 0, 1, 0, 2, 20, 40, 0, 0, 30, 45, 0];
Item_Catalogue[367] = ["thorn chakram", 6, 1E4, 18, 43, 8, 4291603080, 25, 9, 0, 8, 9, 16, 5, 20, 30, 60, 1, 9, 4291603080, 1, 16, 16, 16, 16, 0, 10, 150, 10, 0, 90, 0, 2, 0, 0, 0, 150, 0, 0, 30, 90, 0];
Item_Catalogue[401] = ["power chakram", 6, 11E3, 18, 43, 8, 4294967295, 20, 0, 0, 60, 120, 0, 0, 20, 30, 60, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[417] = ["quick chakram", 6, 12E3, 18, 43, 8, 4288282521, 25, 9, 1, 8, 9, 3, 1, 5, 10, 60, 1, 9, 4289396650, 2, 16, 16, 16, 16, 0, 15, 50, 10, 0, 95, 1, 0, 0, 0, 0, 50, 0, 0, 33, 33, 0];
Item_Catalogue[436] = ["charge chakram", 6, 13E3, 18, 43, 8, 4288269567, 25, 11, 0, 8, 9, 1, 1, 20, 30, 60, 0, 7, 4288269567, 2, 16, 16, 16, 16, 0, 200, 200, 25, 0, 100, 0, 2, 0, 2, 20, 600, 2, 0, 40, 60, 50, 1, 4, 2292886271, 2, 8, 16, 8, 8, 0, 5, 100, 10, 0, 104, 0, 0];
Item_Catalogue[458] = ["fire god", 7, 15E3, 18, 44, 8, 4294919236, 25, 109, 0, 9, 10, 20, 1, 20, 30, 60, 1, 22, 1728013841, 2, 16, 16, 16, 16, 0, 0, 100, 15, 0, 98, 1, 0, 0, 1, 50, 200, 0, 0, 36, 48, 0];
Item_Catalogue[478] = ["thunder god", 7, 16E3, 18, 44, 8, 4294967108, 25, 11, 0, 9, 10, 20, 20, 20, 30, 60, 1, 10, 2298478336, 1, 16, 16, 16, 16, 0, 5, 100, 10, 0, 98, 0, 2, 0, 3, 0, 180, 0, 0, 1, 399, 0];
Item_Catalogue[486] = ["long god", 7, 17E3, 18, 44, 8, 4287120384, 10, 0, 0, 40, 60, 0, 0, 20, 30, 180, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[503] = ["ice god", 7, 18E3, 18, 44, 8, 4289374975, 25, 11, 0, 9, 10, 1, 1, 20, 30, 60, 0, 7, 4289374975, 2, 16, 16, 16, 16, 0, 100, 100, 10, 0, 100, 1, 0, 0, 2, 30, 120, 2, 0, 30, 45, 30, 1, 9, 2292886271, 2, 16, 16, 8, 8, 0, 10, 50, 10, 0, 86, 0, 0];
Item_Catalogue[511] = ["thorn god", 8, 19E3, 18, 44, 8, 4291603080, 25, 9, 0, 10, 11, 32, 5, 20, 30, 60, 1, 9, 4291603080, 1, 16, 16, 16, 16, 0, 10, 100, 10, 0, 100, 0, 2, 0, 0, 0, 160, 0, 0, 40, 120, 0];
Item_Catalogue[270] = ["charge punch", 5, 8500, 3, 2, 1, 4284914175, 1, 109, 0, 9, 18, 5, 2, 15, 30, 15, 1, 9, 2282841855, 2, 32, 60, 32, 32, 0, 0, 200, 10, 0, 90, 1, 0, 0, 1, 50, 300, 0, 0, 8, 12, 0];
Item_Catalogue[271] = ["wooden sword", 5, 8500, 4, 22, 2, 4287120384, 1, 0, 0, 1, 1, 0, 0, 20, 30, 50, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[272] = ["pyramid arrow", 5, 8500, 5, 4, 3, 4284874803, 1, 4, 0, 9, 15, 1, 80, 30, 40, 90, 1, 3, 4284874803, 1, 16, 16, 8, 8, 0, 5, 500, 10, 8, 100, 0, 0, 0, 4, 66, 35, 2, 0, 3, 3, 30, 0, 6, 4284874854, 2, 16, 16, 16, 16, 0, 0, 66, 10, 0, 86, 0, 0];
Item_Catalogue[273] = ["atomic ray", 5, 8500, 6, 25, 4, 4294927889, 1, 3, 0, 10, 20, 1, 20, 80, 90, 90, 1, 18, 4294927889, 2, 12, 20, 16, 16, 0, 0, 500, 10, 0, 100, 0, 2, 0, 1, 80, 0, 0];
Item_Catalogue[274] = ["high light staff", 3, 8500, 12, 34, 5, 4294967295, 1, 6, 0, 10, 15, 1, 0, 80, 90, 140, 0, 13, 2298478591, 2, 16, 16, 8, 8, 0, 100, 200, 40, 0, 100, 1, 0, 50, 3, 0, 0, 0];
Item_Catalogue[275] = ["missile", 5, 8500, 14, 32, 6, 4294967295, 1, 4, 1, 300, 500, 1, 80, 160, 180, 80, 1, 17, 4294967295, 1, 16, 32, 16, 16, 0, 5, 100, 10, 10, 100, 0, 0, 0, 0, 0, 100, 2, 0, 0, 0, 50, 1, 6, 2288412262, 1, 16, 16, 16, 16, 10, 25, 25, 20, 0, 80, 0, 0];
Item_Catalogue[276] = ["freeze whip", 5, 8500, 15, 35, 7, 4291611903, 1, 105, 0, 5, 18, 1, 5, 15, 20, 40, 1, 8, 2295123199, 2, 8, 8, 8, 8, 50, 0, 100, 10, 0, 100, 0, 0, 0, 5, 5, 60, 0, 0, 3, 5, 0];
Item_Catalogue[307] = ["chakram", 5, 8500, 18, 43, 8, 4282664004, 5, 0, 0, 1, 1, 0, 0, 20, 30, 30, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[402] = ["Indra arrow", 6, 2E4, 5, 4, 3, 4294967040, 1, 4, 0, 1, 3333, 1, 120, 60, 80, 90, 1, 3, 4294967040, 1, 16, 16, 8, 8, 0, 0, 500, 10, 8, 100, 0, 0, 0, 3, 0, 0, 0];
Item_Catalogue[403] = ["Napalm bomb", 6, 2E4, 14, 32, 6, 4294914833, 1, 4, 0, 0, 0, 1, 120, 160, 180, 80, 1, 17, 4294914833, 1, 32, 32, 8, 8, 0, 200, 200, 10, 5, 100, 0, 0, 0, 1, 50, 200, 8, 1, 8, 8, 30, 1, 6, 2298426129, 2, 32, 32, 24, 24, 10, 0, 150, 30, 0, 95, 0, 2];
Item_Catalogue[512] = ["needle cestus", 8, 2E4, 3, 20, 1, 4291603080, 1, 303, 0, 12, 24, 60, 20, 15, 36, 15, 1, 9, 4291603080, 1, 4, 8, 8, 8, 15, 5, 10, 10, 0, 90, 0, 2, 0, 0, 0, 100, 0, 0, 13, 15, 0];
Item_Catalogue[513] = ["lightsaber", 8, 2E4, 4, 23, 2, 4294927974, 2, 7, 0, 30, 35, 1, 1, 20, 30, 30, 1, 18, 2298430532, 2, 16, 32, 16, 16, 0, 0, 10, 10, 0, 100, 0, 0, 0, 3, 0, 130, 0, 0, 1, 150, 130];
Item_Catalogue[514] = ["vigintuple arrow", 8, 2E4, 5, 17, 3, 4294956800, 1, 1604, 0, 48, 72, 20, 80, 45, 60, 90, 1, 3, 4294956800, 1, 16, 16, 8, 8, 0, 0, 300, 10, 8, 100, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[515] = ["ice missile", 8, 2E4, 6, 26, 4, 4287138047, 1, 3, 0, 0, 0, 3, 30, 120, 135, 90, 1, 17, 4287138047, 2, 16, 16, 16, 16, 0, 100, 100, 10, 0, 100, 0, 0, 0, 2, 30, 0, 2, 0, 10, 15, 90, 1, 6, 4287138047, 2, 12, 12, 8, 8, 0, 4, 5, 20, 0, 90, 0, 0];
Item_Catalogue[516] = ["freeze exp rod", 8, 2E4, 12, 60, 5, 4291611903, 1, 6, 1, 5, 15, 1, 0, 80, 90, 70, 0, 21, 4291611903, 2, 16, 16, 16, 16, 0, 0, 100, 40, 0, 100, 0, 0, 0, 5, 10, 0, 0];
Item_Catalogue[517] = ["slow laser gun", 8, 2E4, 14, 31, 6, 4291559424, 1, 3, 1, 32, 48, 1, 10, 20, 30, 50, 1, 18, 4291559424, 1, 8, 12, 8, 8, 0, 0, 200, 10, 0, 100, 1, 0, 0, 1, 100, 55, 0];
Item_Catalogue[518] = ["thorn ms", 8, 2E4, 15, 38, 7, 4291603080, 1, 103, 0, 8, 30, 90, 20, 15, 20, 40, 1, 9, 4291603080, 1, 8, 8, 8, 8, 0, 0, 100, 10, 0, 100, 1, 0, 0, 0, 0, 160, 0, 0, 18, 22, 0];
Item_Catalogue[519] = ["power god", 8, 2E4, 18, 44, 8, 4294967295, 10, 0, 0, 180, 360, 0, 0, 20, 30, 60, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[520] = ["spark cestus", 8, 21E3, 3, 20, 1, 4294967176, 1, 109, 0, 12, 24, 12, 5, 15, 36, 15, 1, 15, 4294967244, 2, 8, 8, 8, 8, 8, 20, 120, 10, 1, 90, 0, 2, 50, 3, 0, 120, 0, 0, 1, 199, 0];
Item_Catalogue[521] = ["flame GS", 8, 21E3, 4, 23, 2, 4294919236, 1, 7, 1, 30, 35, 1, 50, 20, 30, 30, 1, 22, 2298439185, 2, 10, 20, 16, 16, 0, 0, 120, 10, 0, 90, 1, 0, 50, 1, 50, 130, 0, 0, 9, 12, 130];
Item_Catalogue[522] = ["oct poison shot", 8, 21E3, 5, 14, 3, 4288269312, 1, 3, 0, 8, 12, 8, 15, 30, 40, 90, 1, 3, 4288269312, 1, 16, 16, 4, 4, 0, 0, 300, 10, 0, 100, 0, 0, 0, 4, 50, 50, 1, 0, 4, 4, 1, 0, 6, 2291780608, 1, 24, 24, 8, 8, 0, 0, 100, 10, 0, 100, 1, 0];
Item_Catalogue[523] = ["pyroclastic flow", 8, 21E3, 6, 26, 4, 4294919168, 1, 4, 0, 2, 6, 1, 50, 120, 135, 90, 1, 12, 4294919168, 2, 16, 16, 8, 8, 0, 0, 200, 10, 5, 100, 0, 0, 0, 1, 50, 0, 2, 1, 9, 12, 50, 0, 5, 1157588497, 2, 16, 32, 16, 32, 0, 0, 150, 10, 5, 90, 0, 1];
Item_Catalogue[524] = ["giga exp rod", 8, 21E3, 12, 60, 5, 4294936576, 1, 6, 1, 10, 15, 1, 0, 80, 90, 70, 0, 2, 2298447906, 2, 48, 48, 48, 48, 0, 0, 100, 40, 0, 100, 0, 0, 0, 1, 0, 0, 0];
Item_Catalogue[525] = ["rocket launcher", 8, 21E3, 14, 32, 6, 4282663936, 1, 3, 0, 160, 240, 1, 30, 80, 90, 60, 1, 17, 4284900864, 1, 32, 32, 16, 16, 0, 0, 50, 10, 5, 100, 0, 0, 0, 0, 0, 80, 3, 0, 200, 300, 6, 1, 24, 4284892194, 2, 16, 64, 24, 24, 5, 5, 25, 20, 0, 90, 1, 0];
Item_Catalogue[526] = ["poison ms", 8, 21E3, 15, 38, 7, 4287103231, 1, 9, 1, 8, 31, 5, 1, 15, 20, 40, 0, 6, 2290614527, 1, 24, 24, 8, 8, 0, 20, 300, 20, 0, 99, 0, 1, 0, 4, 250, 300, 0, 0, 9, 9, 0];
Item_Catalogue[527] = ["quick god", 8, 21E3, 18, 44, 8, 4288282521, 10, 9, 1, 10, 11, 5, 1, 5, 10, 60, 1, 20, 4289396650, 2, 16, 16, 16, 16, 0, 15, 50, 10, 0, 95, 1, 0, 0, 0, 0, 50, 0, 0, 55, 55, 0];
Item_Catalogue[549] = ["sonic cestus", 8, 22E3, 3, 20, 1, 4294967295, 1, 5703, 1, 80, 120, 9, 10, 5, 8, 15, 1, 22, 1157627903, 2, 16, 8, 0, 0, 0, 10, 10, 5, 0, 90, 1, 0, 0, 0, 0, -1, 0];
Item_Catalogue[550] = ["frozen GS", 8, 22E3, 4, 23, 2, 4288269567, 1, 3, 1, 30, 35, 1, 20, 20, 30, 30, 1, 4, 3432631551, 2, 16, 64, 48, 48, 0, 5, 10, 40, 0, 100, 0, 0, 0, 5, 5, 130, 0, 0, 40, 60, 9];
Item_Catalogue[551] = ["hell fire shot", 8, 22E3, 5, 14, 3, 4294919236, 1, 3, 0, 16, 24, 3, 7, 30, 40, 90, 1, 3, 4294919236, 1, 16, 16, 8, 8, 0, 0, 300, 10, 0, 100, 0, 0, 0, 1, 50, 55, 5, 1, 24, 32, 3, 1, 22, 4294927889, 2, 16, 16, 16, 16, 50, 0, 100, 10, 0, 100, 1, 0];
Item_Catalogue[552] = ["thunderbolt", 8, 22E3, 6, 26, 4, 4294967091, 2, 3, 0, 0, 0, 1, 30, 120, 135, 90, 0, 2, 4294967142, 2, 16, 16, 4, 4, 0, 0, 200, 10, 0, 100, 0, 0, 0, 3, 0, 0, 1, 1, 1, 999, 1, 0, 18, 4294967142, 2, 64, 512, 64, 512, 0, 20, 50, 10, 0, 100, 0, 0];
Item_Catalogue[553] = ["power rod", 8, 22E3, 12, 60, 5, 4288217088, 1, 6, 0, 100, 100, 1, 0, 80, 90, 30, 0, 21, 4288217088, 2, 24, 24, 24, 24, 0, 0, 100, 40, 0, 100, 0, 0, 0, 0, 0, 0, 0];
Item_Catalogue[554] = ["homing laser wave", 8, 22E3, 14, 33, 6, 4294967193, 1, 803, 0, 20, 30, 9, 30, 20, 30, 70, 1, 11, 4294967193, 1, 16, 16, 8, 8, 0, 0, 200, 10, 0, 100, 1, 0, 200, 3, 0, 55, 0];
Item_Catalogue[555] = ["explosion ms", 8, 22E3, 15, 38, 7, 4294927906, 1, 9, 1, 8, 32, 3, 5, 15, 20, 40, 1, 19, 2298430498, 2, 8, 40, 16, 16, 10, 10, 15, 3, 0, 80, 1, 0, 0, 1, 0, 500, 0, 0, 360, 480, 0];
Item_Catalogue[556] = ["charge god", 8, 22E3, 18, 44, 8, 4282664004, 25, 3, 0, 10, 11, 1, 1, 20, 30, 60, 0, 6, 4284892194, 1, 16, 16, 16, 16, 0, 200, 200, 25, 0, 100, 1, 0, 50, 0, 0, 800, 2, 1, 40, 60, 50, 1, 24, 4284892194, 2, 16, 64, 24, 24, 0, 5, 25, 20, 0, 90, 0, 0];
Item_Catalogue[19] = ["White Stone", 1, 400, 7, 6, 9, 4294967295, 1, 50, 0, "LP +50", ""];
Item_Catalogue[20] = ["Red Stone", 1, 400, 7, 6, 9, 4294914867, 2, 5, 0, "str +5", ""];
Item_Catalogue[21] = ["Green Stone", 1, 400, 7, 6, 9, 4281597747, 3, 5, 0, "dex +5", ""];
Item_Catalogue[22] = ["Blue Stone", 1, 400, 7, 6, 9, 4281545727, 4, 5, 0, "mag +5", ""];
Item_Catalogue[23] = ["Black Stone", 1, 400, 7, 6, 9, 4284900966, 5, 2, 0, "str dex mag +2", ""];
Item_Catalogue[24] = ["Red Crystal", 1, 1200, 8, 7, 9, 4294936712, 6, 1, 3, "AT +(1-3)", ""];
Item_Catalogue[25] = ["Yellow Crystal", 1, 1200, 8, 7, 9, 4294967176, 7, 20, 0, "AT +20%", ""];
Item_Catalogue[26] = ["Silver Crystal", 1, 1200, 8, 7, 9, 4291611852, 8, 1, 0, "Defense +1", ""];
Item_Catalogue[27] = ["Purple Crystal", 1, 1200, 8, 7, 9, 4291598847, 9, 10, 0, "Magic Defense 10%", ""];
Item_Catalogue[28] = ["Black Crystal", 1, 1200, 8, 7, 9, 4284900966, 10, 10, 0, "Block rate 10%", ""];
Item_Catalogue[29] = ["Vampire's Card", 1, 4E3, 10, 9, 9, 4288217088, 11, 3, 0, "3% LP recovery", "per damage"];
Item_Catalogue[30] = ["ONIGIRI's Card", 1, 8E3, 10, 9, 9, 4294967295, 12, 5, 0, "5% chance of", "ONIGIRI drop per hit"];
Item_Catalogue[31] = ["Ruby", 1, 2E3, 9, 8, 9, 4294901760, 13, 1, 2, "Add 1-2 fire", "damage"];
Item_Catalogue[32] = ["Garnet", 1, 2E3, 9, 8, 9, 4294914867, 14, 20, 0, "+0.4s Fire Length", ""];
Item_Catalogue[33] = ["Sapphire", 1, 2E3, 9, 8, 9, 4284914175, 15, 3, 5, "Add 3-5 ice", "damage"];
Item_Catalogue[34] = ["Aquamarine", 1, 2E3, 9, 8, 9, 4284927231, 16, 5, 0, "+5% Cold effect", ""];
Item_Catalogue[35] = ["Topaz", 1, 2E3, 9, 8, 9, 4294954035, 17, 0, 4, "Add 0-4 thunder", "damage"];
Item_Catalogue[36] = ["Emerald", 1, 2E3, 9, 8, 9, 4281597747, 18, 0, 1, "Add 0-1 poison", "damage"];
Item_Catalogue[37] = ["Peridot", 1, 2E3, 9, 8, 9, 4288282419, 19, 50, 0, "+1s Poison Length", ""];
Item_Catalogue[38] = ["Diamond", 1, 4E3, 9, 8, 9, 4294967295, 20, 5, 0, "+0.1s Freeze Length", ""];
Item_Catalogue[39] = ["Quick's Card", 1, 4E3, 10, 46, 9, 4287124736, 21, 10, 0, "-10% Limit AGI", ""];
Item_Catalogue[40] = ["Long Sword's Card", 1, 4E3, 10, 47, 9, 4281545523, 22, 5, 0, "+5 Length of sword", ""];
Item_Catalogue[41] = ["Catapult's Card", 1, 4E3, 10, 48, 9, 4284887808, 23, 20, 0, "+20 Length", ""];
Item_Catalogue[42] = ["Pierce's Card", 1, 4E3, 10, 49, 9, 4291611903, 24, 25, 0, "25% chance of", "penetrate"];
Item_Catalogue[43] = ["Guide's Card", 1, 4E3, 10, 50, 9, 4288282521, 25, 10, 0, "+10 guide length", ""];
Item_Catalogue[44] = ["Bullet's Card", 1, 4E3, 10, 51, 9, 4281545523, 26, 1, 0, "+1 bullet", ""];
Item_Catalogue[45] = ["Explosion's Card", 1, 4E3, 10, 52, 9, 4294940928, 27, 25, 0, "25% chance of", "Explosion damage"];
Item_Catalogue[47] = ["Critical's Card", 1, 4E3, 10, 53, 9, 4294967142, 29, 25, 100, "25% chance of", "AT +100%"];
Item_Catalogue[46] = ["Berserk Card", 1, 4E3, 10, 54, 9, 4291559424, 28, 50, 50, "AT +50%", "DF -50%"];
Item_Catalogue[341] = ["Big Card", 1, 4E3, 10, 55, 9, 4293848814, 42, 50, 0, "50% Attack range", ""];
Item_Catalogue[51] = ["Bronze Medal", 1, 2E3, 11, 10, 9, 4292708369, 33, 10, 0, "+10% Drop rate", ""];
Item_Catalogue[52] = ["Silver Medal", 1, 2E3, 11, 10, 9, 4291611852, 34, 10, 0, "+10% ONIGIRI Drop", ""];
Item_Catalogue[53] = ["Gold Medal", 1, 2E3, 11, 10, 9, 4294958336, 35, 10, 0, "+10% Gold UP", ""];
Item_Catalogue[48] = ["Iron Medal", 1, 2E3, 11, 10, 9, 4284900966, 36, 10, 0, "+10% EXP UP", ""];
Item_Catalogue[243] = ["Ice Charm", 1, 2E3, 16, 39, 9, 4284927231, 38, 50, 0, "50% Ice invalid", ""];
Item_Catalogue[244] = ["Poison Charm", 1, 2E3, 16, 39, 9, 4288282419, 39, 50, 0, "50% Poison invalid", ""];
Item_Catalogue[245] = ["Freeze Charm", 1, 2E3, 16, 39, 9, 4294967295, 40, 50, 0, "50% Freeze invalid", ""];
Item_Catalogue[50] = ["", 0, 4E3, 10, 9, 9, 4294967295, 0, 0, 0, "", ""];
Item_Catalogue[84] = ["White Stone", 2, 800, 7, 6, 9, 4294967295, 1, 100, 0, "LP +100", ""];
Item_Catalogue[85] = ["Red Stone", 2, 800, 7, 6, 9, 4294914867, 2, 10, 0, "str +10", ""];
Item_Catalogue[86] = ["Green Stone", 2, 800, 7, 6, 9, 4281597747, 3, 10, 0, "dex +10", ""];
Item_Catalogue[87] = ["Blue Stone", 2, 800, 7, 6, 9, 4281545727, 4, 10, 0, "mag +10", ""];
Item_Catalogue[88] = ["Black Stone", 2, 800, 7, 6, 9, 4284900966, 5, 4, 0, "str dex mag +4", ""];
Item_Catalogue[89] = ["Red Crystal", 2, 2400, 8, 7, 9, 4294936712, 6, 2, 6, "AT +(2-6)", ""];
Item_Catalogue[90] = ["Yellow Crystal", 2, 2400, 8, 7, 9, 4294967176, 7, 30, 0, "AT +30%", ""];
Item_Catalogue[91] = ["Silver Crystal", 2, 2400, 8, 7, 9, 4291611852, 8, 3, 0, "Defense +3", ""];
Item_Catalogue[92] = ["Purple Crystal", 2, 2400, 8, 7, 9, 4291598847, 9, 20, 0, "Magic Defense 20%", ""];
Item_Catalogue[93] = ["Black Crystal", 2, 2400, 8, 7, 9, 4284900966, 10, 20, 0, "Block rate 20%", ""];
Item_Catalogue[94] = ["Vampire's Card", 3, 8E3, 10, 9, 9, 4288217088, 11, 4, 0, "4% LP recovery", "per damage"];
Item_Catalogue[95] = ["Gold rush Card", 1, 16E3, 10, 9, 9, 4294967040, 37, 5, 0, "5% chance of", "GOLD drop per hit"];
Item_Catalogue[96] = ["Ruby", 2, 4E3, 9, 8, 9, 4294901760, 13, 3, 4, "Add 3-4 fire", "damage"];
Item_Catalogue[97] = ["Garnet", 2, 4E3, 9, 8, 9, 4294914867, 14, 30, 0, "+0.6s Fire Length", ""];
Item_Catalogue[98] = ["Sapphire", 2, 4E3, 9, 8, 9, 4284914175, 15, 6, 10, "Add 6-10 ice", "damage"];
Item_Catalogue[99] = ["Aquamarine", 2, 4E3, 9, 8, 9, 4284927231, 16, 10, 0, "+10% Cold effect", ""];
Item_Catalogue[100] = ["Topaz", 2, 4E3, 9, 8, 9, 4294954035, 17, 0, 9, "Add 0-9 thunder", "damage"];
Item_Catalogue[101] = ["Emerald", 2, 4E3, 9, 8, 9, 4281597747, 18, 1, 1, "Add 1-1 poison", "damage"];
Item_Catalogue[102] = ["Peridot", 2, 4E3, 9, 8, 9, 4288282419, 19, 100, 0, "+2s Poison Length", ""];
Item_Catalogue[103] = ["Diamond", 2, 4E3, 9, 8, 9, 4294967295, 20, 10, 0, "+0.2s Freeze Length", ""];
Item_Catalogue[104] = ["Quick's Card", 2, 8E3, 10, 46, 9, 4287124736, 21, 20, 0, "-20% Limit AGI", ""];
Item_Catalogue[105] = ["Long Sword's Card", 2, 8E3, 10, 47, 9, 4281545523, 22, 8, 0, "+8 Length of sword", ""];
Item_Catalogue[106] = ["Catapult's Card", 2, 8E3, 10, 48, 9, 4284887808, 23, 40, 0, "+40 Length", ""];
Item_Catalogue[107] = ["Pierce's Card", 2, 8E3, 10, 49, 9, 4291611903, 24, 50, 0, "50% chance of", "penetrate"];
Item_Catalogue[108] = ["Guide's Card", 2, 8E3, 10, 50, 9, 4288282521, 25, 20, 0, "+20 guide length", ""];
Item_Catalogue[109] = ["Bullet's Card", 2, 8E3, 10, 51, 9, 4281545523, 26, 2, 0, "+2 bullet", ""];
Item_Catalogue[110] = ["Explosion's Card", 2, 8E3, 10, 52, 9, 4294940928, 27, 50, 0, "50% chance of", "Explosion damage"];
Item_Catalogue[111] = ["Critical's Card", 2, 8E3, 10, 53, 9, 4294967142, 29, 25, 150, "25% chance of", "AT +150%"];
Item_Catalogue[130] = ["Berserk Card", 2, 8E3, 10, 54, 9, 4291559424, 28, 100, 100, "AT +100%", "DF -100%"];
Item_Catalogue[342] = ["Big Card", 2, 8E3, 10, 55, 9, 4293848814, 42, 100, 0, "100% Attack range", ""];
Item_Catalogue[112] = ["Bronze Medal", 2, 4E3, 11, 10, 9, 4292708369, 33, 20, 0, "+20% Drop rate", ""];
Item_Catalogue[113] = ["Silver Medal", 2, 4E3, 11, 10, 9, 4291611852, 34, 20, 0, "+20% ONIGIRI Drop", ""];
Item_Catalogue[114] = ["Gold Medal", 2, 4E3, 11, 10, 9, 4294958336, 35, 20, 0, "+20% Gold UP", ""];
Item_Catalogue[49] = ["Iron Medal", 2, 4E3, 11, 10, 9, 4284900966, 36, 20, 0, "+20% EXP UP", ""];
Item_Catalogue[246] = ["Ice Charm", 2, 4E3, 16, 39, 9, 4284927231, 38, 80, 0, "80% Ice invalid", ""];
Item_Catalogue[247] = ["Poison Charm", 2, 4E3, 16, 39, 9, 4288282419, 39, 80, 0, "80% Poison invalid", ""];
Item_Catalogue[248] = ["Freeze Charm", 2, 4E3, 16, 39, 9, 4294967295, 40, 80, 0, "80% Freeze invalid", ""];
Item_Catalogue[143] = ["White Stone", 3, 1200, 7, 6, 9, 4294967295, 1, 150, 0, "LP +150", ""];
Item_Catalogue[144] = ["Red Stone", 3, 1200, 7, 6, 9, 4294914867, 2, 15, 0, "str +15", ""];
Item_Catalogue[145] = ["Green Stone", 3, 1200, 7, 6, 9, 4281597747, 3, 15, 0, "dex +15", ""];
Item_Catalogue[146] = ["Blue Stone", 3, 1200, 7, 6, 9, 4281545727, 4, 15, 0, "mag +15", ""];
Item_Catalogue[147] = ["Black Stone", 3, 1200, 7, 6, 9, 4284900966, 5, 6, 0, "str dex mag +6", ""];
Item_Catalogue[148] = ["Red Crystal", 3, 3600, 8, 7, 9, 4294936712, 6, 3, 9, "AT +(3-9)", ""];
Item_Catalogue[149] = ["Yellow Crystal", 3, 3600, 8, 7, 9, 4294967176, 7, 40, 0, "AT +40%", ""];
Item_Catalogue[150] = ["Silver Crystal", 3, 3600, 8, 7, 9, 4291611852, 8, 6, 0, "Defense +6", ""];
Item_Catalogue[151] = ["Purple Crystal", 3, 3600, 8, 7, 9, 4291598847, 9, 30, 0, "Magic Defense 30%", ""];
Item_Catalogue[152] = ["Black Crystal", 3, 3600, 8, 7, 9, 4284900966, 10, 30, 0, "Block rate 30%", ""];
Item_Catalogue[159] = ["Vampire's Card", 4, 12E3, 10, 9, 9, 4288217088, 11, 5, 0, "5% LP recovery", "per damage"];
Item_Catalogue[160] = ["Zombie's Card", 4, 24E3, 10, 9, 9, 4281532518, 32, 50, 100, "LP +50% ", "-100% Fire damage"];
Item_Catalogue[161] = ["Ruby", 3, 6E3, 9, 8, 9, 4294901760, 13, 5, 6, "Add 5-6 fire", "damage"];
Item_Catalogue[162] = ["Garnet", 3, 6E3, 9, 8, 9, 4294914867, 14, 40, 0, "+0.8s Fire Length", ""];
Item_Catalogue[163] = ["Sapphire", 3, 6E3, 9, 8, 9, 4284914175, 15, 9, 15, "Add 9-15 ice", "damage"];
Item_Catalogue[164] = ["Aquamarine", 3, 6E3, 9, 8, 9, 4284927231, 16, 15, 0, "+15% Cold effect", ""];
Item_Catalogue[165] = ["Topaz", 3, 6E3, 9, 8, 9, 4294954035, 17, 0, 15, "Add 0-15 thunder", "damage"];
Item_Catalogue[166] = ["Emerald", 3, 6E3, 9, 8, 9, 4281597747, 18, 1, 2, "Add 1-2 poison", "damage"];
Item_Catalogue[167] = ["Peridot", 3, 6E3, 9, 8, 9, 4288282419, 19, 150, 0, "+3s Poison Length", ""];
Item_Catalogue[168] = ["Diamond", 3, 6E3, 9, 8, 9, 4294967295, 20, 15, 0, "+0.3s Freeze Length", ""];
Item_Catalogue[169] = ["Quick's Card", 3, 12E3, 10, 46, 9, 4287124736, 21, 30, 0, "-30% Limit AGI", ""];
Item_Catalogue[170] = ["Long Sword's Card", 3, 12E3, 10, 47, 9, 4281545523, 22, 10, 0, "+10 Length of sword", ""];
Item_Catalogue[171] = ["Catapult's Card", 3, 12E3, 10, 48, 9, 4284887808, 23, 60, 0, "+60 Length", ""];
Item_Catalogue[172] = ["Pierce's Card", 3, 12E3, 10, 49, 9, 4291611903, 24, 75, 0, "75% chance of", "penetrate"];
Item_Catalogue[173] = ["Guide's Card", 3, 12E3, 10, 50, 9, 4288282521, 25, 30, 0, "+30 guide length", ""];
Item_Catalogue[174] = ["Bullet's Card", 3, 12E3, 10, 51, 9, 4281545523, 26, 0, 75, "+75% bullet", ""];
Item_Catalogue[175] = ["Explosion's Card", 3, 12E3, 10, 52, 9, 4294940928, 27, 75, 0, "75% chance of", "Explosion damage"];
Item_Catalogue[176] = ["Critical's Card", 3, 12E3, 10, 53, 9, 4294967142, 29, 25, 200, "25% chance of", "AT +200%"];
Item_Catalogue[177] = ["Berserk Card", 3, 12E3, 10, 54, 9, 4291559424, 28, 150, 150, "AT +150%", "DF -150%"];
Item_Catalogue[343] = ["Big Card", 3, 12E3, 10, 55, 9, 4293848814, 42, 150, 0, "150% Attack range", ""];
Item_Catalogue[184] = ["Bronze Medal", 3, 6E3, 11, 10, 9, 4292708369, 33, 30, 0, "+30% Drop rate", ""];
Item_Catalogue[185] = ["Silver Medal", 3, 6E3, 11, 10, 9, 4291611852, 34, 30, 0, "+30% ONIGIRI Drop", ""];
Item_Catalogue[186] = ["Gold Medal", 3, 6E3, 11, 10, 9, 4294958336, 35, 30, 0, "+30% Gold UP", ""];
Item_Catalogue[187] = ["Iron Medal", 3, 6E3, 11, 10, 9, 4284900966, 36, 30, 0, "+30% EXP UP", ""];
Item_Catalogue[250] = ["Ice Charm", 3, 6E3, 16, 39, 9, 4284927231, 38, 90, 0, "90% Ice invalid", ""];
Item_Catalogue[251] = ["Poison Charm", 3, 6E3, 16, 39, 9, 4288282419, 39, 90, 0, "90% Poison invalid", ""];
Item_Catalogue[252] = ["Freeze Charm", 3, 6E3, 16, 39, 9, 4294967295, 40, 90, 0, "90% Freeze invalid", ""];
Item_Catalogue[209] = ["White Stone", 4, 1600, 7, 6, 9, 4294967295, 1, 200, 0, "LP +200", ""];
Item_Catalogue[210] = ["Red Stone", 4, 1600, 7, 6, 9, 4294914867, 2, 20, 0, "str +20", ""];
Item_Catalogue[211] = ["Green Stone", 4, 1600, 7, 6, 9, 4281597747, 3, 20, 0, "dex +20", ""];
Item_Catalogue[212] = ["Blue Stone", 4, 1600, 7, 6, 9, 4281545727, 4, 20, 0, "mag +20", ""];
Item_Catalogue[213] = ["Black Stone", 4, 1600, 7, 6, 9, 4284900966, 5, 8, 0, "str dex mag +8", ""];
Item_Catalogue[221] = ["Red Crystal", 4, 4800, 8, 7, 9, 4294936712, 6, 4, 12, "AT +(4-12)", ""];
Item_Catalogue[222] = ["Yellow Crystal", 4, 4800, 8, 7, 9, 4294967176, 7, 50, 0, "AT +50%", ""];
Item_Catalogue[223] = ["Silver Crystal", 4, 4800, 8, 7, 9, 4291611852, 8, 9, 0, "Defense +9", ""];
Item_Catalogue[224] = ["Purple Crystal", 4, 4800, 8, 7, 9, 4291598847, 9, 40, 0, "Magic Defense 40%", ""];
Item_Catalogue[225] = ["Black Crystal", 4, 4800, 8, 7, 9, 4284900966, 10, 40, 0, "Block rate 40%", ""];
Item_Catalogue[260] = ["Ruby", 4, 8E3, 9, 8, 9, 4294901760, 13, 6, 9, "Add 6-9 fire", "damage"];
Item_Catalogue[261] = ["Garnet", 4, 8E3, 9, 8, 9, 4294914867, 14, 55, 0, "+1.1s Fire Length", ""];
Item_Catalogue[262] = ["Sapphire", 4, 8E3, 9, 8, 9, 4284914175, 15, 12, 20, "Add 12-20 ice", "damage"];
Item_Catalogue[263] = ["Aquamarine", 4, 8E3, 9, 8, 9, 4284927231, 16, 20, 0, "+20% Cold effect", ""];
Item_Catalogue[264] = ["Topaz", 4, 8E3, 9, 8, 9, 4294954035, 17, 0, 22, "Add 0-22 thunder", "damage"];
Item_Catalogue[265] = ["Emerald", 4, 8E3, 9, 8, 9, 4281597747, 18, 2, 2, "Add 2-2 poison", "damage"];
Item_Catalogue[266] = ["Peridot", 4, 8E3, 9, 8, 9, 4288282419, 19, 200, 0, "+4s Poison Length", ""];
Item_Catalogue[267] = ["Diamond", 4, 8E3, 9, 8, 9, 4294967295, 20, 20, 0, "+0.4s Freeze Length", ""];
Item_Catalogue[237] = ["Quick's Card", 4, 16E3, 10, 46, 9, 4287124736, 21, 40, 0, "-40% Limit AGI", ""];
Item_Catalogue[242] = ["Long Sword's Card", 4, 16E3, 10, 47, 9, 4281545523, 22, 12, 0, "+12 Length of sword", ""];
Item_Catalogue[240] = ["Catapult's Card", 4, 16E3, 10, 48, 9, 4284887808, 23, 80, 0, "+80 Length", ""];
Item_Catalogue[268] = ["Pierce's Card", 4, 16E3, 10, 49, 9, 4291611903, 24, 100, 0, "100% chance of", "penetrate"];
Item_Catalogue[269] = ["Guide's Card", 4, 16E3, 10, 50, 9, 4288282521, 25, 40, 0, "+40 guide length", ""];
Item_Catalogue[238] = ["Bullet's Card", 4, 16E3, 10, 51, 9, 4281545523, 26, 0, 100, "+100% bullet", ""];
Item_Catalogue[249] = ["Explosion's Card", 4, 16E3, 10, 52, 9, 4294940928, 27, 100, 0, "100% chance of", "Explosion damage"];
Item_Catalogue[239] = ["Critical's Card", 4, 16E3, 10, 53, 9, 4294967142, 29, 25, 300, "25% chance of", "AT +300%"];
Item_Catalogue[241] = ["Berserk Card", 4, 16E3, 10, 54, 9, 4291559424, 28, 200, 200, "AT +200%", "DF -200%"];
Item_Catalogue[344] = ["Big Card", 4, 16E3, 10, 55, 9, 4293848814, 42, 200, 0, "200% Attack range", ""];
Item_Catalogue[233] = ["Bronze Medal", 4, 8E3, 11, 10, 9, 4292708369, 33, 40, 0, "+40% Drop rate", ""];
Item_Catalogue[234] = ["Silver Medal", 4, 8E3, 11, 10, 9, 4291611852, 34, 40, 0, "+40% ONIGIRI Drop", ""];
Item_Catalogue[235] = ["Gold Medal", 4, 8E3, 11, 10, 9, 4294958336, 35, 40, 0, "+40% Gold UP", ""];
Item_Catalogue[236] = ["Iron Medal", 4, 8E3, 11, 10, 9, 4284900966, 36, 40, 0, "+40% EXP UP", ""];
Item_Catalogue[320] = ["Ice Charm", 4, 8E3, 16, 39, 9, 4284927231, 38, 95, 0, "95% Ice invalid", ""];
Item_Catalogue[321] = ["Poison Charm", 4, 8E3, 16, 39, 9, 4288282419, 39, 95, 0, "95% Poison invalid", ""];
Item_Catalogue[322] = ["Freeze Charm", 4, 8E3, 16, 39, 9, 4294967295, 40, 95, 0, "95% Freeze invalid", ""];
Item_Catalogue[277] = ["Fire Spirit", 1, 4E3, 17, 40, 9, 4294919202, 41, 100, 278, "100% enemy dies", "Fire"];
Item_Catalogue[279] = ["Fire Spirit", 2, 8E3, 17, 40, 9, 4294919202, 41, 10, 280, "10% enemy dies", "Fire explosion"];
Item_Catalogue[281] = ["Fire Spirit", 3, 12E3, 17, 40, 9, 4294919202, 41, 10, 282, "10% enemy dies", "Flame"];
Item_Catalogue[283] = ["Fire Spirit", 4, 16E3, 17, 40, 9, 4294919202, 41, 10, 284, "10% enemy dies", "Atomic ray"];
Item_Catalogue[278] = ["Fire Spirit", 0, 0, 0, 0, 0, 0, 1, 109, 0, 5, 15, 3, 1, 0, 0, 0, 1, 6, 4294927889, 2, 16, 16, 16, 16, 0, 0, 100, 10, 0, 90, 1, 0, 0, 1, 50, 0, 0];
Item_Catalogue[280] = ["Fire Spirit", 0, 0, 0, 0, 0, 0, 1, 109, 0, 30, 50, 16, 2, 0, 0, 0, 1, 6, 4294927889, 2, 16, 16, 16, 16, 0, 0, 150, 30, 0, 95, 1, 0, 0, 1, 50, 0, 0];
Item_Catalogue[282] = ["Fire Spirit", 0, 0, 0, 0, 0, 0, 1, 204, 0, 30, 50, 16, 40, 0, 0, 0, 1, 6, 2298439185, 2, 16, 20, 12, 12, 50, 0, 100, 10, -1, 99, 1, 0, 0, 1, 50, 0, 0];
Item_Catalogue[284] = ["Fire Spirit", 0, 0, 0, 0, 0, 0, 1, 109, 0, 60, 100, 4, 2, 0, 0, 0, 1, 18, 4294927889, 2, 12, 20, 16, 16, 0, 0, 1E3, 10, 0, 100, 0, 2, 0, 1, 80, 0, 0];
Item_Catalogue[285] = ["Thunder Spirit", 1, 4E3, 17, 40, 9, 4293848576, 41, 50, 286, "50% enemy dies", "Thunder"];
Item_Catalogue[287] = ["Thunder Spirit", 2, 8E3, 17, 40, 9, 4293848576, 41, 10, 288, "10% enemy dies", "Lightning"];
Item_Catalogue[308] = ["Thunder Spirit", 3, 12E3, 17, 40, 9, 4293848576, 41, 10, 309, "10% enemy dies", "Big Thunder"];
Item_Catalogue[310] = ["Thunder Spirit", 4, 16E3, 17, 40, 9, 4293848576, 41, 5, 311, "5% enemy dies", "Thunder Ball"];
Item_Catalogue[286] = ["Thunder Spirit", 0, 0, 0, 0, 0, 0, 1, 105, 0, 1, 99, 1, 5, 0, 0, 0, 1, 10, 4294967142, 2, 16, 16, 16, 16, 0, 0, 200, 10, 0, 100, 0, 0, 0, 3, 0, 0, 0];
Item_Catalogue[288] = ["Thunder Spirit", 0, 0, 0, 0, 0, 0, 1, 2, 0, 1, 99, 10, 20, 0, 0, 0, 1, 10, 2291767807, 2, 12, 16, 8, 8, 10, 0, 500, 10, 0, 100, 0, 0, 0, 3, 0, 0, 0];
Item_Catalogue[309] = ["Thunder Spirit", 0, 0, 0, 0, 0, 0, 1, 108, 1, 1, 333, 1, 0, 0, 0, 0, 1, 10, 4294967142, 2, 64, 64, 64, 64, 0, 25, 26, 10, 50, 100, 0, 1, 0, 3, 0, 0, 0];
Item_Catalogue[311] = ["Thunder Spirit", 0, 0, 0, 0, 0, 0, 1, 105, 0, 1, 9999, 1, 4, 0, 0, 0, 1, 2, 4294967142, 2, 16, 16, 16, 16, 0, 0, 200, 10, 0, 100, 0, 0, 0, 3, 0, 0, 2, 0, 1, 9, 30, 0, 15, 4294967142, 1, 16, 16, 8, 8, 0, 0, 50, 10, 0, 0, 0, 0];
Item_Catalogue[377] = ["Ice Spirit", 1, 4E3, 17, 40, 9, 4284927231, 41, 50, 378, "50% enemy dies", "Freeze arrow"];
Item_Catalogue[379] = ["Ice Spirit", 2, 8E3, 17, 40, 9, 4284927231, 41, 20, 380, "20% enemy dies", "Ice mist"];
Item_Catalogue[381] = ["Ice Spirit", 3, 12E3, 17, 40, 9, 4284927231, 41, 20, 382, "20% enemy dies", "Freeze spike"];
Item_Catalogue[383] = ["Ice Spirit", 4, 2E4, 17, 40, 9, 4284927231, 41, 40, 384, "40% enemy dies", "Ice meteor"];
Item_Catalogue[378] = ["Ice Spirit", 0, 0, 0, 0, 0, 0, 1, 109, 0, 25, 50, 4, 1, 0, 0, 0, 1, 3, 4291611903, 2, 16, 16, 8, 8, 0, 25, 2E3, 10, 0, 100, 0, 2, 0, 5, 50, 0, 0];
Item_Catalogue[380] = ["Ice Spirit", 0, 0, 0, 0, 0, 0, 1, 2404, 1, 5, 5, 9, 50, 0, 0, 0, 0, 6, 1154272511, 2, 32, 32, 48, 48, 0, 50, 51, 10, 2, 95, 0, 1, 0, 2, 40, 0, 0];
Item_Catalogue[382] = ["Ice Spirit", 0, 0, 0, 0, 0, 0, 1, 4, 0, 5, 5, 25, 100, 0, 0, 0, 1, 9, 3435973887, 2, 12, 12, 6, 6, 0, 25, 200, 10, 5, 100, 0, 0, 0, 5, 20, 0, 0];
Item_Catalogue[384] = ["Ice Spirit", 0, 0, 0, 0, 0, 0, 1, 105, 0, 100, 150, 1, 5, 0, 0, 0, 1, 16, 4291611903, 2, 16, 16, 8, 8, 0, 0, 100, 10, 0, 100, 0, 0, 0, 2, 20, 0, 4, 0, 10, 15, 9, 1, 16, 3431500031, 2, 12, 12, 6, 6, 0, 10, 100, 10, 5, 100, 0, 0];
Item_Catalogue[404] = ["Poison Spirit", 4, 2E4, 17, 40, 9, 4278255360, 41, 60, 405, "60% enemy dies", "Poison"];
Item_Catalogue[405] = ["Poison Spirit", 0, 0, 0, 0, 0, 0, 1, 109, 1, 1, 1, 6, 1, 0, 0, 0, 0, 6, 1147600640, 2, 24, 24, 32, 32, 0, 50, 51, 10, 0, 88, 0, 1, 0, 4, 1E3, 0, 0];
Item_Catalogue[323] = ["White Stone", 5, 2E3, 7, 6, 9, 4294967295, 1, 300, 0, "LP +300", ""];
Item_Catalogue[324] = ["Red Stone", 5, 2E3, 7, 6, 9, 4294914867, 2, 25, 0, "str +25", ""];
Item_Catalogue[325] = ["Green Stone", 5, 2E3, 7, 6, 9, 4281597747, 3, 25, 0, "dex +25", ""];
Item_Catalogue[326] = ["Blue Stone", 5, 2E3, 7, 6, 9, 4281545727, 4, 25, 0, "mag +25", ""];
Item_Catalogue[327] = ["Black Stone", 5, 2E3, 7, 6, 9, 4284900966, 5, 10, 0, "str dex mag +10", ""];
Item_Catalogue[336] = ["Red Crystal", 5, 6E3, 8, 7, 9, 4294936712, 6, 5, 15, "AT +(5-15)", ""];
Item_Catalogue[337] = ["Yellow Crystal", 5, 6E3, 8, 7, 9, 4294967176, 7, 60, 0, "AT +60%", ""];
Item_Catalogue[338] = ["Silver Crystal", 5, 6E3, 8, 7, 9, 4291611852, 8, 12, 0, "Defense +12", ""];
Item_Catalogue[339] = ["Purple Crystal", 5, 6E3, 8, 7, 9, 4291598847, 9, 50, 0, "Magic Defense 50%", ""];
Item_Catalogue[340] = ["Black Crystal", 5, 6E3, 8, 7, 9, 4284900966, 10, 50, 0, "Block rate 50%", ""];
Item_Catalogue[369] = ["Ruby", 5, 1E4, 9, 8, 9, 4294901760, 13, 8, 12, "Add 8-12 fire", "damage"];
Item_Catalogue[370] = ["Garnet", 5, 1E4, 9, 8, 9, 4294914867, 14, 70, 0, "+1.4s Fire Length", ""];
Item_Catalogue[371] = ["Sapphire", 5, 1E4, 9, 8, 9, 4284914175, 15, 15, 25, "Add 15-25 ice", "damage"];
Item_Catalogue[372] = ["Aquamarine", 5, 1E4, 9, 8, 9, 4284927231, 16, 25, 0, "+25% Cold effect", ""];
Item_Catalogue[373] = ["Topaz", 5, 1E4, 9, 8, 9, 4294954035, 17, 0, 30, "Add 0-30 thunder", "damage"];
Item_Catalogue[374] = ["Emerald", 5, 1E4, 9, 8, 9, 4281597747, 18, 2, 3, "Add 2-3 poison", "damage"];
Item_Catalogue[375] = ["Peridot", 5, 1E4, 9, 8, 9, 4288282419, 19, 250, 0, "+5s Poison Length", ""];
Item_Catalogue[376] = ["Diamond", 5, 1E4, 9, 8, 9, 4294967295, 20, 25, 0, "+0.5s Freeze Length", ""];
Item_Catalogue[353] = ["Quick's Card", 5, 2E4, 10, 46, 9, 4287124736, 21, 50, 0, "-50% Limit AGI", ""];
Item_Catalogue[354] = ["Long Sword's Card", 5, 2E4, 10, 47, 9, 4281545523, 22, 15, 0, "+15 Length of sword", ""];
Item_Catalogue[355] = ["Catapult's Card", 5, 2E4, 10, 48, 9, 4284887808, 23, 100, 0, "+100 Length", ""];
Item_Catalogue[356] = ["Guide's Card", 5, 2E4, 10, 50, 9, 4288282521, 25, 50, 0, "+50 guide length", ""];
Item_Catalogue[357] = ["Bullet's Card", 5, 2E4, 10, 51, 9, 4281545523, 26, 6, 0, "+6 bullet", ""];
Item_Catalogue[358] = ["Critical's Card", 5, 2E4, 10, 53, 9, 4294967142, 29, 25, 400, "25% chance of", "AT +400%"];
Item_Catalogue[359] = ["Berserk Card", 5, 2E4, 10, 54, 9, 4291559424, 28, 250, 250, "AT +250%", "DF -250%"];
Item_Catalogue[368] = ["Big Card", 5, 2E4, 10, 55, 9, 4293848814, 42, 300, 0, "300% Attack range", ""];
Item_Catalogue[385] = ["Bronze Medal", 5, 1E4, 11, 10, 9, 4292708369, 33, 50, 0, "+50% Drop rate", ""];
Item_Catalogue[386] = ["Silver Medal", 5, 1E4, 11, 10, 9, 4291611852, 34, 50, 0, "+50% ONIGIRI Drop", ""];
Item_Catalogue[387] = ["Gold Medal", 5, 1E4, 11, 10, 9, 4294958336, 35, 50, 0, "+50% Gold UP", ""];
Item_Catalogue[388] = ["Iron Medal", 5, 1E4, 11, 10, 9, 4284900966, 36, 50, 0, "+50% EXP UP", ""];
Item_Catalogue[389] = ["Knockback's Card", 1, 4E3, 10, 56, 9, 4288282572, 43, 25, 20, "25% chance of", "Knockback 20"];
Item_Catalogue[390] = ["Knockback's Card", 2, 8E3, 10, 56, 9, 4288282572, 43, 50, 20, "50% chance of", "Knockback 20"];
Item_Catalogue[391] = ["Knockback's Card", 3, 12E3, 10, 56, 9, 4288282572, 43, 50, 30, "50% chance of", "Knockback 30"];
Item_Catalogue[392] = ["Knockback's Card", 4, 16E3, 10, 56, 9, 4288282572, 43, 100, 30, "100% chance of", "Knockback 30"];
Item_Catalogue[393] = ["Knockback's Card", 5, 2E4, 10, 56, 9, 4288282572, 43, 30, 90, "30% chance of", "Knockback 90"];
Item_Catalogue[406] = ["Reflection Card", 1, 4E3, 10, 57, 9, 4294967244, 44, 25, 0, "25% chance of", "Reflection"];
Item_Catalogue[407] = ["Reflection Card", 2, 8E3, 10, 57, 9, 4294967244, 44, 50, 0, "50% chance of", "Reflection"];
Item_Catalogue[408] = ["Reflection Card", 3, 12E3, 10, 57, 9, 4294967244, 44, 75, 0, "75% chance of", "Reflection"];
Item_Catalogue[409] = ["Reflection Card", 4, 16E3, 10, 57, 9, 4294967244, 44, 100, 0, "100% chance of", "Reflection"];
Item_Catalogue[459] = ["Ring's Card", 1, 4E3, 10, 62, 9, 4294967091, 47, 1, 0, "Ring +1", ""];
Item_Catalogue[460] = ["Ring's Card", 2, 8E3, 10, 62, 9, 4294967091, 47, 1, 50, "Ring +1", "LP +50"];
Item_Catalogue[461] = ["Ring's Card", 3, 12E3, 10, 62, 9, 4294967091, 47, 1, 100, "Ring +1", "LP +100"];
Item_Catalogue[462] = ["Ring's Card", 4, 16E3, 10, 62, 9, 4294967091, 47, 1, 150, "Ring +1", "LP +150"];
Item_Catalogue[463] = ["Ring's Card", 5, 2E4, 10, 62, 9, 4294967091, 47, 1, 200, "Ring +1", "LP +200"];
Item_Catalogue[464] = ["Ring's Card", 6, 24E3, 10, 62, 9, 4294967091, 47, 1, 300, "Ring +1", "LP +300"];
Item_Catalogue[418] = ["White Stone", 6, 2400, 7, 6, 9, 4294967295, 1, 400, 0, "LP +400", ""];
Item_Catalogue[419] = ["Red Stone", 6, 2400, 7, 6, 9, 4294914867, 2, 30, 0, "str +30", ""];
Item_Catalogue[420] = ["Green Stone", 6, 2400, 7, 6, 9, 4281597747, 3, 30, 0, "dex +30", ""];
Item_Catalogue[421] = ["Blue Stone", 6, 2400, 7, 6, 9, 4281545727, 4, 30, 0, "mag +30", ""];
Item_Catalogue[422] = ["Black Stone", 6, 2400, 7, 6, 9, 4284900966, 5, 15, 0, "str dex mag +15", ""];
Item_Catalogue[424] = ["Red Crystal", 6, 7200, 8, 7, 9, 4294936712, 6, 6, 18, "AT +(6-18)", ""];
Item_Catalogue[425] = ["Yellow Crystal", 6, 7200, 8, 7, 9, 4294967176, 7, 70, 0, "AT +70%", ""];
Item_Catalogue[426] = ["Silver Crystal", 6, 7200, 8, 7, 9, 4291611852, 8, 15, 0, "Defense +15", ""];
Item_Catalogue[427] = ["Purple Crystal", 6, 7200, 8, 7, 9, 4291598847, 9, 60, 0, "Magic Defense 60%", ""];
Item_Catalogue[428] = ["Black Crystal", 6, 7200, 8, 7, 9, 4284900966, 10, 60, 0, "Block rate 60%", ""];
Item_Catalogue[443] = ["Ruby", 6, 12E3, 9, 8, 9, 4294901760, 13, 10, 15, "Add 10-15 fire", "damage"];
Item_Catalogue[444] = ["Garnet", 6, 12E3, 9, 8, 9, 4294914867, 14, 85, 0, "+1.7s Fire Length", ""];
Item_Catalogue[446] = ["Sapphire", 6, 12E3, 9, 8, 9, 4284914175, 15, 18, 30, "Add 18-30 ice", "damage"];
Item_Catalogue[447] = ["Aquamarine", 6, 12E3, 9, 8, 9, 4284927231, 16, 30, 0, "+30% Cold effect", ""];
Item_Catalogue[448] = ["Topaz", 6, 12E3, 9, 8, 9, 4294954035, 17, 0, 39, "Add 0-39 thunder", "damage"];
Item_Catalogue[449] = ["Emerald", 6, 12E3, 9, 8, 9, 4281597747, 18, 3, 3, "Add 3-3 poison", "damage"];
Item_Catalogue[450] = ["Peridot", 6, 12E3, 9, 8, 9, 4288282419, 19, 300, 0, "+6s Poison Length", ""];
Item_Catalogue[445] = ["Diamond", 6, 12E3, 9, 8, 9, 4294967295, 20, 30, 0, "+0.6s Freeze Length", ""];
Item_Catalogue[423] = ["Katana's Card", 6, 24E3, 10, 58, 9, 4281545523, 45, 40, 10, "AT +40%", "+10 Length of sword"];
Item_Catalogue[465] = ["Long Sword's Card", 6, 24E3, 10, 47, 9, 4281545523, 22, 20, 0, "+20 Length of sword", ""];
Item_Catalogue[466] = ["Catapult's Card", 6, 24E3, 10, 48, 9, 4284887808, 23, 120, 0, "+120 Length", ""];
Item_Catalogue[467] = ["Guide's Card", 6, 24E3, 10, 50, 9, 4288282521, 25, 60, 0, "+60 guide length", ""];
Item_Catalogue[468] = ["Bullet's Card", 6, 24E3, 10, 51, 9, 4281545523, 26, 0, 125, "+125% bullet", ""];
Item_Catalogue[469] = ["Critical's Card", 6, 24E3, 10, 53, 9, 4294967142, 29, 20, 600, "20% chance of", "AT +600%"];
Item_Catalogue[470] = ["Berserk Card", 6, 24E3, 10, 54, 9, 4291559424, 28, 300, 200, "AT +300%", "DF -200%"];
Item_Catalogue[437] = ["Bronze Medal", 6, 12E3, 11, 10, 9, 4292708369, 33, 75, 0, "+75% Drop rate", ""];
Item_Catalogue[438] = ["Silver Medal", 6, 12E3, 11, 10, 9, 4291611852, 34, 75, 0, "+75% ONIGIRI Drop", ""];
Item_Catalogue[439] = ["Gold Medal", 6, 12E3, 11, 10, 9, 4294958336, 35, 75, 0, "+75% Gold UP", ""];
Item_Catalogue[440] = ["Iron Medal", 6, 12E3, 11, 10, 9, 4284900966, 36, 75, 0, "+75% EXP UP", ""];
Item_Catalogue[441] = ["Heal's Card", 1, 48E3, 10, 59, 9, 4294967295, 46, 1, 0, "Heal to attack each", "+1"];
Item_Catalogue[442] = ["Heal's Card", 2, 48E3, 10, 59, 9, 4294967295, 46, 2, 0, "Heal to attack each", "+2"];
Item_Catalogue[491] = ["White Stone", 7, 2800, 7, 6, 9, 4294967295, 1, 500, 0, "LP +500", ""];
Item_Catalogue[492] = ["Red Stone", 7, 2800, 7, 6, 9, 4294914867, 2, 40, 0, "str +40", ""];
Item_Catalogue[493] = ["Green Stone", 7, 2800, 7, 6, 9, 4281597747, 3, 40, 0, "dex +40", ""];
Item_Catalogue[494] = ["Blue Stone", 7, 2800, 7, 6, 9, 4281545727, 4, 40, 0, "mag +40", ""];
Item_Catalogue[495] = ["Black Stone", 7, 2800, 7, 6, 9, 4284900966, 5, 20, 0, "str dex mag +20", ""];
Item_Catalogue[528] = ["Red Crystal", 7, 8400, 8, 7, 9, 4294936712, 6, 7, 21, "AT +(7-21)", ""];
Item_Catalogue[529] = ["Yellow Crystal", 7, 8400, 8, 7, 9, 4294967176, 7, 80, 0, "AT +80%", ""];
Item_Catalogue[530] = ["Silver Crystal", 7, 8400, 8, 7, 9, 4291611852, 8, 18, 0, "Defense +18", ""];
Item_Catalogue[531] = ["Purple Crystal", 7, 8400, 8, 7, 9, 4291598847, 9, 70, 0, "Magic Defense 70%", ""];
Item_Catalogue[532] = ["Black Crystal", 7, 8400, 8, 7, 9, 4284900966, 10, 70, 0, "Block rate 70%", ""];
Item_Catalogue[533] = ["Ruby", 7, 14E3, 9, 8, 9, 4294901760, 13, 15, 20, "Add 15-20 fire", "damage"];
Item_Catalogue[534] = ["Garnet", 7, 14E3, 9, 8, 9, 4294914867, 14, 100, 0, "+2.0s Fire Length", ""];
Item_Catalogue[535] = ["Sapphire", 7, 14E3, 9, 8, 9, 4284914175, 15, 21, 35, "Add 21-35 ice", "damage"];
Item_Catalogue[536] = ["Aquamarine", 7, 14E3, 9, 8, 9, 4284927231, 16, 35, 0, "+35% Cold effect", ""];
Item_Catalogue[537] = ["Topaz", 7, 14E3, 9, 8, 9, 4294954035, 17, 0, 49, "Add 0-49 thunder", "damage"];
Item_Catalogue[538] = ["Emerald", 7, 14E3, 9, 8, 9, 4281597747, 18, 3, 4, "Add 3-4 poison", "damage"];
Item_Catalogue[539] = ["Peridot", 7, 14E3, 9, 8, 9, 4288282419, 19, 350, 0, "+7s Poison Length", ""];
Item_Catalogue[540] = ["Diamond", 7, 14E3, 9, 8, 9, 4294967295, 20, 35, 0, "+0.7s Freeze Length", ""];
Item_Catalogue[541] = ["Katana's Card", 7, 28E3, 10, 58, 9, 4281545523, 45, 50, 10, "AT +50%", "+10 Length of sword"];
Item_Catalogue[542] = ["Quick's Card", 7, 28E3, 10, 46, 9, 4287124736, 21, 60, 0, "-60% Limit AGI", ""];
Item_Catalogue[543] = ["Long Sword's Card", 7, 28E3, 10, 47, 9, 4281545523, 22, 25, 0, "+25 Length of sword", ""];
Item_Catalogue[544] = ["Catapult's Card", 7, 28E3, 10, 48, 9, 4284887808, 23, 150, 0, "+150 Length", ""];
Item_Catalogue[545] = ["Guide's Card", 7, 28E3, 10, 50, 9, 4288282521, 25, 70, 0, "+70 guide length", ""];
Item_Catalogue[546] = ["Bullet's Card", 7, 28E3, 10, 51, 9, 4281545523, 26, 0, 150, "+150% bullet", ""];
Item_Catalogue[547] = ["Critical's Card", 7, 28E3, 10, 53, 9, 4294967142, 29, 15, 900, "15% chance of", "AT +900%"];
Item_Catalogue[548] = ["Berserk Card", 7, 28E3, 10, 54, 9, 4291559424, 28, 350, 200, "AT +350%", "DF -200%"];
Item_Catalogue[487] = ["Bronze Medal", 7, 14E3, 11, 10, 9, 4292708369, 33, 100, 0, "+100% Drop rate", ""];
Item_Catalogue[488] = ["Silver Medal", 7, 14E3, 11, 10, 9, 4291611852, 34, 100, 0, "+100% ONIGIRI Drop", ""];
Item_Catalogue[489] = ["Gold Medal", 7, 14E3, 11, 10, 9, 4294958336, 35, 100, 0, "+100% Gold UP", ""];
Item_Catalogue[490] = ["Iron Medal", 7, 14E3, 11, 10, 9, 4284900966, 36, 100, 0, "+100% EXP UP", ""];
Item_Catalogue[557] = ["Imperial Crown", 0, 400, 19, 63, 9, 4294956800, 48, 50, 0, "+50% Enemy", "(Passive)"];
Item_Catalogue[558] = ["Imperial Crown", 2, 400, 19, 63, 9, 4294956800, 48, 100, 0, "+100% Enemy", "(Passive)"];
Item_Catalogue[559] = ["Imperial Crown", 3, 400, 19, 63, 9, 4294956800, 48, 150, 0, "+150% Enemy", "(Passive)"];
Item_Catalogue[560] = ["Imperial Crown", 4, 400, 19, 63, 9, 4294956800, 48, 200, 0, "+200% Enemy", "(Passive)"];
Item_Catalogue[561] = ["Anger Crown", 0, 400, 19, 63, 9, 4292730333, 49, 0, 0, "LV up effect", "(Passive)"];
Item_Catalogue[562] = ["Anger Crown", 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 9999, 1, 0, 0, 0, 0, 0, 18, 4294967193, 2, 64, 512, 64, 512, 0, 0, 10, 20, 0, 100, 1, 0, 0, 3, 0, 0, 0];
Item_Catalogue[563] = ["Anger Crown", 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 999, 1, 0, 0, 0, 0, 0, 21, 4294967193, 2, 8, 8, 16, 16, 0, 0, 10, 3, -9, 100, 1, 0, 0, 3, 0, 0, 0];
var Save_Code1 = 0,
    Saving_Text_Timer = 0,
    Save_Code3 = "";
window.GameSave = getSaveCode;

function getSaveCode(a) {
    return 0 == a.length ? "" : Save_Code3
}
var Save_Error = 0,
    Save_Error_Text_Timer = 0,
    Save_Code_le = "";
window.GameLoad = setSaveCode;

function setSaveCode(a) {
    if (0 != a.length) return Save_Code_le = a, 0;
    if (0 == a.length) {
        if (0 == Save_Code_le.length) return -1;
        Displayed_Object = Sign_Touched_Mode = Current_Screen = Current_Stage = Text_Fade = Sequence_Step = 0;
        Selected_Player = 3;
        Mouse_Up = !1;
        for (a = 0; 4 > a; a++) MP_Bar[a] = 0;
        Click_To_Sell_Mode = 0;
        Players.o();
        Indicators.o();
        Projectiles.o();
        Drops.o();
        WorldMap.o();
        Save_Error = loadGame(Save_Code_le, 0);
        0 < Save_Error ? Save_Error_Text_Timer = 50 : Save_Code3 = genSaveCode(0);
        Save_Code_le = "";
        antiCheatSet()
    }
    return -1
}
window.AutoSave = saveGame;

function saveGame(a) {
    if (0 == a.length || !Save_Code1) return "";
    Save_Code1 = 0;
    Saving_Text_Timer = 50;
    return getSaveCode("0")
}

function getVal(a, b) {
    return Item_Catalogue[a].length <= b ? 0 : 6 == b || 19 == b || 44 == b ? Item_Catalogue[a][b] >>> 0 : Item_Catalogue[a][b]
}
var Slot1 = !1,
    Slot2 = !1;

function checkEff(a, b) {
    Slot2 = Slot1 = !1;
    getVal(Comp1_Inv[a], 7) == b && (Slot1 = !0);
    getVal(Comp2_Inv[a], 7) == b && (Slot2 = !0);
    return Slot1 || Slot2 ? !0 : !1
}

function getEff(a, b) {
    var c = 0;
    Slot1 && (c += getVal(Comp1_Inv[a], b));
    Slot2 && (c += getVal(Comp2_Inv[a], b));
    return c
}
var Char_List = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz.*".split("");

function genSaveCode(a) {
    var b, c, d = new Int32Array(512);
    b = 0;
    d[b++] = 1;
    d[b++] = 0;
    d[b++] = 0;
    d[b++] = floor(random(64));
    d[b++] = floor(random(64));
    for (c = 0; 8 > c; c++) d[b++] = VS_Game_ID_Plain[c];
    0 == a && (d[b++] = Current_Stage >> 6 & 63, d[b++] = Current_Stage >> 0 & 63);
    d[b++] = LV[0] >> 6 & 63;
    d[b++] = LV[0] >> 0 & 63;
    1 == a && (d[b++] = Rank[0]);
    for (c = 0; 4 > c; c++) d[b++] = SP[c] >> 6 & 63, d[b++] = SP[c] >> 0 & 63;
    0 == a && (d[b++] = Team_EXP >> 18 & 63, d[b++] = Team_EXP >> 12 & 63, d[b++] = Team_EXP >> 6 & 63, d[b++] = Team_EXP >> 0 & 63, d[b++] = Team_Gold >> 18 & 63, d[b++] = Team_Gold >> 12 & 63, d[b++] = Team_Gold >> 6 & 63, d[b++] = Team_Gold >> 0 & 63);
    for (c = 0; 4 > c; c++) d[b++] = Ranger_Class[c] >> 0 & 63;
    if (0 == a)
        for (c = 0; 4 > c; c++) d[b++] = LP_Current[c] >> 12 & 63, d[b++] = LP_Current[c] >> 6 & 63, d[b++] = LP_Current[c] >> 0 & 63;
    for (c = 0; 4 > c; c++) d[b++] = LP_SP[c] >> 6 & 63, d[b++] = LP_SP[c] >> 0 & 63, d[b++] = STR_SP[c] >> 6 & 63, d[b++] = STR_SP[c] >> 0 & 63, d[b++] = DEX_SP[c] >> 6 & 63, d[b++] = DEX_SP[c] >> 0 & 63, d[b++] = MAG_SP[c] >> 6 & 63, d[b++] = MAG_SP[c] >> 0 & 63;
    for (c = 4; 8 > c; c++) d[b++] = Item_Inv[c] >> 6 & 63, d[b++] = Item_Inv[c] >> 0 & 63, d[b++] = Comp1_Inv[c] >> 6 & 63, d[b++] = Comp1_Inv[c] >> 0 & 63, d[b++] = Comp2_Inv[c] >> 6 & 63, d[b++] = Comp2_Inv[c] >> 0 & 63;
    if (0 == a) {
        for (c = 16; 41 > c; c++) d[b++] = Item_Inv[c] >> 6 & 63, d[b++] = Item_Inv[c] >> 0 & 63, d[b++] = Comp1_Inv[c] >> 6 & 63, d[b++] = Comp1_Inv[c] >> 0 & 63, d[b++] = Comp2_Inv[c] >> 6 & 63, d[b++] = Comp2_Inv[c] >> 0 & 63;
        for (c = 0; 4 > c; c++) d[b++] = Sett_Auto_Move[c];
        d[b++] = Sett_Move_If_Dying;
        d[b++] = Sett_Dmg_Indicators;
        d[b++] = Sett_LP_Bar_Disp;
        d[b++] = Sett_PL_Symbol;
        d[b++] = Sett_Drag_Dead_Body;
        for (c = 0; 3 > c; c++) d[b++] = 0;
        for (c = 0; c < Stage_Count; c++) {
            a = Stage_Status[c];
            for (var e = 0; c < Stage_Count - 1 && a == Stage_Status[c + 1]; c++)
                if (e++, 31 == e) {
                    c++;
                    break
                }
            d[b++] = a;
            0 < e && (d[b++] = 16 + e)
        }
    }
    for (c = e = 0; c < b; c++) e += d[c] * (floor(c / 7) + 1);
    d[1] = e >> 6 & 63;
    d[2] = e & 63;
    for (c = e = 0; c < b; c++) e += d[c] * ((c & 15) + 1);
    d[b++] = e >> 8 & 47;
    d[b++] = e >> 4 & 31;
    d[b++] = e >> 0 & 15;
    a = "" + Char_List[d[0]];
    a += Char_List[d[1]];
    a += Char_List[d[2]];
    e = d[2];
    for (c = 3; c < b; c++) a += Char_List[d[c] + e & 63], e += d[c] + c + d[1];
    return a
}

function loadGame(a, b) {
    var c = 4 * b,
        d, e, g = new Int32Array(512),
        h = a.length,
        q = 0;
    if (0 == h) return 1;
    90 > h && (q = 1);
    for (d = 0; d < h; d++) {
        var m = a.charAt(d);
        for (e = 0; e < Char_List.length; e++)
            if (Char_List[e] == m) {
                g[d] = e;
                break
            }
    }
    if (0 >= g[0]) return 2;
    e = g[2];
    for (d = 3; d < h; d++) g[d] = g[d] - e & 63, e += g[d] + d + g[1];
    for (d = e = 0; d < h - 3; d++) e += g[d] * ((d & 15) + 1);
    if (g[d + 0] != (e >> 8 & 47) || g[d + 1] != (e >> 4 & 31) || g[d + 2] != (e >> 0 & 15)) return 3;
    if (0 == b)
        for (d = 0; 8 > d; d++)
        //if (g[d + 5] != VS_Game_ID_Plain[d]) return 4;
            if (g[d + 5] != VS_Game_ID_Plain[d]) VS_Game_ID_Plain[d] = g[d + 5];
    if (document.getElementById('datauser')) var loadGameUserCode = "";
    VS_Game_ID_Plain.forEach(elem => loadGameUserCode += Char_List[elem]);
    document.getElementById('datauser').innerHTML = loadGameUserCode;
    d = 0;
    d++;
    d++;
    d++;
    d++;
    d++;
    d += 8;
    q || (Current_Stage = (g[d++] << 6) + g[d++]);
    LV[b] = (g[d++] << 6) + g[d++];
    1 == q && (Rank[b] = g[d++]);
    for (e = c; e < c + 4; e++) SP[e] = (g[d++] << 6) + g[d++];
    q || (Team_EXP = (g[d++] << 18) + (g[d++] << 12) + (g[d++] << 6) + g[d++], Team_Gold = (g[d++] << 18) + (g[d++] << 12) + (g[d++] << 6) + g[d++]);
    for (e = c; e < c + 4; e++) Ranger_Class[e] = g[d++];
    if (!q)
        for (e = c; e < c + 4; e++) LP_Current[e] = (g[d++] << 12) + (g[d++] << 6) + g[d++];
    for (e = c; e < c + 4; e++) LP_SP[e] = (g[d++] << 6) + g[d++], STR_SP[e] = (g[d++] << 6) + g[d++], DEX_SP[e] = (g[d++] << 6) + g[d++], MAG_SP[e] = (g[d++] << 6) + g[d++];
    for (e = 4 + c; e < 8 + c; e++) Item_Inv[e] = (g[d++] << 6) + g[d++], Comp1_Inv[e] = (g[d++] << 6) + g[d++], Comp2_Inv[e] = (g[d++] << 6) + g[d++];
    if (1 == q) return 0;
    for (e = 16; 41 > e; e++) Item_Inv[e] = (g[d++] << 6) + g[d++], Comp1_Inv[e] = (g[d++] << 6) + g[d++], Comp2_Inv[e] = (g[d++] << 6) + g[d++];
    for (e = 0; 4 > e; e++) Sett_Auto_Move[e] = g[d++];
    Sett_Move_If_Dying = g[d++];
    Sett_Dmg_Indicators = g[d++];
    Sett_LP_Bar_Disp = g[d++];
    Sett_PL_Symbol = g[d++];
    Sett_Drag_Dead_Body = g[d++];
    for (e = 0; 3 > e; e++) d++;
    for (e = 0; e < Stage_Count; e++) Stage_Status[e] = 0;
    for (e = 0; d < h - 3; d++)
        if (16 > g[d]) Stage_Status[e++] = g[d];
        else
            for (c = 0; c < g[d] - 16; c++) Stage_Status[e++] = g[d - 1];
    for (e = 0; e < Stage_Count; e++) Stage_Status[e] & Beaten && (Stage_Status[e] |= Unlocked, 0 < Dot_Locations[e][3] && (Stage_Status[Dot_Locations[e][3]] |= Unlocked), 0 < Dot_Locations[e][4] && (Stage_Status[Dot_Locations[e][4]] |= Unlocked));
    return 0
}
WIN.fff = vsUploadCode;

function vsUploadCode(a) {
    var b, c, d = new Int32Array(16);
    b = 0;
    d[b++] = floor(random(64));
    d[b++] = floor(random(64));
    d[b++] = floor(random(64));
    d[b++] = floor(random(64));
    d[b++] = Rank[0];
    d[b++] = Rank[1];
    d[b++] = a;
    d[b++] = Unix_Hour >> 18 & 63;
    d[b++] = Unix_Hour >> 12 & 63;
    d[b++] = Unix_Hour >> 6 & 63;
    d[b++] = Unix_Hour & 63;
    var e = 0;
    for (a = 0; a < b; a++) e += d[a] * ((a & 15) + 1);
    d[b++] = e >> 8 & 47;
    d[b++] = e >> 4 & 31;
    d[b++] = e >> 0 & 15;
    c = "" + Char_List[d[0]];
    c += Char_List[d[1]];
    e = d[1];
    for (a = 2; a < b; a++) c += Char_List[d[a] + e & 63], e += d[a] + a + d[0];
    return c
}
var Check_Var_Total = 0,
    Check_Var_Seed = 0,
    Item_Attribute_Data,//=[]
    Enemy_Spawn_Data = 0,
    Monster_Data = 0,
    Shop_Item_Data = 0;
WIN.fff = dataGather;

function dataGather() {
    var a, b, c;
    Item_Attribute_Data = new Int32Array(Item_Catalogue.length);
    for (a = 0; a < Item_Catalogue.length; a++)
        for (b = Item_Attribute_Data[a] = 0; b < Item_Catalogue[a].length; b++) "number" == typeof Item_Catalogue[a][b] && (Item_Attribute_Data[a] += Item_Catalogue[a][b] & 255);
    for (a = Enemy_Spawn_Data = 0; a < Stage_Spawns.length; a++)
        for (b = 0; b < Stage_Spawns[a].length; b++)
            for (c = 0; c < Stage_Spawns[a][b].length; c++) Enemy_Spawn_Data += Stage_Spawns[a][b][c];
    for (a = Monster_Data = 0; a < EN_Info.length; a++)
        for (b = 0; b < EN_Info[a].length; b++) Monster_Data += EN_Info[a][b] & 65535;
    for (c = Shop_Item_Data = 0; c < Shop_Items.length; c++)
        for (a = 0; a < Shop_Items[c].length; a++)
            for (b = 0; b < Shop_Items[c][a].length; b++) Shop_Item_Data += Shop_Items[c][a][b] * b & 65535
}

function antiCheatCheck() {
    var a, b, c, d;
    if (0 > LV[0] || 99 < LV[0]) Game_Canvas = null;
    if (0 > LV[1] || 99 < LV[1]) Game_Canvas = null;
    if (0 > Team_EXP || 9999999 < Team_EXP) Game_Canvas = null;
    if (0 > Team_Gold || 9999999 < Team_Gold) Game_Canvas = null;
    for (a = 0; 8 > a; a++) {
        if (0 > SP[a] || 196 < SP[a]) Game_Canvas = null;
        if (0 > LP_SP[a] || 196 < LP_SP[a]) Game_Canvas = null;
        if (0 > STR_SP[a] || 196 < STR_SP[a]) Game_Canvas = null;
        if (0 > DEX_SP[a] || 196 < DEX_SP[a]) Game_Canvas = null;
        if (0 > MAG_SP[a] || 196 < MAG_SP[a]) Game_Canvas = null
    }
    for (a = 0; 8 > a; a++) 0 != Item_Inv[4 + a] && getVal(Item_Inv[4 + a], 5) != Ranger_Class[a] && (Game_Canvas = null);
    for (a = 0; 8 > a; a++) {
        b = getVal(Item_Inv[4 + a], 5);
        c = getVal(Item_Inv[4 + a], 34);
        d = getVal(Item_Inv[4 + a], 12);
        if (0 != Comp1_Inv[4 + a]) {
            9 != getVal(Comp1_Inv[4 + a], 5) && (Game_Canvas = null);
            getVal(Comp1_Inv[4 + a], 7) == getVal(Comp2_Inv[4 + a], 7) && (Game_Canvas = null);
            var e = getVal(Comp1_Inv[4 + a], 7);
            false == compRestrCheck(e, b, c, d) && (Game_Canvas = null)//0==
        }
        0 != Comp2_Inv[4 + a] && 59 != Comp2_Inv[4 + a] && (9 != getVal(Comp2_Inv[4 + a], 5) && (Game_Canvas = null), e = getVal(Comp2_Inv[4 + a], 7), false == compRestrCheck(e, b, c, d) && (Game_Canvas = null))
    }
    if (!Game_Mode || 2 == Game_Mode) {
        for (a = c = 0; a < Stage_Count; a++)
            if (Stage_Status[a] & Unlocked)
                for (d = Book_Indexer[a + 1] - Book_Indexer[a], b = 0; b < d; b++) c < EN_Info[Book_Indexer[a] + b][EN_Lvl] && (c = EN_Info[Book_Indexer[a] + b][EN_Lvl]), b += EN_Info[Book_Indexer[a] + b][En_2nd_Att];
        c + 10 + 2 < LV[0] && (Game_Canvas = null)
    }
    if (!Game_Mode || 2 == Game_Mode) {
        b = 4753E3;
        a = 9999999;
        if (98 > LV[0]) {
            b = 0;
            for (a = 1; a < LV[0]; a++) b += 1E3 * a;
            a = b + 1E3 * a
        }
        if (Team_EXP < b || a < Team_EXP) Game_Canvas = null
    }
    for (a = d = 0; 8 > a; a++) d += SP[a];
    for (a = 0; 8 > a; a++) d += LP_SP[a];
    for (a = 0; 8 > a; a++) d += STR_SP[a];
    for (a = 0; 8 > a; a++) d += DEX_SP[a];
    for (a = 0; 8 > a; a++) d += MAG_SP[a];
    d != 8 * (LV[0] - 1) + 8 * (LV[1] - 1) && (Game_Canvas = null);
    d = Check_Var_Seed;
    d += (Team_EXP | 1) * (d & 15 | 1);
    d += (Team_Gold | 1) * (d & 15 | 1);
    for (a = 0; 2 > a; a++) d += (LV[a] | 1) * (d & 15 | 1);
    for (a = 0; 8 > a; a++) d += (SP[a] | 1) * (d & 15 | 1);
    for (a = 0; 8 > a; a++) d += (LP_SP[a] | 1) * (d & 15 | 1);
    for (a = 0; 8 > a; a++) d += (STR_SP[a] | 1) * (d & 15 | 1);
    for (a = 0; 8 > a; a++) d += (DEX_SP[a] | 1) * (d & 15 | 1);
    for (a = 0; 8 > a; a++) d += (MAG_SP[a] | 1) * (d & 15 | 1);
    for (a = 0; 8 > a; a++) d += (Ranger_Class[a] | 1) * (d & 15 | 1);
    for (a = 0; 8 > a; a++) d += (LP_Current[a] | 1) * (d & 15 | 1);
    for (a = 0; 8 > a; a++) d += (MP_Bar[a] | 1) * (d & 15 | 1);
    for (a = 0; 8 > a; a++) d += (LP_Max[a] | 1) * (d & 15 | 1);
    for (a = 0; 8 > a; a++) d += (STR[a] | 1) * (d & 15 | 1);
    for (a = 0; 8 > a; a++) d += (DEX[a] | 1) * (d & 15 | 1);
    for (a = 0; 8 > a; a++) d += (MAG[a] | 1) * (d & 15 | 1);
    for (a = 0; 8 > a; a++) d += (AT_Min[a] | 1) * (d & 15 | 1);
    for (a = 0; 8 > a; a++) d += (AT_Max[a] | 1) * (d & 15 | 1);
    for (a = 0; 8 > a; a++) d += (Agi_Min[a] | 1) * (d & 15 | 1);
    for (a = 0; 8 > a; a++) d += (Agi_Max[a] | 1) * (d & 15 | 1);
    for (a = 0; 8 > a; a++) d += (RANGE[a] | 1) * (d & 15 | 1);
    for (a = 0; 41 > a; a++) d += (Item_Inv[a] | 1) * (d & 15 | 1);
    for (a = 0; 41 > a; a++) d += (Comp1_Inv[a] | 1) * (d & 15 | 1);
    for (a = 0; 41 > a; a++) d += (Comp2_Inv[a] | 1) * (d & 15 | 1);
    for (a = 0; 8 > a; a++) d += (STR_Aura[a] | 1) * (d & 15 | 1);
    for (a = 0; 8 > a; a++) d += (DEX_Aura[a] | 1) * (d & 15 | 1);
    for (a = 0; a < Stage_Count; a++) d += (Stage_Status[a] | 1) * (d & 15 | 1);
    d += (Game_Mode | 1) * (d & 15 | 1);
    d += (FP[0] | 1) * (d & 15 | 1);
    d += (FP[1] | 1) * (d & 15 | 1);
    d += (Rank[0] | 1) * (d & 15 | 1);
    d += (Rank[1] | 1) * (d & 15 | 1);
    d != (Check_Var_Total ^ 16777215) && (Game_Canvas = null);
    if (1 > random(100))
        for (a = 0; a < Item_Catalogue.length; a++) {
            for (b = d = 0; b < Item_Catalogue[a].length; b++) "number" == typeof Item_Catalogue[a][b] && (d += Item_Catalogue[a][b] & 255);
            d != Item_Attribute_Data[a] && (Game_Canvas = null)
        }
    if (1 > random(100)) {
        for (a = d = 0; a < Stage_Spawns.length; a++)
            for (b = 0; b < Stage_Spawns[a].length; b++)
                for (c = 0; c < Stage_Spawns[a][b].length; c++) d += Stage_Spawns[a][b][c];
        d != Enemy_Spawn_Data && (Game_Canvas = null)
    }
    if (1 > random(100)) {
        for (a = d = 0; a < EN_Info.length; a++)
            for (b = 0; b < EN_Info[a].length; b++) d += EN_Info[a][b] & 65535;
        d != Monster_Data && (Game_Canvas = null)
    }
    if (1 > random(100)) {
        for (c = d = 0; c < Shop_Items.length; c++)
            for (a = 0; a < Shop_Items[c].length; a++)
                for (b = 0; b < Shop_Items[c][a].length; b++) d += Shop_Items[c][a][b] * b & 65535;
        d != Shop_Item_Data && (Game_Canvas = null)
    }
}

function antiCheatSet() {
    var a, b = floor(random(1024));
    Check_Var_Seed = b;
    b += (Team_EXP | 1) * (b & 15 | 1);
    b += (Team_Gold | 1) * (b & 15 | 1);
    for (a = 0; 2 > a; a++) b += (LV[a] | 1) * (b & 15 | 1);
    for (a = 0; 8 > a; a++) b += (SP[a] | 1) * (b & 15 | 1);
    for (a = 0; 8 > a; a++) b += (LP_SP[a] | 1) * (b & 15 | 1);
    for (a = 0; 8 > a; a++) b += (STR_SP[a] | 1) * (b & 15 | 1);
    for (a = 0; 8 > a; a++) b += (DEX_SP[a] | 1) * (b & 15 | 1);
    for (a = 0; 8 > a; a++) b += (MAG_SP[a] | 1) * (b & 15 | 1);
    for (a = 0; 8 > a; a++) b += (Ranger_Class[a] | 1) * (b & 15 | 1);
    for (a = 0; 8 > a; a++) b += (LP_Current[a] | 1) * (b & 15 | 1);
    for (a = 0; 8 > a; a++) b += (MP_Bar[a] | 1) * (b & 15 | 1);
    for (a = 0; 8 > a; a++) b += (LP_Max[a] | 1) * (b & 15 | 1);
    for (a = 0; 8 > a; a++) b += (STR[a] | 1) * (b & 15 | 1);
    for (a = 0; 8 > a; a++) b += (DEX[a] | 1) * (b & 15 | 1);
    for (a = 0; 8 > a; a++) b += (MAG[a] | 1) * (b & 15 | 1);
    for (a = 0; 8 > a; a++) b += (AT_Min[a] | 1) * (b & 15 | 1);
    for (a = 0; 8 > a; a++) b += (AT_Max[a] | 1) * (b & 15 | 1);
    for (a = 0; 8 > a; a++) b += (Agi_Min[a] | 1) * (b & 15 | 1);
    for (a = 0; 8 > a; a++) b += (Agi_Max[a] | 1) * (b & 15 | 1);
    for (a = 0; 8 > a; a++) b += (RANGE[a] | 1) * (b & 15 | 1);
    for (a = 0; 41 > a; a++) b += (Item_Inv[a] | 1) * (b & 15 | 1);
    for (a = 0; 41 > a; a++) b += (Comp1_Inv[a] | 1) * (b & 15 | 1);
    for (a = 0; 41 > a; a++) b += (Comp2_Inv[a] | 1) * (b & 15 | 1);
    for (a = 0; 8 > a; a++) b += (STR_Aura[a] | 1) * (b & 15 | 1);
    for (a = 0; 8 > a; a++) b += (DEX_Aura[a] | 1) * (b & 15 | 1);
    for (a = 0; a < Stage_Count; a++) b += (Stage_Status[a] | 1) * (b & 15 | 1);
    b += (Game_Mode | 1) * (b & 15 | 1);
    b += (FP[0] | 1) * (b & 15 | 1);
    b += (FP[1] | 1) * (b & 15 | 1);
    b += (Rank[0] | 1) * (b & 15 | 1);
    b += (Rank[1] | 1) * (b & 15 | 1);
    Check_Var_Total = b ^ 16777215
}
var Startup_Step = 0;

function gameStartup(a, b, c, d, e, g, h, q, m, l, A, z, Z, B) {
    if (!Startup_Step) {
        null != a ? Game_ID_1 = a : Game_ID_1 = "";
        null != b ? Game_ID_2 = b : Game_ID_2 = "";
        Game_Language = "0" == c ? !0 : !1;
        null != d ? Save_Cookie = d : Save_Cookie = "";
        Game_Mode = null != e ? ~~e : 0;
        null != g ? VS_Player_Team_ID = g : VS_Player_Team_ID = "";
        null != h ? VS_Opponent_Team_ID = h : VS_Opponent_Team_ID = "";
        null != q ? VS_Opponent_Data = q : VS_Opponent_Data = "";
        VS_Upload_Errors = null != m ? ~~m : 0;
        Unix_Hour = null != l ? ~~l : 0;
        null != A ? Player_Name = A : Player_Name = "";
        null != z ? VS_Player_Team_Name = z : VS_Player_Team_Name = "";
        null != Z ? VS_Opponent_Name = Z : VS_Opponent_Name = "";
        null != B ? VS_Opponent_Team_Name = B : VS_Opponent_Team_Name = "";
        for (a = 0; 8 > a && a < Game_ID_2.length; a++)
            for (b = Game_ID_2.charAt(a), c = 0; c < Char_List.length; c++)
                if (Char_List[c] == b) {
                    VS_Game_ID_Plain[a] = c;
                    break
                }
        logCopyright(chr_Copyright_DAN_BALL);
        cv.width = 512;
        cv.height = 384;
        for (a = 0; 513 > a; a++) Xe_arr[a] = new Float32Array(2);
        for (a = 0; 512 > a; a++) b = 360 * a / 512 * Pi / 180, Xe_arr[a][0] = Math.cos(b), Xe_arr[a][1] = Math.sin(b);
        Xe_arr[a][0] = Xe_arr[0][0];
        Xe_arr[a][1] = Xe_arr[0][1];
        for (a = 0; 256 > a; a++) Is_Key_Pressed1[a] = !1, Arr256_2[a] = !1, Is_Key_Held[a] = !1, Arr256_4[a] = 0, Arr256_5[a] = 0;
        for (a = 0; 10 > a; a++) Arr256_4[48 + a] = 48 + a;
        for (a = 0; 9 > a; a++) Arr256_5[49 + a] = 33 + a;
        for (a = 0; 4 > a; a++) Arr256_4[37 + a] = 37 + a;
        for (a = 0; 4 > a; a++) Arr256_5[37 + a] = 37 + a;
        Arr256_4[13] = Arr256_5[13] = 13;
        Arr256_4[16] = Arr256_5[16] = 16;
        Arr256_4[17] = Arr256_5[17] = 17;
        Arr256_4[18] = Arr256_5[18] = 18;
        Arr256_4[32] = Arr256_5[32] = 32;
        Arr256_4[186] = 58;
        Arr256_5[186] = 42;
        Arr256_4[187] = 59;
        Arr256_5[187] = 43;
        Arr256_4[188] = 44;
        Arr256_5[188] = 60;
        Arr256_4[189] = 45;
        Arr256_5[189] = 61;
        Arr256_4[190] = 46;
        Arr256_5[190] = 62;
        Arr256_4[191] = 47;
        Arr256_5[191] = 63;
        Arr256_4[192] = 64;
        Arr256_5[192] = 96;
        Arr256_4[219] = 91;
        Arr256_5[219] = 123;
        Arr256_4[220] = 92;
        Arr256_5[220] = 124;
        Arr256_4[221] = 93;
        Arr256_5[221] = 125;
        Arr256_4[222] = 94;
        Arr256_5[222] = 126;
        Arr256_4[226] = 92;
        Arr256_5[226] = 95;
        Arr256_4[58] = 58;
        Arr256_5[58] = 42;
        Arr256_4[59] = 59;
        Arr256_5[59] = 43;
        Arr256_4[173] = 45;
        Arr256_5[173] = 61;
        Arr256_4[64] = 64;
        Arr256_5[64] = 96;
        Arr256_4[160] = 94;
        Arr256_5[160] = 126;
        for (a = 0; 1024 > a; a++) Rand_Arr_Df[a] = a / 1024;
        for (a = 0; 1024 > a; a++) b = floor(1024 * Math.random()), c = Rand_Arr_Df[a], Rand_Arr_Df[a] = Rand_Arr_Df[b], Rand_Arr_Df[b] = c;
        Rand_EF = floor(1024 * Math.random()) & 1023;
        Rand_FF = floor(512 * Math.random()) | 1;
        for (a = 0; 196608 > a; a++) Game_Canvas[a] = 0;
        Large_Text.o("font.gif", 8, 12);
        Small_Text.o("font_s.gif", 5, 7);
        for (a = 0; 13 > a; a++) Terrain_Textures[a] = new SR_Image, Terrain_Textures[a].IGset("gt" + a + ".gif");
        Player_Img.IGset("pl.gif");
        Drop_Img.IGset("icon.gif");
        Item_Img.IGset("item.gif");
        Enemy_Head_Img.IGset("en.gif");
        Sign_Img.IGset("next.gif");
        Projectiles_Img.IGset("mag.gif");
        Title_Img.IGset("title.gif");
        Effect_Img.IGset("ef.gif");
        Hut_Img.IGset("town.gif");
        Water_Img.IGset("water.gif");
        Water_Red_Img.IGset("water2.gif");
        Forget_Tree_Img.IGset("tree.gif");
        Map_Elev_Index.IGset("map.gif");
        Map_Tiles_Img.IGset("mt.gif");
        Map_Feature_Index.IGset("map2.gif");
        Map_Features_Img.IGset("mt2.gif");
        checkFalseHost() ? Startup_Step-- : Startup_Step++
    }
    if (1 == Startup_Step) {
        imgToArray(Large_Text.f);
        imgToArray(Small_Text.f);
        for (a = 0; 13 > a; a++) imgToArray(Terrain_Textures[a]);
        imgToArray(Player_Img);
        imgToArray(Drop_Img);
        imgToArray(Item_Img);
        imgToArray(Enemy_Head_Img);
        imgToArray(Sign_Img);
        imgToArray(Projectiles_Img);
        imgToArray(Title_Img);
        imgToArray(Effect_Img);
        imgToArray(Hut_Img);
        imgToArray(Water_Img);
        imgToArray(Water_Red_Img);
        imgToArray(Forget_Tree_Img);
        imgToArray(Map_Elev_Index);
        imgToArray(Map_Tiles_Img);
        imgToArray(Map_Feature_Index);
        imgToArray(Map_Features_Img);
        Tile_Counter1 ? timeOut(gameStartup, timePF()) : Startup_Step++
    }
    2 == Startup_Step && (Players.o(), Indicators.o(), Projectiles.o(), Drops.o(), WorldMap.o(), 1 == Game_Mode && loadGame(VS_Opponent_Data, 1), loadGame(Save_Cookie, 0), Save_Code3 = genSaveCode(0), dataGather(), antiCheatSet(), setArea(Stage_Eff_Canvas, 512, 384), mainSequence())
}
WIN.fff = playSequence;

function playSequence() {
    if (0 < Check_Host1) Check_Host1++;
    else {
        setSaveCode("");
        saveGame("");
        for (var a = 196607; 0 <= a; a--) Game_Canvas[a] = 0;
        9 >= Sequence_Step ? menuAndMap() : 49 >= Sequence_Step ? PvEscreens() : 59 >= Sequence_Step ? townScreens() : 60 <= Sequence_Step && PvPscreens();
        0 < Saving_Text_Timer && (Saving_Text_Timer--, centeredText(Large_Text, 480, 247, "save OK", 16711680, 6684672));
        0 < Save_Error_Text_Timer && (Save_Error_Text_Timer--, 2 == Save_Error ? TXoutputB(Large_Text, 10, 10, "VERSION ERROR", 16711680, 6684672) : 3 == Save_Error ? TXoutputB(Large_Text, 10, 10, "DATA ERROR", 16711680, 6684672) : 4 == Save_Error && TXoutputB(Large_Text, 10, 10, "USER ERROR", 16711680, 6684672));
        antiCheatCheck()
    }
}
WIN.fff = menuAndMap;

function menuAndMap() {
    var a;
    if (!Sequence_Step)
        if (Players.o(), Enemies.o(0), Sequence_Step++, 1 == Game_Mode) Sequence_Step = 60;
        else {
            if (2 == Game_Mode || 3 == Game_Mode) Sequence_Step = 70
        }
    else if (1 == Sequence_Step) Current_Screen = 0, Terrain.o(0) && (Players.set(0, 20, Terrain.b[20]), Players.set(1, 28, Terrain.b[28]), Players.set(2, 36, Terrain.b[36]), Players.set(3, 44, Terrain.b[44]), setRangersUI(), Enemies.o(1), Sequence_Step++);
    else if (2 == Sequence_Step) {
        Players.G();
        setRangersUI();
        TRdrawTerrain();
        Players.B();
        dispItemCentered(Title_Img, 256, 100, 365, 121, 0, Game_Language ? 0 : 121, 365, 121, 16777215);
        var b = 100;
        for (a = 4; 40 > a; a++) 48 == getVal(Item_Inv[a], 7) && (b += getVal(Item_Inv[a], 8)), 48 == getVal(Comp1_Inv[a], 7) && (b += getVal(Comp1_Inv[a], 8)), 48 == getVal(Comp2_Inv[a], 7) && (b += getVal(Comp2_Inv[a], 8)), 49 == getVal(Item_Inv[a], 7) && (b += 1), 49 == getVal(Comp1_Inv[a], 7) && (b += 1), 49 == getVal(Comp2_Inv[a], 7) && (b += 1);
        b = clamp(b, 100, 300);
        100 == b ? centeredText(Large_Text, 256, 195, "NEW GAME", 16777215, 10053171) : centeredText(Large_Text, 256, 195, "               NEW GAME with the Crown", 16777215, 10053171);
        if (isMouseHoveredCenter(100 == b ? 256 : 316, 195, 100 == b ? 128 : 248, 24)) {
            if (Clicked) {
                antiCheatCheck();
                Selected_Player = Displayed_Object = 3;
                for (a = 0; 4 > a; a++) Ranger_Class_Proxy[a] = Ranger_Class[a], Item_Inv_Proxy[a] = Item_Inv[4 + a], Comp1_Inv_Proxy[a] = Comp1_Inv[4 + a], Comp2_Inv_Proxy[a] = Comp2_Inv[4 + a], Ranger_Class[a] = 0, Item_Inv[4 + a] = 0, Comp1_Inv[4 + a] = 0, Comp2_Inv[4 + a] = 0;
                Sequence_Step++;
                antiCheatSet();
                setRangersUI()
            }
            100 == b ? drawLine(192, 203, 320, 203, 11141120) : drawLine(192, 203, 440, 203, 11141120)
        }
        0 != Ranger_Class[0] && 0 != Ranger_Class[1] && 0 != Ranger_Class[2] && 0 != Ranger_Class[3] && (centeredText(Large_Text, 256, 235, "LOAD GAME", 16777215, 10053171), isMouseHoveredCenter(256, 235, 128, 24) && (Clicked && (Sequence_Step = 5), drawLine(192, 243, 320, 243, 11141120)));
        centeredText(Large_Text, 256, 275, "VS MODE", 16777215, 5066137);
        /* disable vs mode
        isMouseHoveredCenter(256, 275, 128, 24) && (Clicked && (top.location.pathname = Game_Language ? "/javagame/ranger/versus.html" : "/en/javagame/ranger/versus.html"), drawLine(192, 283, 320, 283, 11141120));
        // */
        menuCredits()
    } else if (3 == Sequence_Step) {
        Players.G();
        TRdrawTerrain();
        Players.B();
        largeMessage(Large_Text, 256, 50, "Player's Class Selection", 204, 148, 73, 255, 100, 0, 0, 255, 16, 24);
        for (a = 0; 4 > a; a++) isMouseHoveredCenter(160 + 64 * a, 140, 24, 24) && (Clicked && (Selected_Player = Displayed_Object = a), filledRectCentered(160 + 64 * a, 140, 24, 24, 8388608)), outlineRectCentered(160 + 64 * a, 140, 25, 25, 16777215), dispItemCentered(Player_Img, 160 + 64 * a, 140, 24, 24, 24 * Ranger_Class[a], 0, 24, 24, 16777215);
        outlineRectCentered(160 + 64 * Displayed_Object, 140, 25, 25, 16711680);
        antiCheatCheck();
        for (a = 0; 8 > a; a++) {
            var b = 46 + 60 * a,
                c = Class_Name_List[a + 1],
                d = Large_Text;
            d.b = -1;
            centeredText(d, b, 220, c, 13407305, 6553600);
            d.b = 0;
            isMouseHoveredCenter(46 + 60 * a, 240, 24, 24) && (Clicked && (Ranger_Class[Displayed_Object] = a + 1, Item_Inv[4 + Displayed_Object] = [3, 4, 5, 6, 58, 76, 188, 289][a], Comp1_Inv[4 + Displayed_Object] = 0, Comp2_Inv[4 + Displayed_Object] = 0), filledRectCentered(46 + 60 * a, 240, 24, 24, 8388608));
            outlineRectCentered(46 + 60 * a, 240, 25, 25, 16777215);
            dispItemCentered(Player_Img, 46 + 60 * a, 240, 24, 24, 24 * (a + 1), 0, 24, 24, 16777215)
        }
        0 != Ranger_Class[0] && 0 != Ranger_Class[1] && 0 != Ranger_Class[2] && 0 != Ranger_Class[3] && (centeredText(Large_Text, 464, 300, "START", 16777215, 10053171), isMouseHoveredCenter(464, 300, 128, 24) && (Clicked && Sequence_Step++, drawLine(416, 308, 512, 308, 11141120)));
        centeredText(Large_Text, 48, 300, "RETURN", 16777215, 10053171);
        if (isMouseHoveredCenter(48, 300, 128, 24)) {
            if (Clicked) {
                for (a = 0; 4 > a; a++) Ranger_Class[a] = Ranger_Class_Proxy[a], Item_Inv[4 + a] = Item_Inv_Proxy[a], Comp1_Inv[4 + a] = Comp1_Inv_Proxy[a], Comp2_Inv[4 + a] = Comp2_Inv_Proxy[a];
                Sequence_Step = 2
            }
            drawLine(0, 308, 96, 308, 11141120)
        }
        antiCheatSet();
        menuCredits()
    } else if (4 == Sequence_Step) {
        antiCheatCheck();
        b = 100;
        var c2 = 0;
        for (a = 4; 40 > a; a++) 48 == getVal(Item_Inv[a], 7) && (b += getVal(Item_Inv[a], 8)), 48 == getVal(Comp1_Inv[a], 7) && (b += getVal(Comp1_Inv[a], 8)), 48 == getVal(Comp2_Inv[a], 7) && (b += getVal(Comp2_Inv[a], 8)), 49 == getVal(Item_Inv[a], 7) && (c2 = 1), 49 == getVal(Comp1_Inv[a], 7) && (c2 = 1), 49 == getVal(Comp2_Inv[a], 7) && (c2 = 1);
        b = clamp(b, 100, 300);
        Current_Stage = 0;
        LV[0] = 1;
        FP[0] = 1;
        for (a = Team_Gold = Team_EXP = Rank[0] = 0; 4 > a; a++) SP[a] = 0, LP_Current[a] = 50, MP_Bar[a] = 0, LP_SP[a] = 0, STR_SP[a] = 0, DEX_SP[a] = 0, MAG_SP[a] = 0, Sett_Auto_Move[a] = 1;
        Sett_PL_Symbol = Sett_LP_Bar_Disp = Sett_Dmg_Indicators = Sett_Move_If_Dying = 0;
        Sett_Drag_Dead_Body = 1;
        for (a = 16; 41 > a; a++) Item_Inv[a] = 0, Comp1_Inv[a] = 0, Comp2_Inv[a] = 0;
        for (a = 0; a < Stage_Count; a++) Stage_Status[a] = 0;
        Stage_Status[0] = Beaten | Unlocked;
        Stage_Status[1] = Unlocked;
        for (a = 0; 4 > a; a++) Players.f[a] = 0;
        300 <= b ? Item_Inv[16] = 560 : 250 <= b ? Item_Inv[16] = 559 : 200 <= b ? Item_Inv[16] = 558 : 150 <= b && (Item_Inv[16] = 557);
        1 == c2 && 100 == b && (Item_Inv[16] = 561);
        1 == c2 && 100 != b && (Item_Inv[17] = 561);
        Current_Screen = WorldMap.a = 0;
        Sequence_Step = 6;
        antiCheatSet();
        menuCredits()
    } else if (5 == Sequence_Step) Current_Screen = 0, Sequence_Step = 6;
    else if (6 == Sequence_Step) {
        a = WorldMap;
        var e, g, d = new Vector2D,
            h = new Vector2D;
        20 > Mouse_Xpos && 256 > Mouse_Ypos ? a.a = clamp(a.a + 4, -720, 0) : 492 < Mouse_Xpos && 256 > Mouse_Ypos && (a.a = clamp(a.a - 4, -720, 0));
        for (g = 0; 16 > g; g++)
            for (e = 0; e < a.m; e++) - 1 != a.b[g][e] && drawItem(Map_Tiles_Img, a.a + 16 * e, 16 * g, 16, 16, a.b[g][e] % 5 * 16, 16 * floor(a.b[g][e] / 5), 16, 16);
        for (b = 0; b < Stage_Count; b++)
            if (Stage_Status[b] & Beaten)
                for (e = 3; 4 >= e; e++)
                    if (!(0 >= Dot_Locations[b][e]) && 32 != b && 70 != b && 88 != b)
                        for (d.x = 8 * Dot_Locations[b][0], d.y = 8 * Dot_Locations[b][1], h.x = 8 * (Dot_Locations[Dot_Locations[b][e]][0] - Dot_Locations[b][0]), h.y = 8 * (Dot_Locations[Dot_Locations[b][e]][1] - Dot_Locations[b][1]), g = normalize(h) / 8 - 1, scaleVector2D(h, 8), d.add(h), c2 = 0; c2 < g; c2++) filledRectCentered(a.a + d.x, d.y, 2, 2, 13421772), d.add(h);
        for (g = 0; 16 > g; g++)
            for (e = 0; e < a.m; e++) - 1 != a.c[g][e] && drawItem(Map_Features_Img, a.a + 16 * e + 8, 16 * g + 8, 16, 16, 16 * a.c[g][e], 0, 16, 16);
        dispItem(Map_Features_Img, a.a + 384 - 8, 124, 16, 16, 16, 0, 16, 16, 8421631);
        dispItem(Map_Features_Img, a.a + 504 - 8, 116, 16, 16, 48, 0, 16, 16, 16777215);
        dispItem(Map_Features_Img, a.a + 552 - 8, 116, 16, 16, 64, 0, 16, 16, 16777215);
        dispItem(Map_Features_Img, a.a + 592 - 8, 100, 16, 16, 32, 0, 16, 16, 16777215);
        dispItem(Map_Features_Img, a.a + 672 - 8, 68, 16, 16, 32, 0, 16, 16, 16777215);
        dispItem(Map_Features_Img, a.a + 808 - 8, 132, 16, 16, 16, 0, 16, 16, 13434879);
        dispItem(Map_Features_Img, a.a + 904 - 8, 164, 16, 16, 112, 0, 16, 16, 13434879);
        dispItem(Map_Features_Img, a.a + 1040 - 8, 172, 16, 16, 128, 0, 16, 16, 13434879);
        dispItem(Map_Features_Img, a.a + 1088 - 8, 100, 16, 16, 32, 0, 16, 16, 16777215);
        dispItem(Map_Features_Img, a.a + 1160 - 8, 84, 16, 16, 32, 0, 16, 16, 16777215);
        dispItem(Map_Features_Img, a.a + 1112 - 8, 44, 32, 16, 144, 0, 32, 16, 16777215);
        for (b = 0; b < Stage_Count; b++) 0 != Stage_Status[b] && (e = 8 * Dot_Locations[b][0], g = 8 * Dot_Locations[b][1], c2 = b && 20 != b && 47 != b && 77 != b ? 33 == b ? 0 : 71 == b ? 0 : Stage_Status[b] & Beaten ? 10027008 : 13421568 : 16777215, 0 == Dot_Locations[b][2] && filledRectCentered(a.a + e, g, 6, 6, c2), c2 = 71 == b ? 3 : 24, isMouseHoveredCenter(a.a + e, g, c2, c2) && outlineRectCentered(a.a + e, g, c2, c2, 13369344));
        e = 8 * Dot_Locations[Current_Stage][0];
        g = 8 * Dot_Locations[Current_Stage][1];
        drawItem(Player_Img, a.a + e + 1 - 12, g - 14 - 11, 24, 22, 0, 0, 24, 22);
        for (b = 0; b < Stage_Count; b++) 0 != Stage_Status[b] && (e = 8 * Dot_Locations[b][0], g = 8 * Dot_Locations[b][1], c2 = 71 == b ? 3 : 24, isMouseHoveredCenter(a.a + e, g, c2, c2)) && (!Clicked || b && 20 != b && 47 != b && 70 != b && 77 != b ? Clicked && b && (Current_Stage = b, Current_Screen = 0, Sequence_Step = 10) : (Current_Stage = b, Current_Screen = 1, Sequence_Step = 50), e = clamp(Mouse_Xpos, 1 + 4 * Stage_Names[b].length, 510 - 4 * Stage_Names[b].length), g = clamp(Mouse_Ypos - 24, 8, 256), centeredText(Large_Text, e, g, Stage_Names[b], 16777215, 5263440));
        var b2 = Large_Text;
        b2.b = 4;
        centeredText(b, 256, 16, "WORLD MAP", -1, 13158600);
        b2.b = 0;
        0 > a.a && centeredText(Large_Text, 12, 16, "<<", 13158600, 5263440); - 720 < a.a && centeredText(Large_Text, 500, 16, ">>", 13158600, 5263440);
        drawUI(2)
    }
}
WIN.fff = PvEscreens;

function PvEscreens() {
    var a, b, c, d;
    if (10 == Sequence_Step) {
        if (Terrain.o(Current_Stage)) {
            Players.set(0, 0, Terrain.b[0]);
            Players.set(1, 1, Terrain.b[1]);
            Players.set(2, 2, Terrain.b[2]);
            Players.set(3, 3, Terrain.b[3]);
            Enemies.o(1);
            var e = floor(randomRange(12, 28)),
                g = floor(randomRange(28, 44)),
                h = floor(randomRange(44, 60));
            Enemy_Spawn_Scale = 100;
            for (b = 4; 40 > b; b++) 48 == getVal(Item_Inv[b], 7) && (Enemy_Spawn_Scale += getVal(Item_Inv[b], 8)), 48 == getVal(Comp1_Inv[b], 7) && (Enemy_Spawn_Scale += getVal(Comp1_Inv[b], 8)), 48 == getVal(Comp2_Inv[b], 7) && (Enemy_Spawn_Scale += getVal(Comp2_Inv[b], 8));
            Enemy_Spawn_Scale = clamp(Enemy_Spawn_Scale, 100, 300);
            var q = floor((Stage_Spawns[Current_Stage][Current_Screen].length - 2) / 3);
            for (a = 0; a < q; a++) {
                var m = Stage_Spawns[Current_Stage][Current_Screen][3 * a + 2],
                    l = Stage_Spawns[Current_Stage][Current_Screen][3 * a + 3],
                    A = Stage_Spawns[Current_Stage][Current_Screen][3 * a + 4],
                    A = floor(A * Enemy_Spawn_Scale / 100);
                for (b = 0; b < A; b++) {
                    if (m == Ground) c = floor(randomRange(12, 60)), d = fiftyfifty(Terrain.b[c], Terrain.g[c]);
                    else if (m == Ground_Left) c = floor(randomRange(12, 28)), d = fiftyfifty(Terrain.b[c], Terrain.g[c]);
                    else if (m == Ground_Middle) c = floor(randomRange(28, 44)), d = fiftyfifty(Terrain.b[c], Terrain.g[c]);
                    else if (m == Ground_Right) c = floor(randomRange(44, 60)), d = fiftyfifty(Terrain.b[c], Terrain.g[c]);
                    else if (m == Air_Water) c = floor(randomRange(12, 60)), d = floor(randomRange(Terrain.h[c] + 2, Terrain.g[c]));
                    else if (m == Air) c = floor(randomRange(12, 60)), d = floor(randomRange(Terrain.h[c] + 2, Terrain.u[c]));
                    else if (m == Water && 0 < Terrain.i) d = floor(random(Terrain.i)), c = Terrain.s[d] & 63, d = floor(Terrain.s[d] / 64);
                    else if (m == Ground_Left_Clump) c = e, d = fiftyfifty(Terrain.b[c], Terrain.g[c]);
                    else if (m == Ground_Middle_Clump) c = g, d = fiftyfifty(Terrain.b[c], Terrain.g[c]);
                    else if (m == Ground_Right_Clump) c = h, d = fiftyfifty(Terrain.b[c], Terrain.g[c]);
                    else if (m == Ceiling) c = floor(randomRange(12, 60)), d = Terrain.h[c];
                    else if (m == Ceiling_Left) c = floor(randomRange(12, 28)), d = Terrain.h[c];
                    else if (m == Ceiling_Middle) c = floor(randomRange(28, 44)), d = Terrain.h[c];
                    else if (m == Ceiling_Right) c = floor(randomRange(44, 60)), d = Terrain.h[c];
                    else continue;
                    Enemies.add(c, d, l)
                }
            }
            Projectiles.a = 0;
            Indicators.a = 0;
            Drops.a = 0;
            Text_Fade = Sign_Touched_Mode = Target_Array_ID = En_Count_From_Max = Target_HP_Max = Target_HP_Current = Drops.f = 0;
            Sequence_Step++
        }
    } else if (11 == Sequence_Step) drawStage(0), drawUI(0), q = 30, a = "", Current_Screen ? Current_Screen + 1 == Stage_Spawns[Current_Stage].length && (q = 110, a = "BOSS AREA") : (q = 110, a = Stage_Names[Current_Stage]), screenTransition(255 - floor(255 * minOf(Text_Fade, 30) / 30)), 110 == q && (b = 255, 30 > Text_Fade ? b = floor(255 * Text_Fade / 30) : 80 < Text_Fade && (b = 255 - floor(255 * (Text_Fade - 80) / 30)), largeMessage(Large_Text, 256, 128, a, 255, 255, 255, b, 64, 64, 64, b, 16, 24), c = -1024 + floor(512 * Text_Fade / 30), drawLine(c, 112, c + 1024, 112, 8421504), c = 512 - floor(512 * Text_Fade / 30), drawLine(c, 141, c + 1024, 141, 8421504)), Text_Fade++, Text_Fade == q && (Text_Fade = 0, Sequence_Step++);
    else if (12 == Sequence_Step) drawStage(0), drawUI(0), 0 == LP_Current[0] + LP_Current[1] + LP_Current[2] + LP_Current[3] ? (Text_Fade = 0, Sequence_Step = 30) : Sign_Touched_Mode ? Sequence_Step++ : isMouseHovered(364, 4, 56, 20) ? (Clicked ? Sequence_Step = 20 : Is_Key_Pressed1[32] && (Sequence_Step = 20), TXoutputB(Large_Text, 368, 8, "Option", 16711680, 0)) : Is_Key_Pressed1[32] ? Sequence_Step = 20 : isMouseHovered(428, 4, 80, 20) && (Clicked && (Sequence_Step = 6), TXoutputB(Large_Text, 432, 8, "World Map", 16711680, 0));
    else if (13 == Sequence_Step) drawStage(0), drawUI(0), screenTransition(floor(255 * Text_Fade / 30)), Text_Fade++, 30 == Text_Fade && (1 == Sign_Touched_Mode ? (Sign_Touched_Mode = 0, Current_Screen++, Text_Fade = 0, Sequence_Step = 10) : 2 == Sign_Touched_Mode && (Text_Fade = Current_Screen = Sign_Touched_Mode = 0, antiCheatCheck(), Stage_Status[Current_Stage] |= Beaten, 0 < Dot_Locations[Current_Stage][3] && (Stage_Status[Dot_Locations[Current_Stage][3]] |= Unlocked), 0 < Dot_Locations[Current_Stage][4] && (Stage_Status[Dot_Locations[Current_Stage][4]] |= Unlocked), antiCheatSet(), Sequence_Step = 6, -1 == Dot_Locations[Current_Stage][3] && (Sequence_Step = 40)), Save_Code3 = genSaveCode(0), Save_Code1 = 1);
    else if (20 == Sequence_Step) {
        drawStage(1);
        drawUI(1);
        q = 12;
        Current_Stage && 20 != Current_Stage && 47 != Current_Stage && 70 != Current_Stage && 77 != Current_Stage || 1 != Current_Screen || (q = 52);
        isMouseHovered(364, 4, 56, 20) ? (Clicked ? Sequence_Step = q : Is_Key_Pressed1[32] && (Sequence_Step = q), TXoutputB(Large_Text, 368, 8, "Option", 16711680, 0)) : Is_Key_Pressed1[32] && (Sequence_Step = q);
        Display_Mode = 1;
        filledRect(128, 42, 256, 151, 3425907507);
        Display_Mode = 0;
        centeredText(Large_Text, 256, 58, "OPTION", 16777215, 0);
        for (a = 0; 4 > a; a++) dispItemCentered(Player_Img, 256 + 32 * a, 78, 24, 24, 24 * getVal(Item_Inv[4 + a], 5), 0, 24, 24, 16777215), colorPortraitWeap(256 + 32 * a - 12, 66, 24 * getVal(Item_Inv[4 + a], 5), getVal(Item_Inv[4 + a], 6));
        centeredText(Large_Text, 180, 98, "Auto move", 16777215, 0);
        b = ["OFF", "ON"];
        for (a = 0; 4 > a; a++) centeredText(Large_Text, 256 + 32 * a, 98, b[Sett_Auto_Move[a]], 16777215, 0), isMouseHoveredCenter(256 + 32 * a, 98, 32, 13) && (centeredText(Large_Text, 256 + 32 * a, 98, b[Sett_Auto_Move[a]], 16711680, 0), Clicked && (Sett_Auto_Move[a] = 1 - Sett_Auto_Move[a]));
        TXoutputB(Large_Text, 128, 108, "  Move of dying: " + b[Sett_Move_If_Dying], 16777215, 0);
        isMouseHovered(128, 108, 256, 13) && (TXoutputB(Large_Text, 128, 108, "  Move of dying: " + b[Sett_Move_If_Dying], 16711680, 0), Sett_Move_If_Dying = cycle(Sett_Move_If_Dying + Sett_Change, 0, 1));
        a = ["PLAYER&ENEMY", "PLAYER", "ENEMY", "OFF"];
        TXoutputB(Large_Text, 128, 121, "  Damage Effect: " + a[Sett_Dmg_Indicators], 16777215, 0);
        isMouseHovered(128, 121, 256, 13) && (TXoutputB(Large_Text, 128, 121, "  Damage Effect: " + a[Sett_Dmg_Indicators], 16711680, 0), Sett_Dmg_Indicators = cycle(Sett_Dmg_Indicators + Sett_Change, 0, 3));
        a = ["OFF", "PLAYER", "ENEMY", "PLAYER&ENEMY"];
        TXoutputB(Large_Text, 128, 134, "  LP Bar       : " + a[Sett_LP_Bar_Disp], 16777215, 0);
        isMouseHovered(128, 134, 256, 13) && (TXoutputB(Large_Text, 128, 134, "  LP Bar       : " + a[Sett_LP_Bar_Disp], 16711680, 0), Sett_LP_Bar_Disp = cycle(Sett_LP_Bar_Disp + Sett_Change, 0, 3));
        a = ["SQUARE", "TRIANGLE", "SHADOW", "OFF"];
        TXoutputB(Large_Text, 128, 147, "  PL Symbol    : " + a[Sett_PL_Symbol], 16777215, 0);
        isMouseHovered(128, 147, 256, 13) && (TXoutputB(Large_Text, 128, 147, "  PL Symbol    : " + a[Sett_PL_Symbol], 16711680, 0), Sett_PL_Symbol = cycle(Sett_PL_Symbol + Sett_Change, 0, 3));
        TXoutputB(Large_Text, 128, 160, "  Drag DeadBody: " + b[Sett_Drag_Dead_Body], 16777215, 0);
        isMouseHovered(128, 160, 256, 13) && (TXoutputB(Large_Text, 128, 160, "  Drag DeadBody: " + b[Sett_Drag_Dead_Body], 16711680, 0), Sett_Drag_Dead_Body = cycle(Sett_Drag_Dead_Body + Sett_Change, 0, 1));
        centeredText(Large_Text, 256, 182, "Space Key: open & close", 12632256, 0);
        isMouseHoveredCenter(256, 182, 256, 13) && (centeredText(Large_Text, 256, 182, "Space Key: open & close", 16711680, 0), Sett_Change && (Sequence_Step = q))
    } else if (30 == Sequence_Step) {
        if (drawStage(0), drawUI(0), 100 > Text_Fade && Text_Fade++, b = floor(255 * Text_Fade / 100), largeMessage(Large_Text, 256, 128, "GAME OVER", 100, 20, 10, b, 200, 0, 0, b, 16, 24), 100 == Text_Fade && Clicked) {
            antiCheatCheck();
            for (a = 0; 4 > a; a++) 0 == LP_Current[a] && (LP_Current[a] = 1);
            antiCheatSet();
            Sequence_Step = 1
        }
    } else if (40 == Sequence_Step) {
        largeMessage(Large_Text, 256, 112, "Congratulation", 204, 148, 73, 255, 100, 0, 0, 255, 16, 24);
        largeMessage(Large_Text, 256, 144, "Game Clear", 204, 148, 73, 255, 100, 0, 0, 255, 16, 24);
        centeredText(Large_Text, 256, 256, "(C) 2008-2017 DAN-BALL", 13407305, 6553600);
        for (a = 0; 4 > a; a++) {
            c = 166 + 60 * a - Players.a[a][2].x;
            d = 224 - Players.a[a][2].y;
            for (b = 0; 21 > b; b++) Players.a[a][b].x += c, Players.a[a][b].y += d;
            drawItem(Terrain_Textures[12], 166 + 60 * a - 12, 233, 24, 8, 0, 0, 24, 8)
        }
        Players.B();
        if (Clicked) {
            antiCheatCheck();
            for (a = 0; 4 > a; a++) 0 == LP_Current[a] && (LP_Current[a] = 1);
            antiCheatSet();
            Sequence_Step = 1
        }
    }
}
WIN.fff = townScreens;

function townScreens() {
    var a, b, shop_left, shop_top, town_stage;
    if (50 == Sequence_Step) Terrain.o(Current_Stage) && (Players.set(0, 16, Terrain.b[0]), Players.set(1, 19, Terrain.b[1]), Players.set(2, 22, Terrain.b[2]), Players.set(3, 25, Terrain.b[3]), Enemies.o(1), Projectiles.a = 0, Indicators.a = 0, Drops.a = 0, Text_Fade = Sign_Touched_Mode = Target_Array_ID = En_Count_From_Max = Target_HP_Max = Target_HP_Current = Drops.f = 0, Sequence_Step++);
    else if (51 == Sequence_Step) drawStage(0), drawUI(0), town_stage = "", Current_Stage ? 20 == Current_Stage ? town_stage = "VILLAGE" : 47 == Current_Stage ? town_stage = "RESORT" : 70 == Current_Stage ? town_stage = "Forget Tree" : 77 == Current_Stage && (town_stage = "ISLAND") : town_stage = "TOWN", screenTransition(255 - floor(255 * minOf(Text_Fade, 30) / 30)), shop_left = 255, 30 > Text_Fade ? shop_left = floor(255 * Text_Fade / 30) : 80 < Text_Fade && (shop_left = 255 - floor(255 * (Text_Fade - 80) / 30)), largeMessage(Large_Text, 256, 128, town_stage, 255, 255, 255, shop_left, 64, 64, 64, shop_left, 16, 24), b = -1024 + floor(512 * Text_Fade / 30), drawLine(b, 112, b + 1024, 112, 8421504), b = 512 - floor(512 * Text_Fade / 30),
        drawLine(b, 141, b + 1024, 141, 8421504), Text_Fade++, 110 == Text_Fade && (Text_Fade = 0, Sequence_Step++);
    else if (52 == Sequence_Step)
        if (drawStage(0), drawUI(0), Sign_Touched_Mode) Sequence_Step = 59;
        else if (isMouseHovered(364, 4, 56, 20)) Clicked ? Sequence_Step = 20 : Is_Key_Pressed1[32] && (Sequence_Step = 20), TXoutputB(Large_Text, 368, 8, "Option", 16711680, 0);
    else if (Is_Key_Pressed1[32]) Sequence_Step = 20;
    else if (isMouseHovered(428, 4, 80, 20)) Clicked && (Sequence_Step = 6), TXoutputB(Large_Text, 432, 8, "World Map", 16711680, 0);
    else if (70 == Current_Stage)
        if (isMouseHoveredCenter(256, 128, 40, 24) && (centeredText(Large_Text, 256, 128, "FORGET", 16711680, 1054740), Clicked && (Sequence_Step = 55, Menu_Entry = Menu_Row = Menu_Column = 0)), isMouseHoveredCenter(256, 160, 40, 24)) {
            var g = 0;
            for (a = 0; 4 > a; a++) g += LP_Max[a] - LP_Current[a];
            centeredText(Large_Text, 256, 160, "INN", 16711680, 1054740);
            TXoutputB(Large_Text, 280, 154, "charge of " + g, 16711680, 1054740);
            if (g <= Team_Gold && Clicked) {
                antiCheatCheck();
                for (a = 0; 4 > a; a++) LP_Current[a] != LP_Max[a] && Indicators.add(Players.a[a][0].x, Players.a[a][0].y, 0, LP_Max[a] - LP_Current[a], 65280), LP_Current[a] = LP_Max[a];
                Team_Gold -= g;
                antiCheatSet()
            }
        } else isMouseHoveredCenter(256, 184, 48, 24) && (centeredText(Large_Text, 256, 184, "BOOK", 16711680, 1054740), Clicked && (Sequence_Step = 54, Menu_Entry = Menu_Row = Menu_Column = 0));
    else if (isMouseHoveredCenter(400, 168, 40, 24)) {
        for (a = g = 0; 4 > a; a++) g += LP_Max[a] - LP_Current[a];
        centeredText(Large_Text, 400, 168, "INN", 16711680, 13800762);
        centeredText(Large_Text, 400, 208, "charge of " + g, 16777215, 3219229);
        if (g <= Team_Gold && Clicked) {
            antiCheatCheck();
            for (a = 0; 4 > a; a++) LP_Current[a] != LP_Max[a] && Indicators.add(Players.a[a][0].x, Players.a[a][0].y, 0, LP_Max[a] - LP_Current[a], 65280), LP_Current[a] = LP_Max[a];
            Team_Gold -= g;
            antiCheatSet()
        }
    } else isMouseHoveredCenter(40, 152, 72, 24) ? (Current_Stage ? 20 == Current_Stage ? centeredText(Large_Text, 40, 152, " COMPO SHOP", 16711680, 13800762) : 47 == Current_Stage ? centeredText(Large_Text, 40, 152, " JUNK SHOP", 16711680, 13800762) : 77 == Current_Stage && centeredText(Large_Text, 40, 152, " COMPO SHOP", 16711680, 13800762) : centeredText(Large_Text, 40, 152, "SHOP", 16711680, 13800762), Clicked && (Sequence_Step = 53, Menu_Entry = Menu_Row = Menu_Column = 0)) : isMouseHoveredCenter(40, 184, 48, 24) && (centeredText(Large_Text, 40, 184, "BOOK", 16711680, 13800762), Clicked && (Sequence_Step = 54, Menu_Entry = Menu_Row = Menu_Column = 0));
    else if (53 == Sequence_Step) {
        drawStage(0);
        town_stage = Sign_Touched_Mode = 0;
        Current_Stage ? 20 == Current_Stage ? town_stage = 1 : 47 == Current_Stage ? town_stage = 2 : 77 == Current_Stage && (town_stage = 3) : town_stage = 0;
        var shop_item = [
            [3, 4, 5, 6, 12, 14, 15, 18],
            [7, 8, 9, 10, 11, 16, 17],
            [3, 4, 5, 6, 12, 14, 15, 18],
            [7, 8, 9, 10, 11, 16, 17]
        ];
        shop_left = 80;
        shop_top = 28;
        Display_Mode = 1;
        filledRect(shop_left - 4, shop_top - 4, 243, 168, 2147483648);
        Display_Mode = 0;
        outlineRect(shop_left + 0, shop_top + 0, 236, 161, 16777215);
        isMouseHovered(shop_left + 8, shop_top + 4, 16 * shop_item[town_stage].length, 12) && (b = floor((Mouse_Xpos - (shop_left + 8)) / 16), Clicked && (Menu_Column = b, Menu_Row = clamp(Menu_Row, 0, floor(Shop_Items[town_stage][Menu_Column].length / 3) - 1)), filledRect(shop_left + 8 + 16 * b, shop_top + 4, 12, 12, 10027008));
        Display_Mode2 = 2;
        for (a = 0; a < shop_item[town_stage].length; a++) dispItem(Drop_Img, shop_left + 8 + 16 * a, shop_top + 4, 12, 12, 12 * shop_item[town_stage][a], 0, 12, 12, 16777215);
        Display_Mode2 = 0;
        outlineRect(shop_left + 8 + 16 * Menu_Column - 1, shop_top + 4 - 1, 14, 14, 10027008);
        drawLine(shop_left + 0, shop_top + 20 - 1, shop_left + 235, shop_top + 20 - 1, 16777215);
        isMouseHovered(shop_left + 120, shop_top + 24, 84, 84) && (b = floor((Mouse_Xpos - (shop_left + 120)) / 28), a = floor((Mouse_Ypos - (shop_top + 24)) / 28), Clicked && (Menu_Entry = 3 * a + b), filledRect(shop_left + 120 + 28 * b, shop_top + 24 + 28 * a, 24, 24, 10027008));
        b = (3 * Menu_Row + Menu_Entry) % Shop_Items[town_stage][Menu_Column].length;
        var shop_item2 = Shop_Items[town_stage][Menu_Column][b];
        g = 1;
        for (a = 0; a < Stage_Count; a++) 0 < (Stage_Status[a] & Beaten) && g < Shop_Reqs[a] && (g = Shop_Reqs[a]);
        !Current_Stage && g <= b && (shop_item2 = 0);
        itemText(shop_left + 8, shop_top + 24, Item_Catalogue[shop_item2][0] + " " + (Item_Catalogue[shop_item2][1] ? Item_Catalogue[shop_item2][1] : ""), -1, 2631720, -2);
        itemText(shop_left + 8, shop_top + 24, Item_Catalogue[shop_item2][0] + " " + (Item_Catalogue[shop_item2][1] ? Item_Catalogue[shop_item2][1] : ""), 16777215, -1, -2);
        a = getVal(shop_item2, 5);
        if (9 == a) TXoutputB(Large_Text, shop_left + 8, shop_top + 40, "Compo Item", -1, 5263440), itemText(shop_left + 8, shop_top + 56, Item_Catalogue[shop_item2][10], -1, 2631720, -2), itemText(shop_left + 8, shop_top + 56, Item_Catalogue[shop_item2][10], 16777215, -1, -2), itemText(shop_left + 8, shop_top + 68, Item_Catalogue[shop_item2][11], -1, 2631720, -2), itemText(shop_left + 8, shop_top + 68, Item_Catalogue[shop_item2][11], 16777215, -1, -2);
        else {
            TXoutputB(Large_Text, shop_left + 8, shop_top + 40, "AT " + Item_Catalogue[shop_item2][10] + "-" + Item_Catalogue[shop_item2][11], 16777215, 0);
            TXoutputB(Large_Text, shop_left + 8, shop_top + 52, "AGI " + Item_Catalogue[shop_item2][14] + "-" + Item_Catalogue[shop_item2][15], 16777215, 0);
            TXoutputB(Large_Text, shop_left + 8, shop_top + 64, "RANGE " + Item_Catalogue[shop_item2][16], 16777215, 0);
            var q = getVal(shop_item2, 34),
                m = getVal(shop_item2, 35),
                l = maxOf(getVal(shop_item2, 36), 0),
                A = getVal(shop_item2, 39),
                z = getVal(shop_item2, 40);
            TXoutputB(Large_Text, shop_left + 8, shop_top + 80, "TYPE " + "physical fire ice thunder poison freeze".split(" ")[q], 16777215, 0);
            TXoutputB(Large_Text, shop_left + 8, shop_top + 92, "AT " + A + "-" + z, 16777215, 0);
            6 == a ? TXoutputB(Large_Text, shop_left + 8, shop_top + 104, "$$ " + l, 16777215, 0) : TXoutputB(Large_Text, shop_left + 8, shop_top + 104, "MP " + l, 16777215, 0);
            2 == q ? TXoutputB(Large_Text, shop_left + 8, shop_top + 116, "SLOW " + m + "%", 16777215, 0) : 4 == q ? TXoutputB(Large_Text, shop_left + 8, shop_top + 116, "TIME " + m / 50 + "s", 16777215, 0) : 5 == q && TXoutputB(Large_Text, shop_left + 8, shop_top + 116, "TIME " + m / 50 + "s", 16777215, 0)
        }
        for (a = 0; 9 > a; a++) q = (3 * Menu_Row + a) % Shop_Items[town_stage][Menu_Column].length, !Current_Stage && g <= q || (Display_Mode2 = 2, dispItem(Item_Img, shop_left + 120 + a % 3 * 28, shop_top + 24 + 28 * floor(a / 3), 24, 24, 24 * getVal(Shop_Items[town_stage][Menu_Column][q], 4), 0, 24, 24, getVal(Shop_Items[town_stage][Menu_Column][q], 6)), Display_Mode2 = 0, Item_Catalogue[Shop_Items[town_stage][Menu_Column][q]][1] && TXoutputB(Small_Text, shop_left + 120 + a % 3 * 28 + 19, shop_top + 24 + 28 * floor(a / 3) + 17, "" + Item_Catalogue[Shop_Items[town_stage][Menu_Column][q]][1], 16777215, -1));
        outlineRect(shop_left + 120 + Menu_Entry % 3 * 28, shop_top + 24 + 28 * floor(Menu_Entry / 3), 24, 24, 10027008);
        g = getVal(shop_item2, 2);
        2 == town_stage && 1 == b && (g *= 10);
        if (isMouseHovered(shop_left + 176 - 56, shop_top + 120 - 10, 108, 20)) {
            if (0 != shop_item2 && g <= Team_Gold && Clicked) {
                antiCheatCheck();
                a = 0;
                if (!town_stage || 2 == town_stage && !b) a = 59;
                Drops.add(40, 200, shop_item2, 0, a);
                Team_Gold -= g;
                antiCheatSet()
            }
            filledRect(shop_left + 176 - 56, shop_top + 120 - 10, 108, 20, 10027008)
        }
        centeredText(Large_Text, shop_left + 176, shop_top + 120, "" + g + "$ BUY", 16777215, 0);
        outlineRect(shop_left + 176 - 56, shop_top + 120 - 10, 108, 20, 10027008);
        var shop_color = 16777215;
        isMouseHovered(shop_left + 216 - 12, shop_top + 36 - 12, 24, 24) && (Clicked && (Menu_Row = cycle(Menu_Row - 1, 0, floor(Shop_Items[town_stage][Menu_Column].length / 3) - 1)), shop_color = 10027008);
        outlineRect(shop_left + 216 - 12, shop_top + 36 - 12, 24, 24, 16777215);
        filledRect(shop_left + 216 - 1, shop_top + 36 - 8, 2, 2, shop_color);
        filledRect(shop_left + 216 - 2, shop_top + 36 - 6, 4, 2, shop_color);
        filledRect(shop_left + 216 - 3, shop_top + 36 - 4, 6, 2, shop_color);
        filledRect(shop_left + 216 - 4, shop_top + 36 - 2, 8, 2, shop_color);
        filledRect(shop_left + 216 - 5, shop_top + 36, 10, 2, shop_color);
        filledRect(shop_left + 216 - 6, shop_top + 38, 12, 2, shop_color);
        filledRect(shop_left + 216 - 7, shop_top + 40, 14, 2, shop_color);
        filledRect(shop_left + 216 - 8, shop_top + 42, 16, 2, shop_color);
        shop_color = 16777215;
        isMouseHovered(shop_left + 216 - 12, shop_top + 92 - 12, 24, 24) && (Clicked && (Menu_Row = cycle(Menu_Row + 1, 0, floor(Shop_Items[town_stage][Menu_Column].length / 3) - 1)), shop_color = 10027008);
        outlineRect(shop_left + 216 - 12, shop_top + 92 - 12, 24, 24, 16777215);
        filledRect(shop_left + 216 - 8, shop_top + 92 - 8, 16, 2, shop_color);
        filledRect(shop_left + 216 - 7, shop_top + 92 - 6, 14, 2, shop_color);
        filledRect(shop_left + 216 - 6, shop_top + 92 - 4, 12, 2, shop_color);
        filledRect(shop_left + 216 - 5, shop_top + 92 - 2, 10, 2, shop_color);
        filledRect(shop_left + 216 - 4, shop_top + 92, 8, 2, shop_color);
        filledRect(shop_left + 216 - 3, shop_top + 94, 6, 2, shop_color);
        filledRect(shop_left + 216 - 2, shop_top + 96, 4, 2, shop_color);
        filledRect(shop_left + 216 - 1, shop_top + 98, 2, 2, shop_color);
        drawLine(shop_left + 0, shop_top + 136 - 1, shop_left + 235, shop_top + 136 - 1, 16777215);
        drawLine(shop_left + 120, shop_top + 136 - 1, shop_left + 120, shop_top + 160, 16777215);
        isMouseHovered(shop_left + 1, shop_top + 136, 120, 24) && 0 != Item_Inv[40] ? (g = floor(getVal(Item_Inv[40], 2) / 8), Clicked && (antiCheatCheck(), Drops.add(40, 200, 1, g, 0), Item_Inv[40] = 0, Comp1_Inv[40] = 0, Comp2_Inv[40] = 0, antiCheatSet()), filledRect(shop_left + 1, shop_top + 136, 119, 24, 10027008), centeredText(Large_Text, shop_left + 60, shop_top + 148, "" + g + "$ SELL", 16777215, 0)) : isMouseHovered(shop_left + 1, shop_top + 136, 120, 24) && 0 == Item_Inv[40] && !Click_To_Sell_Mode ? (Clicked && (Click_To_Sell_Mode = 1), filledRect(shop_left + 1, shop_top + 136, 119, 24, 10027008), centeredText(Large_Text, shop_left + 60, shop_top + 148, "CLICK TO SELL", 16777215, 0)) : isMouseHovered(shop_left + 1, shop_top + 136, 120, 24) && 0 == Item_Inv[40] && 1 == Click_To_Sell_Mode ? (Clicked && (Click_To_Sell_Mode = 0), filledRect(shop_left + 1, shop_top + 136, 119, 24, 10027008), centeredText(Large_Text, shop_left + 60, shop_top + 148, "CANCEL", 16777215, 0)) : 1 == Click_To_Sell_Mode ? centeredText(Large_Text, shop_left + 60, shop_top + 148, "CANCEL", 16777215, 0) : centeredText(Large_Text, shop_left + 60, shop_top + 148, "DRAG TO SELL", 16777215, 0);
        isMouseHovered(shop_left + 121, shop_top + 136, 114, 24) && (Clicked && (Click_To_Sell_Mode = 0, Sequence_Step = 52), filledRect(shop_left + 121, shop_top + 136, 114, 24, 10027008));
        centeredText(Large_Text, shop_left + 176, shop_top + 148, "EXIT", 16777215, 0);
        drawUI(1)
    } else if (54 == Sequence_Step) {
        drawStage(0);
        Sign_Touched_Mode = 0;
        var some_num = 10;
        shop_left = 80;
        shop_top = 28;
        Display_Mode = 1;
        70 == Current_Stage ? filledRect(shop_left - 4, shop_top - 4, 328, 168, 3422552064) : filledRect(shop_left - 4, shop_top - 4, 328, 168, 2147483648);
        Display_Mode = 0;
        outlineRect(shop_left + 0, shop_top + 0, 321, 161, 16777215);
        drawLine(shop_left + 160, shop_top + 0, shop_left + 160, shop_top + 160, 16777215);
        town_stage = "WORLD MAP " + (100 > Menu_Column ? " " : "");
        town_stage += "" + floor(Menu_Column / some_num + 1) + "/" + floor((Stage_In_Book.length - 1) / some_num + 1);
        TXoutputB(Large_Text, shop_left + 20, shop_top + 4, town_stage, -1, 32768);
        isMouseHovered(shop_left + 8, shop_top + 16, 144, 12 * some_num) && (a = floor((Mouse_Ypos - (shop_top + 16)) / 12), Clicked && (Menu_Row = a), filledRect(shop_left + 8, shop_top + 16 + 12 * a, 144, 12, 10027008));
        for (a = 0; a < some_num; a++) town_stage = Stage_In_Book[Menu_Column + a], 0 != town_stage && (0 < (Stage_Status[town_stage] & Beaten) ? TXoutputB(Large_Text, shop_left + 8, shop_top + 16 + 12 * a, Stage_Names[town_stage], 16777215, 0) : TXoutputB(Large_Text, shop_left + 8, shop_top + 16 + 12 * a, "???", 16777215, 0));
        town_stage = Stage_In_Book[Menu_Column + Menu_Row];
        0 != town_stage && (0 < (Stage_Status[town_stage] & Beaten) ? TXoutputB(Large_Text, shop_left + 8, shop_top + 16 + 12 * Menu_Row, Stage_Names[town_stage], 16711680, 0) : TXoutputB(Large_Text, shop_left + 8, shop_top + 16 + 12 * Menu_Row, "???", 16711680, 0));
        drawLine(shop_left + 0, shop_top + 140, shop_left + 160, shop_top + 140, 16777215);
        isMouseHovered(shop_left + 8, shop_top + 144 - 2, 48, 17) && (Clicked && (Menu_Column = cycle(floor(Menu_Column / some_num) - 1, 0, floor((Stage_In_Book.length - 1) / some_num)) * some_num), filledRect(shop_left + 8, shop_top + 144 - 2, 48, 17, 10027008));
        TXoutputB(Large_Text, shop_left + 16, shop_top + 145, "Prev", 16777215, 0);
        isMouseHovered(shop_left + 56, shop_top + 144 - 2, 48, 17) && (Clicked && (Menu_Column = cycle(floor(Menu_Column / some_num) + 1, 0, floor((Stage_In_Book.length - 1) / some_num)) * some_num), filledRect(shop_left + 56, shop_top + 144 - 2, 48, 17, 10027008));
        TXoutputB(Large_Text, shop_left + 64, shop_top + 145, "Next", 16777215, 0);
        isMouseHovered(shop_left + 104, shop_top + 144 - 2, 48, 17) && (Clicked && (Sequence_Step = 52), filledRect(shop_left + 104, shop_top + 144 - 2, 48, 17, 10027008));
        TXoutputB(Large_Text, shop_left + 112, shop_top + 145, "EXIT", 16777215, 0);
        if (0 != town_stage)
            if (0 < (Stage_Status[town_stage] & Bookede)) {
                some_num = Book_Indexer[town_stage + 1] - Book_Indexer[town_stage];
                for (a = some_num - 1; 0 <= a; a--) some_num -= EN_Info[Book_Indexer[town_stage] + a][En_2nd_Att];
                g = shop_left + 80 - 16 * some_num;
                isMouseHovered(g + 160, shop_top + 0, 32 * some_num, 52) && (b = floor((Mouse_Xpos - (g + 160)) / 32), Clicked && (Menu_Entry = b), filledRect(g + 160 + 32 * b + 2, shop_top + 2, 28, 52, 10027008));
                filledRect(g + 160 + 32 * Menu_Entry + 2, shop_top + 50, 28, 4, 10027008);
                Menu_Entry = clamp(Menu_Entry, 0, some_num - 1);
                for (a = 0; a < some_num; a++) drawItem(Terrain_Textures[Stage_Spawns[town_stage][Stage_Spawns[town_stage].length - 1][0]], g + 164 + 32 * a, shop_top + 44, 24, 8, 0, 0, 24, 8);
                some_num = Book_Indexer[town_stage + 1] - Book_Indexer[town_stage];
                for (b = a = 0; a < some_num; a++, b++) ENdrawIcon(Book_Indexer[town_stage] + a, g + 176 + 32 * b, shop_top + 44 - 1, 0), a += EN_Info[Book_Indexer[town_stage] + a][En_2nd_Att];
                town_stage = Book_Indexer[town_stage] + Menu_Entry;
                TXoutputB(Large_Text, shop_left + 164, shop_top + 56, "Lv   " + EN_Info[town_stage][EN_Lvl], 16777215, 0);
                TXoutputB(Large_Text, shop_left + 164, shop_top + 68, "LP   " + EN_Info[town_stage][EN_LP], 16777215, 0);
                TXoutputB(Large_Text, shop_left + 164, shop_top + 80, "GOLD " + EN_Info[town_stage][En_Gold], 16777215, 0);
                TXoutputB(Large_Text, shop_left + 164, shop_top + 92, "EXP  " + EN_Info[town_stage][EN_EXP], 16777215, 0);
                TXoutputB(Large_Text, shop_left + 164, shop_top + 108, "Drop Item", 16777215, 0);
                for (b = a = 0; 6 > a; a += 2) some_num = EN_Info[town_stage][En_Drop1 + a], 0 != some_num && (Display_Mode2 = 2, dispItem(Drop_Img, shop_left + 164, shop_top + 4 * (30 + 3 * b), 12, 12, 12 * getVal(some_num, 3), 0, 12, 12, getVal(some_num, 6)), Display_Mode2 = 0, itemText(shop_left + 164, shop_top + 4 * (30 + 3 * b), "  " + Item_Catalogue[some_num][0] + " " + (Item_Catalogue[some_num][1] ? Item_Catalogue[some_num][1] : ""), 16777215, 0, -1), b++);
                TXoutputB(Large_Text, shop_left + 256, shop_top + 56, "strong", 16777215, 0);
                0 < EN_Info[town_stage][Ph_Resist] && TXoutputB(Small_Text, shop_left + 256, shop_top + 70, "Ph          ", 8421504, 0);
                0 < EN_Info[town_stage][Fi_Resist] && TXoutputB(Small_Text, shop_left + 256, shop_top + 70, "  Fi        ", 16711680, 0);
                0 < EN_Info[town_stage][Ic_Resist] && TXoutputB(Small_Text, shop_left + 256, shop_top + 70, "    Ic      ", 2105599, 0);
                0 < EN_Info[town_stage][Th_Resist] && TXoutputB(Small_Text, shop_left + 256, shop_top + 70, "      Th    ", 16777024, 0);
                0 < EN_Info[town_stage][Po_Resist] && TXoutputB(Small_Text, shop_left + 256, shop_top + 70, "        Po  ", 65280, 0);
                0 < EN_Info[town_stage][Fr_Resist] && TXoutputB(Small_Text, shop_left + 256, shop_top + 70, "          Fr", 12632319, 0);
                TXoutputB(Large_Text, shop_left + 256, shop_top + 80, "weak", 16777215, 0);
                0 > EN_Info[town_stage][Ph_Resist] && TXoutputB(Small_Text, shop_left + 256, shop_top + 94, "Ph          ", 8421504, 0);
                0 > EN_Info[town_stage][Fi_Resist] && TXoutputB(Small_Text, shop_left + 256, shop_top + 94, "  Fi        ", 16711680, 0);
                0 > EN_Info[town_stage][Ic_Resist] && TXoutputB(Small_Text, shop_left + 256, shop_top + 94, "    Ic      ", 2105599, 0);
                0 > EN_Info[town_stage][Th_Resist] && TXoutputB(Small_Text, shop_left + 256, shop_top + 94, "      Th    ", 16777024, 0);
                0 > EN_Info[town_stage][Po_Resist] && TXoutputB(Small_Text, shop_left + 256, shop_top + 94, "        Po  ", 65280, 0);
                0 > EN_Info[town_stage][Fr_Resist] && TXoutputB(Small_Text, shop_left + 256, shop_top + 94, "          Fr", 12632319, 0)
            } else 0 < (Stage_Status[town_stage] & Beaten) ? (centeredText(Large_Text, shop_left + 240, shop_top + 40, "Information fee", 16777215, 0), g = 1E3 * (Menu_Column + Menu_Row + 1), isMouseHoveredCenter(shop_left + 240, shop_top + 80, 160, 160) && (g <= Team_Gold && Clicked && (antiCheatCheck(), Stage_Status[town_stage] |= Bookede, Team_Gold -= g, antiCheatSet()), filledRectCentered(shop_left + 240, shop_top + 80, 120, 32, 10027008)), centeredText(Large_Text, shop_left + 240, shop_top + 80, "" + g + "$ BUY", 16777215, 0)) : (centeredText(Large_Text, shop_left + 240, shop_top + 40, "?????", 16777215, 0), centeredText(Large_Text, shop_left + 240, shop_top + 80, "???", 16777215, 0));
        drawUI(1)
    } else if (55 == Sequence_Step) {
        drawStage(0);
        Sign_Touched_Mode = 0;
        shop_left = 80;
        shop_top = 28;
        Display_Mode = 1;
        filledRect(shop_left - 4, shop_top - 4, 328, 168, 3422552064);
        Display_Mode = 0;
        outlineRect(shop_left + 0, shop_top + 0, 321, 161, 16777215);
        drawLine(shop_left + 160, shop_top + 0, shop_left + 160, shop_top + 160, 16777215);
        shop_left = 100;
        shop_top = 60;
        for (a = 0; 4 > a; a++) isMouseHovered(shop_left + 32 * a - 4, shop_top + 0 - 4, 32, 32) ? (filledRect(shop_left + 32 * a, shop_top + 0, 24, 24, 10027008), Clicked && (Menu_Column = a)) : filledRect(shop_left + 32 * a, shop_top + 0, 24, 24, 0), dispItem(Player_Img, shop_left + 32 * a, shop_top, 24, 24, 24 * getVal(Item_Inv[4 + a], 5), 0, 24, 24, 16777215), colorPortraitWeap(shop_left + 32 * a, shop_top, 24 * getVal(Item_Inv[4 + a], 5), getVal(Item_Inv[4 + a], 6));
        outlineRect(shop_left + 32 * Menu_Column - 1, shop_top - 1, 26, 26, 16711680);
        TXoutputB(Large_Text, shop_left, shop_top - 16, Class_Name_List[getVal(Item_Inv[4 + Menu_Column], 5)], 16777215, 0);
        shop_left = 100;
        shop_top = 74;
        TXoutputB(Large_Text, shop_left, shop_top + 16, "LP  " + LP_SP[Menu_Column], 16777215, 0);
        TXoutputB(Large_Text, shop_left, shop_top + 28, "STR " + STR_SP[Menu_Column], 16777215, 0);
        TXoutputB(Large_Text, shop_left, shop_top + 40, "DEX " + DEX_SP[Menu_Column], 16777215, 0);
        TXoutputB(Large_Text, shop_left, shop_top + 52, "MAG " + MAG_SP[Menu_Column], 16777215, 0);
        TXoutputB(Large_Text, shop_left, shop_top + 68, "LV  " + LV[0], 16777215, 0);
        TXoutputB(Large_Text, shop_left, shop_top + 68, "        SP " + SP[Menu_Column], 16777215, 0);
        shop_left = 80;
        shop_top = 28;
        drawLine(shop_left + 0, shop_top + 140, shop_left + 160, shop_top + 140, 16777215);
        isMouseHovered(shop_left + 56, shop_top + 144 - 2, 48, 17) && (Clicked && (Sequence_Step = 52), filledRect(shop_left + 56, shop_top + 144 - 2, 48, 17, 10027008));
        TXoutputB(Large_Text, shop_left + 64, shop_top + 145, "EXIT", 16777215, 0);
        g = 1E3 * (LP_SP[Menu_Column] + STR_SP[Menu_Column] + DEX_SP[Menu_Column] + MAG_SP[Menu_Column]);
        isMouseHoveredCenter(shop_left + 240, shop_top + 80, 120, 32) && 0 < g && (g <= Team_Gold && Clicked && (antiCheatCheck(), SP[Menu_Column] += LP_SP[Menu_Column] + STR_SP[Menu_Column] + DEX_SP[Menu_Column] + MAG_SP[Menu_Column], LP_SP[Menu_Column] = 0, STR_SP[Menu_Column] = 0, DEX_SP[Menu_Column] = 0, MAG_SP[Menu_Column] = 0, Team_Gold -= g, antiCheatSet()), filledRectCentered(shop_left + 240, shop_top + 80, 120, 32, 10027008));
        centeredText(Large_Text, shop_left + 240, shop_top + 72, "Forget", 16777215, 0);
        centeredText(Large_Text, shop_left + 240, shop_top + 88, "" + g + "$ BUY", 16777215, 0);
        drawUI(1)
    } else 59 == Sequence_Step && (drawStage(0), drawUI(0), screenTransition(floor(255 * Text_Fade / 30)), Text_Fade++, 30 == Text_Fade && (Text_Fade = Current_Screen = Sign_Touched_Mode = 0, Sequence_Step = 6, antiCheatCheck(), Stage_Status[Current_Stage] |= Beaten, 0 < Dot_Locations[Current_Stage][3] && (Stage_Status[Dot_Locations[Current_Stage][3]] |= Unlocked), 0 < Dot_Locations[Current_Stage][4] && (Stage_Status[Dot_Locations[Current_Stage][4]] |= Unlocked), antiCheatSet(), Save_Code3 = genSaveCode(0), Save_Code1 = 1))
}
WIN.fff = PvPscreens;

function PvPscreens() {
    var a, b, c;
    if (70 == Sequence_Step) Current_Stage = 0, Current_Screen = 1, Terrain.o(Current_Stage) && (Players.set(0, 26, Terrain.b[0]), Players.set(1, 30, Terrain.b[1]), Players.set(2, 34, Terrain.b[2]), Players.set(3, 38, Terrain.b[3]), Enemies.o(1), Projectiles.a = 0, Indicators.a = 0, Drops.a = 0, Text_Fade = Sign_Touched_Mode = Target_Array_ID = En_Count_From_Max = Target_HP_Max = Target_HP_Current = Drops.f = 0, Sequence_Step++);
    else if (71 == Sequence_Step || 72 == Sequence_Step || 73 == Sequence_Step || 74 == Sequence_Step)
        if (TRdrawTerrain(), Players.G(), DPmain(), INmain(), PJmain(), DPrenderDrops(), Players.B(), PJrenderProjectiles(), INoutput(), drawUI(0), 71 == Sequence_Step) VS_Upload_Errors ? Game_Language ? 100 == VS_Upload_Errors ? doVSModeText(VSMODECODE11, "\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f") : 1 == VS_Upload_Errors ? doVSModeText(VSMODECODE11, "\u30e6\u30fc\u30b6\u30fc\u767b\u9332\u304c\u5fc5\u8981\u3067\u3059") : 2 == VS_Upload_Errors ? doVSModeText(VSMODECODE11, "1\u65e5\u306b1\u56de\u306e\u307f\u3067\u3059") : 3 == VS_Upload_Errors ? doVSModeText(VSMODECODE11, "10\u4ef6\u4ee5\u4e0a\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u51fa\u6765\u307e\u305b\u3093") : doVSModeText(VSMODECODE11, "\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u51fa\u6765\u307e\u305b\u3093") : 100 == VS_Upload_Errors ? doVSModeText(VSMODECODE11, "The upload has been completed.") : 1 == VS_Upload_Errors ? doVSModeText(VSMODECODE11, "User registration is required.") : 2 == VS_Upload_Errors ? doVSModeText(VSMODECODE11, "1 time in 1 day only.") : 3 == VS_Upload_Errors ? doVSModeText(VSMODECODE11, "Cannot upload more than 10 posts.") : doVSModeText(VSMODECODE11, "Cannot upload.") : Game_Language ? doVSModeText(VSMODECODE11, "\u30b3\u30e1\u30f3\u30c8\u3092\u8a18\u5165\u3057\u3066\uff2f\uff2b\u3092\u62bc\u3057\u3066\u4e0b\u3055\u3044") : doVSModeText(VSMODECODE11, "Enter comments and click OK."), Sequence_Step++;
        else if (72 == Sequence_Step) {
        if (filledRectCentered(256, 100, 300, 100, 8421504), centeredText(Large_Text, 256, 70, "UPLOAD", 16752800, 0), dispItemCentered(VSMODECODE11, 256, 90, VSMODECODE11.a, 16, 0, 0, VSMODECODE11.a, 16, 0), !VS_Upload_Errors) {
            b = prompt_res;
            filledRect(136, 108, 240, 16, 16777215);
            outlineRect(135, 107, 242, 18, 0);
            if (isMouseHovered(136, 108, 240, 16) && (outlineRect(135, 107, 242, 18, 16711680), Released)) {
                c = null;
                try {
                    c = prompt("UPLOAD", b)
                } catch (g) {}
                null != c && (b = c)
            }
            doVSModeText(VS_Image, b);
            dispItem(VS_Image, 137, 108, 238, 16, 0, 0, 238, 16, 0);
            prompt_res = b;
            b = isMouseHoveredCenter(256, 140, 16, 12);
            centeredText(Large_Text, 256, 140, "OK", b ? 16711680 : 16777215, 0);
            if (b && Released)
                if (2 > prompt_res.length) Game_Language ? doVSModeText(VSMODECODE11, "\u30b3\u30e1\u30f3\u30c8\u3092\uff12\u6587\u5b57\u4ee5\u4e0a\u8a18\u5165\u3057\u3066\u4e0b\u3055\u3044") : doVSModeText(VSMODECODE11, "The comment must be longer than 2 characters.");
                else {
                    b = prompt_res;
                    c = 0;
                    a = b.length;
                    for (var d = 0; d < a; d++) {
                        var e = b.charCodeAt(d);
                        c = 0 <= e && 128 >= e || 65377 <= e && 65439 >= e ? c + 1 : c + 2
                    }
                    20 < c ? Game_Language ? doVSModeText(VSMODECODE11, "\u30b3\u30e1\u30f3\u30c8\u3092\uff11\uff10\u6587\u5b57\u4ee5\u4e0b\u3067\u8a18\u5165\u3057\u3066\u4e0b\u3055\u3044") : doVSModeText(VSMODECODE11, "The comment must be shorter than 10 characters.") : Sequence_Step++
                }
        }
    } else 73 == Sequence_Step ? (b = encodeURIComponent(prompt_res), b.length ? 0 == Item_Inv[4] || 0 == Item_Inv[5] || 0 == Item_Inv[6] || 0 == Item_Inv[7] ? (Game_Language ? doVSModeText(VSMODECODE11, "\u6b66\u5668\u3092\u88c5\u5099\u3057\u3066\u4e0b\u3055\u3044") : doVSModeText(VSMODECODE11, "Equip a weapon."), Sequence_Step = 72) : (antiCheatCheck(), Save_Code3 = genSaveCode(1), c = chrCode(47, 115, 99, 111, 114, 101, 47, 114, 97, 110, 103, 101, 114, 95, 101, 110, 116, 114, 121, 46, 112, 104, 112, 63, 97, 61), c += Game_ID_1, c += chr_and_b_equal + (Game_Language ? "0" : "1"), c += chr_and_c_equal + b, c += chr_and_d_equal + Save_Code3, logCopyright(c), funct_Dg(c), Sequence_Step++) : (Game_Language ? doVSModeText(VSMODECODE11, "\u30a8\u30e9\u30fc") : doVSModeText(VSMODECODE11, "Error"), Sequence_Step = 72)) : 74 == Sequence_Step && Global_Eg && (VS_Upload_Errors = "ok" == VS_result[0] ? 100 : "err1" == VS_result[0] ? 1 : "err2" == VS_result[0] ? 2 : "err3" == VS_result[0] ? 3 : "err4" == VS_result[0] ? 4 : "err5" == VS_result[0] ? 5 : 6, Sequence_Step = 71);
    else if (60 == Sequence_Step) {
        if (Current_Stage = 0, Current_Screen = 1, Terrain.o(Current_Stage)) {
            Players.set(0, 10, Terrain.b[0]);
            Players.set(1, 11, Terrain.b[1]);
            Players.set(2, 12, Terrain.b[2]);
            Players.set(3, 13, Terrain.b[3]);
            Players.set(4, 53, Terrain.b[0]);
            Players.set(5, 52, Terrain.b[1]);
            Players.set(6, 51, Terrain.b[2]);
            Players.set(7, 50, Terrain.b[3]);
            setRangersUI();
            antiCheatCheck();
            for (a = 0; 8 > a; a++) LP_Current[a] = LP_Max[a];
            for (a = 0; 8 > a; a++) MP_Bar[a] = 0;
            Team_Gold = 9999999;
            antiCheatSet();
            Enemies.o(1);
            Projectiles.a = 0;
            Indicators.a = 0;
            Drops.a = 0;
            Text_Fade = Sign_Touched_Mode = Target_Array_ID = En_Count_From_Max = Target_HP_Max = Target_HP_Current = Drops.f = 0;
            Sequence_Step++
        }
    } else if (61 == Sequence_Step || 62 == Sequence_Step || 63 == Sequence_Step || 64 == Sequence_Step)
        for (TRdrawTerrain(), 61 == Sequence_Step && (Players.N = 1), Players.G(), INmain(), PJmain(), Players.N = 0, Players.B(), PJrenderProjectiles(), INoutput(), setRangersUI(), 61 == Sequence_Step ? (Text_Fade = clamp(Text_Fade + 1, 0, 30), a = floor(255 * Text_Fade / 30), drawLine(0, 110, floor(512 * Text_Fade / 30), 110, 8421504), drawLine(512 - floor(512 * Text_Fade / 30), 143, 512, 143, 8421504), isMouseHoveredCenter(256, 127, 512, 32) && 30 == Text_Fade ? (Clicked && (Sequence_Step++, Text_Fade = 0), filledRectCentered(256, 127, 512, 32, 8388608), largeMessage(Large_Text, 256, 128, "FIGHT", 255, 255, 255, 255, 0, 0, 0, 255, 16, 24)) : largeMessage(Large_Text, 256, 128, "READY", 255, 255, 255, a, 0, 0, 0, a, 16, 24), Display_Mode = 1, b = 110, c = 120, doVSModeText(VSMODECODE11, Player_Name), dispItemCentered(VSMODECODE11, b, c + 0 - 2, VSMODECODE11.a, 16, 0, 0, VSMODECODE11.a, 16, a << 24 | 16777215), doVSModeText(VSMODECODE12, VS_Player_Team_Name), dispItemCentered(VSMODECODE12, b, c + 16 - 2, VSMODECODE12.a, 16, 0, 0, VSMODECODE12.a, 16, a << 24 | 16777215), b = 402, doVSModeText(VSMODECODE13, VS_Opponent_Name), dispItemCentered(VSMODECODE13, b, c + 0 - 2, VSMODECODE13.a, 16, 0, 0, VSMODECODE13.a, 16, a << 24 | 16777215), doVSModeText(VSMODECODE14, VS_Opponent_Team_Name), dispItemCentered(VSMODECODE14, b, c + 16 - 2, VSMODECODE14.a, 16, 0, 0, VSMODECODE14.a, 16, a << 24 | 16777215), Display_Mode = 0) : 62 == Sequence_Step ? 0 == LP_Current[0] + LP_Current[1] + LP_Current[2] + LP_Current[3] ? (VSMODECODE8 = 2, Sequence_Step++) : 0 == LP_Current[4] + LP_Current[5] + LP_Current[6] + LP_Current[7] && (VSMODECODE8 = 1, Sequence_Step++) : 63 == Sequence_Step ? (VS_Upload_Errors || (VS_Upload_Errors = 1, c = chrCode(47, 115, 99, 111, 114, 101, 47, 114, 97, 110, 103, 101, 114, 95, 118, 115, 46, 112, 104, 112, 63, 97, 61), c += Game_ID_1, c += chr_and_b_equal + (Game_Language ? "0" : "1"), c += chr_and_c_equal + VS_Player_Team_ID, c += chr_and_d_equal + VS_Opponent_Team_ID, 0 != Item_Inv[4] && 0 != Item_Inv[5] && 0 != Item_Inv[6] && 0 != Item_Inv[7] && (c += chr_and_e_equal + vsUploadCode(VSMODECODE8)), logCopyright(c), funct_Dg(c)), Sequence_Step++) : 64 == Sequence_Step && (Text_Fade = clamp(Text_Fade + 1, 0, 50), a = floor(255 * Text_Fade / 50), isMouseHoveredCenter(256, 128, 96, 32) && 50 == Text_Fade && (Clicked && (Sequence_Step = 60), filledRectCentered(256, 128, 96, 32, 8388608)), outlineRectCentered(256, 128, 96, 32, 0 | floor(a / 2) << 16), largeMessage(Large_Text, 256, 129, "RETRY", 255, 255, 255, a, 0, 0, 0, a, 16, 24), b = 60, c = 72, Display_Mode = 1, dispItem(VSMODECODE11, b, c + 0 - 2, VSMODECODE11.a, 16, 0, 0, VSMODECODE11.a, 16, a << 24 | 16777215), Display_Mode = 0, largeMessage(Large_Text, b + 60, c + 40, 1 == VSMODECODE8 ? "WIN" : "LOSE", 255, 255, 255, a, 1 == VSMODECODE8 ? 255 : 0, 0, 1 == VSMODECODE8 ? 0 : 255, a, 32, 48), Global_Eg && ("ok" == VS_result[0] ? (TXoutputM(Large_Text, b, c + 64, "" + VS_result[1] + " win " + VS_result[2] + " lose", 255, 255, 255, a, 0, 0, 0, a, 8, 12), TXoutputM(Large_Text, b, c + 80, "Winning per " + VS_result[3] + "%", 255, 255, 255, a, 0, 0, 0, a, 8, 12)) : TXoutputM(Large_Text, b, c + 64, " RANKING ERROR", 255, 255, 255, a, 0, 0, 0, a, 8, 12)), b = 332, Display_Mode = 1, dispItem(VSMODECODE13, b, c + 0 - 2, VSMODECODE13.a, 16, 0, 0, VSMODECODE13.a, 16, a << 24 | 16777215), Display_Mode = 0, largeMessage(Large_Text, b + 60, c + 40, 2 == VSMODECODE8 ? "WIN" : "LOSE", 255, 255, 255, a, 2 == VSMODECODE8 ? 255 : 0, 0, 2 == VSMODECODE8 ? 0 : 255, a, 32, 48), Global_Eg && ("ok" == VS_result[0] ? (TXoutputM(Large_Text, b, c + 64, "" + VS_result[4] + " win " + VS_result[5] + " lose", 255, 255, 255, a, 0, 0, 0, a, 8, 12), TXoutputM(Large_Text, b, c + 80, "Winning per " + VS_result[6] + "%", 255, 255, 255, a, 0, 0, 0, a, 8, 12)) : TXoutputM(Large_Text, b, c + 64, " RANKING ERROR", 255, 255, 255, a, 0, 0, 0, a, 8, 12))), filledRect(0, 257, 512, 126, [13407305, 9480368, 7241784, 10993609, 11302740, 24586, 7297069, 7297069, 10053120][Stage_Spawns[Current_Stage][Current_Screen][0]]), TXoutputM(Small_Text, 10, 374, chr_C_DAN_BALL, 0, 0, 0, 0, 0, 0, 0, 128, 5, 7), largeMessage(Large_Text, 256, 328, "VS", 255, 255, 255, 255, 0, 0, 0, 255, 16, 24), b = 40, c = 268, dispItem(VSMODECODE11, b, c + 0 - 2, VSMODECODE11.a, 16, 0, 0, VSMODECODE11.a, 16, 0), TXoutputB(Large_Text, b, c + 16, "LV " + LV[0], 16777215, 0), TXoutputB(Large_Text, b, c + 16, "        FP " + FP[0], 16777215, 0), doVSModeText(VSMODECODE15, "\u300c " + VS_Player_Team_Name + " \u300d"), dispItemCentered(VSMODECODE15, b + 60, c + 88, VSMODECODE15.a, 16, 0, 0, VSMODECODE15.a, 16, 0), b = 206, largeMessage(Large_Text, b, c + 22, "Rank", 0, 0, 0, 0, 0, 0, 0, 128, 8, 12), largeMessage(Large_Text, b, c + 60, "" + Rank_List[Rank[0]], 0, 0, 0, 0, 0, 0, 0, 80, 32, 48), b = 352, dispItem(VSMODECODE13, b, c + 0 - 2, VSMODECODE13.a, 16, 0, 0, VSMODECODE13.a, 16, 0), TXoutputB(Large_Text, b, c + 16, "LV " + LV[1], 16777215, 0), TXoutputB(Large_Text, b, c + 16, "        FP " + FP[1], 16777215, 0), doVSModeText(VSMODECODE16, "\u300c " + VS_Opponent_Team_Name + " \u300d"), dispItemCentered(VSMODECODE16, b + 60, c + 88, VSMODECODE16.a, 16, 0, 0, VSMODECODE16.a, 16, 0), b = 306, largeMessage(Large_Text, b, c + 22, "Rank", 0, 0, 0, 0, 0, 0, 0, 128, 8, 12), largeMessage(Large_Text, b, c + 60, "" + Rank_List[Rank[1]], 0, 0, 0, 0, 0, 0, 0, 80, 32, 48), b = 40, c = 316, a = 0; 8 > a; a++) 4 <= a && (b = 224), filledRect(b + 32 * a, c - 12, floor(24 * LP_Current[a] / LP_Max[a]), 4, 8388608), d = maxOf(getVal(Item_Inv[4 + a], 36), 1), e = getVal(Item_Inv[4 + a], 5), 4 != e && 5 != e && 6 != e && filledRect(b + 32 * a, c - 6, floor(23 * MP_Bar[a] / d) + 1, 2, 128), filledRect(b + 32 * a, c + 0, 24, 24, 0), dispItem(Player_Img, b + 32 * a, c, 24, 24, 24 * getVal(Item_Inv[4 + a], 5), 0, 24, 24, 16777215), colorPortraitWeap(b + 32 * a, c, 24 * getVal(Item_Inv[4 + a], 5), getVal(Item_Inv[4 + a], 6))
}

function menuCredits() {
    filledRect(0, 368, 512, 16, 0);
    centeredText(Large_Text, 256, 376, chr_Copyright_DAN_BALL, -1, 6697728)
}
WIN.fff = drawStage;

function drawStage(a) {
    var b;
    TRdrawTerrain();
    if (!Current_Stage && 1 == Current_Screen || 20 == Current_Stage && 1 == Current_Screen || 47 == Current_Stage && 1 == Current_Screen || 77 == Current_Stage && 1 == Current_Screen) dispItemCentered(Hut_Img, 400, 183, 117, 84, 0, 0, 78, 56, 16777215), dispItemCentered(Hut_Img, 40, 170, 156, 112, 0, 0, 78, 56, 16777215), centeredText(Large_Text, 400, 168, "INN", 16777215, 13800762), Current_Stage ? 20 == Current_Stage ? centeredText(Large_Text, 40, 152, " COMPO SHOP", 16777215, 13800762) : 47 == Current_Stage ? centeredText(Large_Text, 40, 152, " JUNK SHOP", 16777215, 13800762) : 77 == Current_Stage && centeredText(Large_Text, 40, 152, " COMPO SHOP", 16777215, 13800762) : centeredText(Large_Text, 40, 152, "SHOP", 16777215, 13800762), centeredText(Large_Text, 40, 184, "BOOK", 16777215, 13800762);
    70 == Current_Stage && 1 == Current_Screen && (dispItem(Forget_Tree_Img, 0, -288, 512, 512, 0, 0, 64, 64, 16777215), 52 == Sequence_Step && (centeredText(Large_Text, 256, 128, "FORGET", 16777215, 1054740), centeredText(Large_Text, 256, 160, "INN", 16777215, 1054740), centeredText(Large_Text, 256, 184, "BOOK", 16777215, 1054740)));
    0 == a && (Players.G(), Enemies.L(), DPmain(), INmain(), PJmain());
    b = Terrain;
    if (55 != b.c && 89 != b.c && Current_Screen != Stage_Spawns[b.c].length - 1 || 0 == Enemies.i) {
        var c;
        c = 7 == Stage_Spawns[Current_Stage][Current_Screen][1] ? 8 * b.b[63] - 16 : 8 * b.g[63] - 16;
        drawItem(Sign_Img, 480, c, 32, 24, 0, 0, 32, 24);
        Current_Screen == Stage_Spawns[b.c].length - 1 ? 88 == b.c ? centeredText(Small_Text, 496, c + 8, "END", 0, -1) : centeredText(Small_Text, 496, c + 8, "MAP", 0, -1) : Current_Screen == Stage_Spawns[b.c].length - 2 ? centeredText(Small_Text, 496, c + 8, "BOSS", 0, -1) : centeredText(Small_Text, 496, c + 8, "NEXT", 0, -1)
    }
    Enemies.K();
    DPrenderDrops();
    Players.B();
    PJrenderProjectiles();
    var d = Terrain,
        e, g, h;
    h = Game_Canvas;
    switch (d.c) {
        case 15:
        case 16:
        case 30:
        case 31:
        case 32:
        case 33:
        case 66:
        case 67:
        case 68:
        case 69:
            Display_Mode = 1;
            Display_Mode2 = 3;
            Game_Canvas = Stage_Eff_Canvas.l;
            b = randomRange(1.7, 3.69);
            b = b * b * b * b;
            dispItemCentered(Projectiles_Img, randomRange(0, 512), 256 - b, 256, 32, 96, 0, 16, 16, 150994943);
            e = 131072;
            if (3 > random(100))
                for (b = 32768; b < e; b++) Game_Canvas[b] = 250 * Game_Canvas[b] >> 8;
            Game_Canvas = h;
            for (b = 32768; b < e; b++) d = Stage_Eff_Canvas.l[b] & 255, c = Game_Canvas[b] >> 16 & 255, h = ((255 - c) * d >> 8) + c, c = Game_Canvas[b] >> 8 & 255, g = ((255 - c) * d >> 8) + c, c = Game_Canvas[b] & 255, c = ((255 - c) * d >> 8) + c, Game_Canvas[b] = h << 16 | g << 8 | c;
            Display_Mode = Display_Mode2 = 0;
            break;
        case 17:
        case 18:
        case 19:
        case 48:
        case 49:
        case 50:
        case 83:
        case 84:
            Game_Canvas = Stage_Eff_Canvas.l;
            e = 131072;
            for (b = 0; b < e; b++) Game_Canvas[b] = 255;
            Display_Mode = Display_Mode2 = 3;
            for (b = 0; 4 > b; b++) dispItemCentered(Projectiles_Img, Players.a[b][0].x, Players.a[b][0].y, 80, 80, 33, 1, 14, 14, 3238002687);
            for (b = 0; b < Projectiles.a; b++) 1 != Projectiles.g[b] && dispItemCentered(Projectiles_Img, Projectiles.b[b].x, Projectiles.b[b].y, 32, 32, 33, 1, 14, 14, 2164260863);
            for (b = 0; 4 > b; b++)
                if (8 == Players.f[b])
                    for (c = 0; 6 > c; c++) 0 != Players.s[b][c] && dispItemCentered(Projectiles_Img, Players.a[b][15 + c].x, Players.a[b][15 + c].y, 32, 32, 33, 1, 14, 14, 2164260863);
            for (b = 0; b < Drops.a; b++) dispItemCentered(Projectiles_Img, Drops.b[b].x, Drops.b[b].y - 6, 32, 32, 33, 1, 14, 14, 4294967295);
            dispItemCentered(Projectiles_Img, Mouse_Xpos, Mouse_Ypos, 80, 80, 33, 1, 14, 14, 3238002687);
            Game_Canvas = h;
            Display_Mode = 1;
            for (b = 0; b < e; b++) d = Stage_Eff_Canvas.l[b], 255 == d ? Game_Canvas[b] = 251658240 : (c = Game_Canvas[b] >> 16 & 255, h = (-c * d >> 8) + c, c = Game_Canvas[b] >> 8 & 255, g = (-c * d >> 8) + c, c = Game_Canvas[b] & 255, c = (-c * d >> 8) + c, Game_Canvas[b] = h << 16 | g << 8 | c);
            Display_Mode = Display_Mode2 = 0;
            break;
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 40:
        case 41:
        case 43:
            b = 1 * Time_Desert_Haze & 511;
            for (g = 0; 256 > g; g++) {
                c = 512 * g;
                h = ~~(4 * Xe_arr[b][1] + .5);
                for (e = 0; 512 > e; e++) Stage_Eff_Canvas.l[c + e] = Game_Canvas[c + clamp(e + h, 0, 511)];
                b = b + 6 & 511
            }
            e = 131072;
            for (c = 0; c < e; c++) Game_Canvas[c] = Stage_Eff_Canvas.l[c];
            break;
        case 51:
        case 52:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
            e = 1;
            57 == d.c ? e = 2 : 58 == d.c ? e = 2 : 59 == d.c ? e = 2 : 60 == d.c ? e = 3 : 61 == d.c && (e = 3);
            for (b = 0; b < e; b++) Stage_Eff_Canvas.l[floor(random(24576))] = 1;
            for (b = 114687; 0 <= b; b--) 1 == Stage_Eff_Canvas.l[b] && ((g = Terrain.a[b >> 12][(b & 511) >> 3], -1 == g || 0 == g && 3 > (b & 7) && 3 > (b >> 9 & 7) || 2 == g && 4 < (b & 7) && 3 > (b >> 9 & 7)) ? !(50 > random(100)) && (c = 57 == d.c || 58 == d.c || 61 == d.c ? b + 512 + floor(random(4)) - 2 : b + 512 + floor(random(3)) - 1, 1 != Stage_Eff_Canvas.l[c] && (g = Terrain.a[c >> 12][(c & 511) >> 3], -1 == g || 0 == g && 3 > (c & 7) && 3 > (c >> 9 & 7) || 2 == g && 4 < (c & 7) && 3 > (c >> 9 & 7))) && (Stage_Eff_Canvas.l[c] = Stage_Eff_Canvas.l[b], Stage_Eff_Canvas.l[b] = 0) : Stage_Eff_Canvas.l[b] = 0);
            Game_Canvas = Stage_Eff_Canvas.l;
            for (b = 0; 4 > b; b++) 0 != LP_Current[b] && (filledRectCentered(Players.a[b][0].x, Players.a[b][0].y, 3, 3, 0), filledRectCentered(Players.a[b][9].x, Players.a[b][9].y, 1, 1, 0), filledRectCentered(Players.a[b][10].x, Players.a[b][10].y, 1, 1, 0));
            for (b = 0; b < Projectiles.a; b++) 1 == Projectiles.i[b] && filledRectCentered(Projectiles.b[b].x, Projectiles.b[b].y, 3, 3, 0);
            Game_Canvas = h;
            for (b = 114687; 0 <= b; b--) 1 == Stage_Eff_Canvas.l[b] && (Game_Canvas[b] = 15266040)
    }
    INoutput();
    Display_Mode = 1;
    filledRect(4, 4, 8 * (Stage_Names[Current_Stage].length + 6) + 8, 20, 2151694400);
    Display_Mode = 0;
    !Current_Stage && 1 == Current_Screen || 20 == Current_Stage && 1 == Current_Screen || 47 == Current_Stage && 1 == Current_Screen || 70 == Current_Stage && 1 == Current_Screen || 77 == Current_Stage && 1 == Current_Screen ? TXoutputB(Large_Text, 8, 8, Stage_Names[Current_Stage], 16777215, 0) : Current_Screen + 1 == Stage_Spawns[Current_Stage].length ? TXoutputB(Large_Text, 8, 8, Stage_Names[Current_Stage] + ": BOSS", 16777215, 0) : TXoutputB(Large_Text, 8, 8, Stage_Names[Current_Stage] + ": " + (Current_Screen + 1), 16777215, 0);
    Display_Mode = 1;
    filledRect(364, 4, 56, 20, 2151694400);
    Display_Mode = 0;
    TXoutputB(Large_Text, 368, 8, "Option", 16777215, 0);
    Display_Mode = 1;
    filledRect(428, 4, 80, 20, 2151694400);
    Display_Mode = 0;
    TXoutputB(Large_Text, 432, 8, "World Map", 16777215, 0);
    if (0 < En_Count_From_Max && (0 == a && En_Count_From_Max--, filledRect(196, 10, 120, 12, 3158064), filledRect(196, 10, floor(120 * Target_HP_Current / Target_HP_Max), 12, 6291456), 0 < (Stage_Status[Current_Stage] & Bookede))) {
        centeredText(Small_Text, 256, 16, "" + Target_HP_Current + "/" + Target_HP_Max, 16777215, 0);
        ENdrawIcon(Target_Array_ID, 206, 33, 1);
        TXoutputB(Small_Text, 216, 25, "DROP", 16777215, 0);
        for (b = a = 0; 6 > a; a += 2) c = EN_Info[Target_Array_ID][En_Drop1 + a], 0 != c && (Display_Mode2 = 2, dispItem(Drop_Img, 236 + 12 * b, 23, 12, 12, 12 * getVal(c, 3), 0, 12, 12, getVal(c, 6)), Display_Mode2 = 0, b++);
        a = enemyDeath(Enemies, Target_Array_ID, 1);
        TXoutputB(Small_Text, 276, 25, "EXP " + a, 16777215, 0)
    }
}
WIN.fff = setRangersUI;

function setRangersUI() {
    var a, b;
    antiCheatCheck();
    FP[0] = LV[0];
    FP[1] = LV[1];
    for (a = 0; 4 > a; a++) FP[0] += 2 * getVal(Item_Inv[4 + a], 1) + getVal(Comp1_Inv[4 + a], 1) + getVal(Comp2_Inv[4 + a], 1);
    for (a = 4; 8 > a; a++) FP[1] += 2 * getVal(Item_Inv[4 + a], 1) + getVal(Comp1_Inv[4 + a], 1) + getVal(Comp2_Inv[4 + a], 1);
    Rank[0] = minOf(floor((FP[0] - 1) / 20), 9);
    Rank[1] = minOf(floor((FP[1] - 1) / 20), 9);
    var c = 1 != Game_Mode ? 4 : 8;
    for (a = 0; a < c; a++) {
        STR[a] = 0 + STR_SP[a];
        DEX[a] = 0 + DEX_SP[a];
        MAG[a] = 0 + MAG_SP[a];
        checkEff(4 + a, 2) && (STR[a] += getEff(4 + a, 8));
        checkEff(4 + a, 3) && (DEX[a] += getEff(4 + a, 8));
        checkEff(4 + a, 4) && (MAG[a] += getEff(4 + a, 8));
        checkEff(4 + a, 5) && (STR[a] += getEff(4 + a, 8), DEX[a] += getEff(4 + a, 8), MAG[a] += getEff(4 + a, 8));
        b = getVal(Item_Inv[4 + a], 10);
        var d = getVal(Item_Inv[4 + a], 11),
            e = getVal(Item_Inv[4 + a], 14),
            g = getVal(Item_Inv[4 + a], 15),
            h = getVal(Item_Inv[4 + a], 16);
        1 == Ranger_Class[a] ? (AT_Min[a] = b + floor(STR[a] / 2), AT_Max[a] = d + floor(STR[a] / 2), Agi_Min[a] = minOf(e, maxOf(e - DEX[a], 5)), Agi_Max[a] = minOf(g, maxOf(g - DEX[a], 10)), RANGE[a] = h, LP_Max[a] = 50 + 10 * LP_SP[a] + 4 * STR[a] + 3 * DEX[a] + 2 * MAG[a]) : 2 == Ranger_Class[a] ? (AT_Max[a] = d + STR[a], AT_Min[a] = minOf(b + DEX[a], AT_Max[a]), Agi_Min[a] = e, Agi_Max[a] = g, RANGE[a] = h, checkEff(4 + a, 22) && (RANGE[a] += getEff(4 + a, 8)), checkEff(4 + a, 45) && (RANGE[a] += getEff(4 + a, 9)), LP_Max[a] = 50 + 10 * LP_SP[a] + 4 * STR[a] + 4 * DEX[a] + 2 * MAG[a]) : 3 == Ranger_Class[a] ? (AT_Min[a] = b + floor(DEX[a] / 4), AT_Max[a] = d + floor(DEX[a] / 3), Agi_Min[a] = e, Agi_Max[a] = g, RANGE[a] = h + 2 * STR[a], checkEff(4 + a, 23) && (RANGE[a] += getEff(4 + a, 8)), LP_Max[a] = 50 + 8 * LP_SP[a] + 2 * STR[a] + 3 * DEX[a] + 2 * MAG[a]) : 4 == Ranger_Class[a] ? (AT_Min[a] = b + floor(MAG[a] / 4), AT_Max[a] = d + floor(MAG[a] / 3), Agi_Min[a] = maxOf(e - DEX[a], 50), Agi_Max[a] = maxOf(g - DEX[a], 60), RANGE[a] = h + 2 * STR[a], checkEff(4 + a, 23) && (RANGE[a] += getEff(4 + a, 8)), LP_Max[a] = 50 + 8 * LP_SP[a] + 2 * STR[a] + 2 * DEX[a] + 2 * MAG[a]) : 5 == Ranger_Class[a] ? (AT_Min[a] = b, AT_Max[a] = d, Agi_Min[a] = e, Agi_Max[a] = g, RANGE[a] = h + 2 * MAG[a], checkEff(4 + a, 23) && (RANGE[a] += getEff(4 + a, 8)), LP_Max[a] = 50 + 8 * LP_SP[a] + 2 * STR[a] + 2 * DEX[a] + 2 * MAG[a]) : 6 == Ranger_Class[a] ? (AT_Min[a] = b + floor(b * STR[a] / 50), AT_Max[a] = d + floor(d * STR[a] / 50), Agi_Min[a] = maxOf(floor(50 * e / (DEX[a] + 50)), 5), Agi_Max[a] = maxOf(floor(50 * g / (DEX[a] + 50)), 10), RANGE[a] = h, checkEff(4 + a, 23) && (RANGE[a] += getEff(4 + a, 8)), LP_Max[a] = 50 + 8 * LP_SP[a] + 2 * STR[a] + 2 * DEX[a] + 2 * MAG[a]) : 7 == Ranger_Class[a] ? (AT_Min[a] = b + floor(STR[a] / 2), AT_Max[a] = d + floor(STR[a] / 2), Agi_Min[a] = e, Agi_Max[a] = g, RANGE[a] = h, LP_Max[a] = 50 + 10 * LP_SP[a] + 3 * STR[a] + 3 * DEX[a] + 2 * MAG[a]) : 8 == Ranger_Class[a] && (AT_Min[a] = b + floor(STR[a] / 4), AT_Max[a] = d + floor(STR[a] / 3), Agi_Min[a] = e, Agi_Max[a] = g, RANGE[a] = h, checkEff(4 + a, 23) && (RANGE[a] += getEff(4 + a, 8)), LP_Max[a] = 50 + 10 * LP_SP[a] + 4 * STR[a] + 2 * DEX[a] + 2 * MAG[a]);
        checkEff(4 + a, 1) && (LP_Max[a] += getEff(4 + a, 8));
        checkEff(4 + a, 32) && (LP_Max[a] += floor(getEff(4 + a, 8) * LP_Max[a] / 100));
        checkEff(4 + a, 47) && (LP_Max[a] += getEff(4 + a, 9));
        1 == getVal(Item_Inv[4 + a], 5) || 2 == getVal(Item_Inv[4 + a], 5) || 3 == getVal(Item_Inv[4 + a], 5) || 7 == getVal(Item_Inv[4 + a], 5) || 8 == getVal(Item_Inv[4 + a], 5) ? (checkEff(4 + a, 6) && (AT_Min[a] += getEff(4 + a, 8), AT_Max[a] += getEff(4 + a, 9)), checkEff(4 + a, 7) && (AT_Min[a] += floor(getEff(4 + a, 8) * AT_Min[a] / 100), AT_Max[a] += floor(getEff(4 + a, 8) * AT_Max[a] / 100)), checkEff(4 + a, 45) && (AT_Min[a] += floor(getEff(4 + a, 8) * AT_Min[a] / 100), AT_Max[a] += floor(getEff(4 + a, 8) * AT_Max[a] / 100))) : 4 == getVal(Item_Inv[4 + a], 5) || 5 == getVal(Item_Inv[4 + a], 5) ? (checkEff(4 + a, 13) && (AT_Min[a] += getEff(4 + a, 8), AT_Max[a] += getEff(4 + a, 9)), checkEff(4 + a, 15) && (AT_Min[a] += getEff(4 + a, 8), AT_Max[a] += getEff(4 + a, 9)), checkEff(4 + a, 17) && (AT_Min[a] += getEff(4 + a, 8), AT_Max[a] += getEff(4 + a, 9)), checkEff(4 + a, 18) && (AT_Min[a] += getEff(4 + a, 8), AT_Max[a] += getEff(4 + a, 9))) : 6 == getVal(Item_Inv[4 + a], 5) && (checkEff(4 + a, 6) && (AT_Min[a] += getEff(4 + a, 8), AT_Max[a] += getEff(4 + a, 9)), checkEff(4 + a, 7) && (AT_Min[a] += floor(getEff(4 + a, 8) * AT_Min[a] / 100), AT_Max[a] += floor(getEff(4 + a, 8) * AT_Max[a] / 100)), 0 == getVal(Item_Inv[4 + a], 37) && (checkEff(4 + a, 13) && (AT_Min[a] += getEff(4 + a, 8), AT_Max[a] += getEff(4 + a, 9)), checkEff(4 + a, 15) && (AT_Min[a] += getEff(4 + a, 8), AT_Max[a] += getEff(4 + a, 9)), checkEff(4 + a, 17) && (AT_Min[a] += getEff(4 + a, 8), AT_Max[a] += getEff(4 + a, 9)), checkEff(4 + a, 18) && (AT_Min[a] += getEff(4 + a, 8), AT_Max[a] += getEff(4 + a, 9))));
        checkEff(4 + a, 21) && (b = getEff(4 + a, 8), Agi_Min[a] -= floor(Agi_Min[a] * b / 100), Agi_Max[a] -= floor(Agi_Max[a] * b / 100));
        AT_Min[a] += floor(AT_Min[a] * STR_Aura[a] / 100);
        AT_Max[a] += floor(AT_Max[a] * STR_Aura[a] / 100);
        1 == Game_Mode && (LP_Max[a] *= [1, 5, 5, 5, 5, 3, 4, 5, 5][Ranger_Class[a]], LP_Max[a] *= Rank[1] + 1);
        LP_Current[a] = clamp(LP_Current[a], 0, LP_Max[a])
    }
    for (a = 0; a < c; a++) STR_Aura[a] = 0, DEX_Aura[a] = 0, MAG_Aura[a] = 0;
    for (a = 0; a < c; a++)
        if (5 == Ranger_Class[a] && 5 == getVal(Item_Inv[4 + a], 5) && 0 != LP_Current[a])
            for (d = floor(floor(Players.a[a][9].x + Players.a[a][10].x) / 2), e = floor(floor(Players.a[a][9].y + Players.a[a][10].y) / 2), b = a >> 2 << 2; b < (a >> 2 << 2) + 4; b++) 0 != LP_Current[b] && (g = floor(floor(Players.a[b][9].y + Players.a[b][10].y) / 2), absVal(d - floor(floor(Players.a[b][9].x + Players.a[b][10].x) / 2)) < RANGE[a] && absVal(e - g) < RANGE[a] && (STR_Aura[b] += STR[a], DEX_Aura[b] += DEX[a], MAG_Aura[b] += MAG[a]));
    for (a = 0; a < c; a++) 0 != LP_Current[a] && checkEff(4 + a, 28) && (STR_Aura[a] += getEff(4 + a, 8));
    antiCheatSet()
}
WIN.fff = drawUI;

function drawUI(a) {
    var b, c, d, e, g;
    (Left_Click_Is_Up || Clicked) && 256 <= Mouse_Ypos ? Mouse_Up = !0 : (Left_Click_Is_Up || Clicked) && 256 > Mouse_Ypos && (Mouse_Up = !1);
    filledRect(0, 257, 512, 126, [13407305, 9480368, 7241784, 7630870, 11302740, 13599032, 10993609, 6322320, 1921195, 10053120, 6714227, 6313296, 6313296][Stage_Spawns[Current_Stage][Current_Screen][0]]);
    TXoutputM(Small_Text, 10, 374, chr_C_DAN_BALL, 0, 0, 0, 0, 0, 0, 0, 128, 5, 7);
    e = 10;
    g = 260;
    var h = 4753E3;
    c = 9999999;
    if (98 > LV[0]) {
        h = 0;
        for (b = 1; b < LV[0]; b++) h += 1E3 * b;
        c = h + 1E3 * b
    }
    setRangersUI();
    if (2 == a) {
        antiCheatCheck();
        for (b = 0; 4 > b; b++) STR_Aura[b] = 0, DEX_Aura[b] = 0, MAG_Aura[b] = 0;
        antiCheatSet()
    }
    var m;
    if (4 > Displayed_Object) {
        b = "LP  " + LP_Current[Displayed_Object] + "/" + LP_Max[Displayed_Object];
        d = "STR " + STR[Displayed_Object];
        var q = "DEX " + DEX[Displayed_Object],
            m2 = "MAG " + MAG[Displayed_Object];
        TXoutputB(Large_Text, e, g + 0, Class_Name_List[getVal(Item_Inv[4 + Displayed_Object], 5)], 16777215, 0);
        TXoutputB(Large_Text, e, g + 16, b, 16777215, 0);
        if (Players.f[Displayed_Object] != Class_Dead)
            if (TXoutputB(Large_Text, e, g + 28, d, 16777215, 0), TXoutputB(Large_Text, e, g + 40, q, 16777215, 0), TXoutputB(Large_Text, e, g + 52, m2, 16777215, 0), TXoutputB(Small_Text, e, g + 30, "              AT ", -1, 0), TXoutputB(Small_Text, e, g + 42, "              AGI ", -1, 0), TXoutputB(Small_Text, e, g + 54, "              RANGE ", -1, 0), TXoutputB(Small_Text, e, g + 30, "                 " + AT_Min[Displayed_Object] + "-" + AT_Max[Displayed_Object], 0, -1), TXoutputB(Small_Text, e, g + 42, "                  " + Agi_Min[Displayed_Object] + "-" + Agi_Max[Displayed_Object], 0, -1), TXoutputB(Small_Text, e, g + 54, "                    " + RANGE[Displayed_Object], 0, -1), 5 == Ranger_Class[Displayed_Object]) TXoutputB(Small_Text, e, g + 66, "AURA          AURA", -1, 0), TXoutputB(Small_Text, e, g + 66, "     (AT)" + STR[Displayed_Object] + "%", 0, -1), TXoutputB(Small_Text, e, g + 66, "                   (DF)" + DEX[Displayed_Object] / 5, 0, -1);
            else if (7 == Ranger_Class[Displayed_Object]) TXoutputB(Small_Text, e, g + 66, "              BULLET", -1, 0), TXoutputB(Small_Text, e, g + 66, "                     +" + DEX[Displayed_Object] / 5, 0, -1);
        else if (8 == Ranger_Class[Displayed_Object]) {
            var l;
            l = 10 > DEX[Displayed_Object] ? 0 + (DEX[Displayed_Object] - 0) / 10 : 30 > DEX[Displayed_Object] ? 1 + (DEX[Displayed_Object] - 10) / 20 : 60 > DEX[Displayed_Object] ? 2 + (DEX[Displayed_Object] - 30) / 30 : 100 > DEX[Displayed_Object] ? 3 + (DEX[Displayed_Object] - 60) / 40 : 4;
            TXoutputB(Small_Text, e, g + 66, "              RING", -1, 0);
            TXoutputB(Small_Text, e, g + 66, "                   +" + ("" + l).substring(0, minOf(("" + l).length, 5)), 0, -1)
        }
        TXoutputB(Large_Text, e, g + 76, "LV  " + LV[0], 16777215, 0);
        TXoutputB(Large_Text, e, g + 76, "        SP " + SP[Displayed_Object], 16777215, 0);
        TXoutputB(Large_Text, e, g + 88, "EXP " + Team_EXP + "(" + floor(100 * (Team_EXP - h) / (c - h)) + "%)", 16777215, 0);
        TXoutputB(Large_Text, e, g + 100, "$$$ " + Team_Gold, 16777215, 0);
        TXoutputB(Small_Text, e + 105, g + 102, "FP " + FP[0], -1, 0);
        var h2;
        Players.f[Displayed_Object] == Class_Dead ? (h = maxOf(floor(Team_Gold / 10), 10 * LV[0]), b = "Revival $ " + h, TXoutputB(Large_Text, e, g + 40, b, 8421504, 0), isMouseHovered(e, g + 40, 8 * b.length, 12) && Mouse_Up && (h <= Team_Gold && Clicked && 0 != LP_Current[0] + LP_Current[1] + LP_Current[2] + LP_Current[3] && (antiCheatCheck(), LP_Current[Displayed_Object] += floor(LP_Max[Displayed_Object] / 4), Team_Gold -= h, Players.set(Displayed_Object, floor(Players.a[Displayed_Object][0].x / 8), floor(Players.a[Displayed_Object][0].y / 8)), antiCheatSet()), TXoutputB(Large_Text, e, g + 40, b, 16711680, 0))) : 0 < SP[Displayed_Object] && (h2 = Clicked, antiCheatCheck(), isMouseHovered(e, g + 16, 8 * b.length + 16, 12) && Mouse_Up ? (h2 && (LP_SP[Displayed_Object]++, SP[Displayed_Object]--), TXoutputB(Large_Text, e, g + 16, b, 16711680, 0)) : isMouseHovered(e, g + 28, 8 * d.length + 16, 12) && Mouse_Up ? (h2 && (STR_SP[Displayed_Object]++, SP[Displayed_Object]--), TXoutputB(Large_Text, e, g + 28, d, 16711680, 0)) : isMouseHovered(e, g + 40, 8 * q.length + 16, 12) && Mouse_Up ? (h2 && (DEX_SP[Displayed_Object]++, SP[Displayed_Object]--), TXoutputB(Large_Text, e, g + 40, q, 16711680, 0)) : isMouseHovered(e, g + 52, 8 * m.length + 16, 12) && Mouse_Up && (h2 && (MAG_SP[Displayed_Object]++, SP[Displayed_Object]--), TXoutputB(Large_Text, e, g + 52, m, 16711680, 0)), antiCheatSet(), TXoutputB(Large_Text, e + 8 * b.length, g + 16, " +", 16711680, 0), TXoutputB(Large_Text, e + 8 * d.length, g + 28, " +", 16711680, 0), TXoutputB(Large_Text, e + 8 * q.length, g + 40, " +", 16711680, 0), TXoutputB(Large_Text, e + 8 * m.length, g + 52, " +", 16711680, 0))
    } else if (m = Item_Inv[Displayed_Object], 8 <= Displayed_Object && 11 >= Displayed_Object && (m = Comp1_Inv[4 + Displayed_Object - 8]), 12 <= Displayed_Object && 15 >= Displayed_Object && (m = Comp2_Inv[4 + Displayed_Object - 12]), itemText(e, g + 0, Item_Catalogue[m][0] + " " + (Item_Catalogue[m][1] ? Item_Catalogue[m][1] : ""), 16777215, 0, -1), 0 != m && 59 != m)
        if (b = getVal(m, 5), 9 == b) TXoutputB(Large_Text, e, g + 16, "Compo Item", -1, 0), itemText(e, g + 32, Item_Catalogue[m][10], 16777215, 0, -1), itemText(e, g + 44, Item_Catalogue[m][11], 16777215, 0, -1);
        else {
            TXoutputB(Large_Text, e, g + 16, "AT " + Item_Catalogue[m][10] + "-" + Item_Catalogue[m][11], 16777215, 0);
            TXoutputB(Large_Text, e, g + 28, "AGI " + Item_Catalogue[m][14] + "-" + Item_Catalogue[m][15], 16777215, 0);
            TXoutputB(Large_Text, e, g + 40, "RANGE " + Item_Catalogue[m][16], 16777215, 0);
            c = getVal(m, 34);
            d = getVal(m, 35);
            h = maxOf(getVal(m, 36), 0);
            q = getVal(m, 39);
            m = getVal(m, 40);
            if (1 == c || 2 == c || 3 == c || 4 == c || 5 == c) checkEff(Displayed_Object, 13) && (q += getEff(Displayed_Object, 8), m += getEff(Displayed_Object, 9)), checkEff(Displayed_Object, 15) && (q += getEff(Displayed_Object, 8), m += getEff(Displayed_Object, 9)), checkEff(Displayed_Object, 17) && (q += getEff(Displayed_Object, 8), m += getEff(Displayed_Object, 9)), checkEff(Displayed_Object, 18) && (q += getEff(Displayed_Object, 8), m += getEff(Displayed_Object, 9)), checkEff(Displayed_Object, 16) && (d += getEff(Displayed_Object, 8)), checkEff(Displayed_Object, 19) && (d += getEff(Displayed_Object, 8)), checkEff(Displayed_Object, 20) && (d += getEff(Displayed_Object, 8));
            TXoutputB(Large_Text, e, g + 56, "TYPE " + "physical fire ice thunder poison freeze".split(" ")[c], 16777215, 0);
            TXoutputB(Large_Text, e, g + 68, "AT " + q + "-" + m, 16777215, 0);
            6 == b ? TXoutputB(Large_Text, e, g + 80, "$$ " + h, 16777215, 0) : TXoutputB(Large_Text, e, g + 80, "MP " + h, 16777215, 0);
            2 == c ? TXoutputB(Large_Text, e, g + 80, "        SLOW " + d + "%", 16777215, 0) : 4 == c ? TXoutputB(Large_Text, e, g + 80, "        TIME " + d / 50 + "s", 16777215, 0) : 5 == c && TXoutputB(Large_Text, e, g + 80, "        TIME " + d / 50 + "s", 16777215, 0);
            filledRect(e + 0, g + 96, 12, 12, 0);
            filledRect(e + 75, g + 96, 12, 12, 0);
            Display_Mode2 = 2;
            dispItem(Drop_Img, e + 0, g + 96, 12, 12, 12 * getVal(Comp1_Inv[Displayed_Object], 3), 0, 12, 12, getVal(Comp1_Inv[Displayed_Object], 6));
            dispItem(Drop_Img, e + 75, g + 96, 12, 12, 12 * getVal(Comp2_Inv[Displayed_Object], 3), 0, 12, 12, getVal(Comp2_Inv[Displayed_Object], 6));
            Display_Mode2 = 0;
            TXoutputB(Small_Text, e + 16, g + 99, Item_Catalogue[Comp1_Inv[Displayed_Object]][0].substring(0, minOf(8, Item_Catalogue[Comp1_Inv[Displayed_Object]][0].length)) + " " + Item_Catalogue[Comp1_Inv[Displayed_Object]][1], -1, 0);
            TXoutputB(Small_Text, e + 91, g + 99, Item_Catalogue[Comp2_Inv[Displayed_Object]][0].substring(0, minOf(8, Item_Catalogue[Comp2_Inv[Displayed_Object]][0].length)) + " " + Item_Catalogue[Comp2_Inv[Displayed_Object]][1], -1, 0)
        }
    e = 192;
    g = 271;
    largeMessage(Small_Text, e - 15, g + 8, "PLA  ", 0, 0, 0, 0, 0, 0, 0, 128, 5, 7);
    largeMessage(Small_Text, e - 15, g + 16, "  YER", 0, 0, 0, 0, 0, 0, 0, 128, 5, 7);
    largeMessage(Small_Text, e - 15, g + 36, "WEA  ", 0, 0, 0, 0, 0, 0, 0, 128, 5, 7);
    largeMessage(Small_Text, e - 15, g + 44, "  PON", 0, 0, 0, 0, 0, 0, 0, 128, 5, 7);
    largeMessage(Small_Text, e - 15, g + 68, "COMPO", 0, 0, 0, 0, 0, 0, 0, 128, 5, 7);
    largeMessage(Small_Text, e - 15, g + 96, "COMPO", 0, 0, 0, 0, 0, 0, 0, 128, 5, 7);
    for (b = 0; 4 > b; b++) filledRect(e + 32 * b, g - 12, 24, 4, 0), filledRect(e + 32 * b, g - 12, floor(24 * LP_Current[b] / LP_Max[b]), 4, 10027008), h = maxOf(getVal(Item_Inv[4 + b], 36), 1), c = getVal(Item_Inv[4 + b], 5), 4 != c && 5 != c && 6 != c && filledRect(e + 32 * b, g - 6, floor(23 * MP_Bar[b] / h) + 1, 2, 128), filledRect(e + 32 * b, g + 0, 24, 24, 0), filledRect(e + 32 * b, g + 28, 24, 24, 0), restrictSlots(b, 0) && filledRect(e + 32 * b, g + 56, 24, 24, 0), restrictSlots(b, 1) && filledRect(e + 32 * b, g + 84, 24, 24, 0), dispItem(Player_Img, e + 32 * b, g, 24, 24, 24 * getVal(Item_Inv[4 + b], 5), 0, 24, 24, 16777215), colorPortraitWeap(e + 32 * b, g, 24 * getVal(Item_Inv[4 + b], 5), getVal(Item_Inv[4 + b], 6)), Display_Mode2 = 2, dispItem(Item_Img, e + 32 * b, g + 28, 24, 24, 24 * getVal(Item_Inv[4 + b], 4), 0, 24, 24, getVal(Item_Inv[4 + b], 6)), restrictSlots(b, 0) && dispItem(Item_Img, e + 32 * b, g + 56, 24, 24, 24 * getVal(Comp1_Inv[4 + b], 4), 0, 24, 24, getVal(Comp1_Inv[4 + b], 6)), restrictSlots(b, 1) && dispItem(Item_Img, e + 32 * b, g + 84, 24, 24, 24 * getVal(Comp2_Inv[4 + b], 4), 0, 24, 24, getVal(Comp2_Inv[4 + b], 6)), Display_Mode2 = 0, Item_Catalogue[Item_Inv[4 + b]][1] && TXoutputB(Small_Text, e + 32 * b + 19, g + 45, "" + Item_Catalogue[Item_Inv[4 + b]][1], 16777215, -1), Item_Catalogue[Comp1_Inv[4 + b]][1] && restrictSlots(b, 0) && TXoutputB(Small_Text, e + 32 * b + 19, g + 73, "" + Item_Catalogue[Comp1_Inv[4 + b]][1], 16777215, -1), Item_Catalogue[Comp2_Inv[4 + b]][1] && restrictSlots(b, 1) && TXoutputB(Small_Text, e + 32 * b + 19, g + 101, "" + Item_Catalogue[Comp2_Inv[4 + b]][1], 16777215, -1);
    outlineRect(e + 32 * Selected_Player - 1, g - 1, 26, 26, 16711680);
    e = 344;
    g = 271;
    TXoutputB(Large_Text, e, g + -12, "ITEM", 16777215, 0);
    for (b = 0; 24 > b; b++) filledRect(e + b % 6 * 28, g + 28 * floor(b / 6), 24, 24, 0), Display_Mode2 = 2, dispItem(Item_Img, e + b % 6 * 28, g + 28 * floor(b / 6), 24, 24, 24 * getVal(Item_Inv[16 + b], 4), 0, 24, 24, getVal(Item_Inv[16 + b], 6)), Display_Mode2 = 0, Item_Catalogue[Item_Inv[16 + b]][1] && TXoutputB(Small_Text, e + b % 6 * 28 + 19, g + 28 * floor(b / 6) + 17, "" + Item_Catalogue[Item_Inv[16 + b]][1], 16777215, -1);
    b = -1;
    e = 192;
    g = 271;
    isMouseHovered(e - 4, g - 4, 128, 112) && Mouse_Up && (c = floor((Mouse_Xpos - e + 4) / 32), d = floor((Mouse_Ypos - g + 4) / 28), b = 4 * d + c, backgroundFill(e + 32 * c, g + 28 * d, 24, 24, 8388608));
    e = 344;
    g = 271;
    isMouseHovered(e - 4, g - 4, 168, 112) && Mouse_Up && (c = floor((Mouse_Xpos - e + 4) / 28), d = floor((Mouse_Ypos - g + 4) / 28), b = 16 + 6 * d + c, backgroundFill(e + 28 * c, g + 28 * d, 24, 24, 8388608));
    antiCheatCheck();
    if (0 <= b && 3 >= b && 0 == Item_Inv[40] && Clicked) Selected_Player = b;
    else if (4 <= b && 8 > b && Clicked) {
        if (0 == Item_Inv[40] || getVal(Item_Inv[40], 5) == Ranger_Class[b - 4]) a = Item_Inv[b], Item_Inv[b] = Item_Inv[40], Item_Inv[40] = a, a = Comp1_Inv[b], Comp1_Inv[b] = Comp1_Inv[40], Comp1_Inv[40] = a, a = Comp2_Inv[b], Comp2_Inv[b] = Comp2_Inv[40],
            Comp2_Inv[40] = a, MP_Bar[b - 4] = 0, Players.I[b - 4] = 0
    } else 8 <= b && 11 >= b && Clicked ? 9 == getVal(Item_Inv[40], 5) && restrictSlots(b - 8, 0) && (Comp1_Inv[4 + b - 8] = Item_Inv[40], Item_Inv[40] = 0, Comp1_Inv[40] = 0, Comp2_Inv[40] = 0, MP_Bar[b - 8] = 0) : 12 <= b && 15 >= b && Clicked ? 9 == getVal(Item_Inv[40], 5) && restrictSlots(b - 12, 1) && (Comp2_Inv[4 + b - 12] = Item_Inv[40], Item_Inv[40] = 0, Comp1_Inv[40] = 0, Comp2_Inv[40] = 0, MP_Bar[b - 12] = 0) : 16 <= b && 40 > b && Clicked ? 1 == Click_To_Sell_Mode && 0 != Item_Inv[b] ? (h = floor(getVal(Item_Inv[b], 2) / 8), Clicked && (Drops.add(40, 200, 1, h, 0), Item_Inv[b] = 0, Comp1_Inv[b] = 0, Comp2_Inv[b] = 0)) : (a = Item_Inv[b], Item_Inv[b] = Item_Inv[40], Item_Inv[40] = a, a = Comp1_Inv[b], Comp1_Inv[b] = Comp1_Inv[40], Comp1_Inv[40] = a, a = Comp2_Inv[b], Comp2_Inv[b] = Comp2_Inv[40], Comp2_Inv[40] = a) : -1 == b && 0 != Item_Inv[40] && Clicked && 256 > Mouse_Ypos && 0 == a && (Drops.add(Players.a[Selected_Player][0].x, Players.a[Selected_Player][0].y, Item_Inv[40], Comp1_Inv[40], Comp2_Inv[40]), Item_Inv[40] = 0, Comp1_Inv[40] = 0, Comp2_Inv[40] = 0);
    antiCheatSet();
    Displayed_Object = -1 == b ? Selected_Player : b;
    0 != Item_Inv[40] && (Display_Mode2 = 2, dispItemCentered(Item_Img, Mouse_Xpos, Mouse_Ypos, 24, 24, 24 * getVal(Item_Inv[40], 4), 0, 24, 24, getVal(Item_Inv[40], 6)), Display_Mode2 = 0);
    1 == Click_To_Sell_Mode && (c = clamp(Mouse_Xpos, 56, 456), d = clamp(Mouse_Ypos - 8, 10, 374), 16 <= b && 40 > b ? (h = floor(getVal(Item_Inv[b], 2) / 8), centeredText(Large_Text, c, d, "" + h + "$ SELL", 16777215, 0)) : centeredText(Large_Text, c, d, "CLICK TO SELL", 16777215, 0))
}

function restrictSlots(a, b) {
    if (0 == Item_Inv[40] || 9 != getVal(Item_Inv[40], 5)) return !0;
    if (0 == Item_Inv[4 + a] || 0 == b && 59 == Comp1_Inv[4 + a] || 1 == b && 59 == Comp2_Inv[4 + a]) return !1;
    var c = getVal(Item_Inv[40], 7);
    return 0 == b && c == getVal(Comp2_Inv[4 + a], 7) || 1 == b && c == getVal(Comp1_Inv[4 + a], 7) ? !1 : compRestrCheck(c, getVal(Item_Inv[4 + a], 5), getVal(Item_Inv[4 + a], 34), getVal(Item_Inv[4 + a], 12))
}

function compRestrCheck(a, b, c, d) {
    if (1 == a || 2 == a || 3 == a || 4 == a || 5 == a) return !0;
    if (6 == a) {
        if (1 == b || 2 == b || 3 == b || 6 == b || 7 == b || 8 == b) return !0
    } else if (7 == a) {
        if (1 == b || 2 == b || 3 == b || 6 == b || 7 == b || 8 == b) return !0
    } else {
        if (8 == a || 9 == a || 10 == a) return !0;
        if (11 == a) {
            if (1 == b || 2 == b || 7 == b) return !0
        } else if (12 == a) {
            if (1 == b || 2 == b || 7 == b) return !0
        } else if (37 == a) {
            if (1 == b || 2 == b || 7 == b) return !0
        } else if (13 == a) {
            if (1 == c) return !0
        } else if (14 == a) {
            if (1 == c) return !0
        } else if (15 == a) {
            if (2 == c) return !0
        } else if (16 == a) {
            if (2 == c) return !0
        } else if (17 == a) {
            if (3 == c) return !0
        } else if (18 == a) {
            if (4 == c) return !0
        } else if (19 == a) {
            if (4 == c) return !0
        } else if (20 == a) {
            if (5 == c) return !0
        } else {
            if (21 == a) return !0;
            if (22 == a) {
                if (2 == b) return !0
            } else if (23 == a) {
                if (3 == b || 4 == b || 5 == b || 6 == b || 8 == b) return !0
            } else if (24 == a) {
                if (3 == b || 4 == b || 6 == b) return !0
            } else if (25 == a) {
                if (3 == b || 4 == b || 6 == b) return !0
            } else if (26 == a) {
                if (2 <= d) return !0
            } else if (27 == a) {
                if (1 == b || 3 == b || 6 == b || 8 == b) return !0
            } else if (43 == a) {
                if (1 == b || 3 == b || 4 == b || 6 == b || 7 == b) return !0
            } else if (29 == a) {
                if (1 == b || 2 == b || 3 == b || 6 == b || 7 == b || 8 == b) return !0
            } else if (28 == a) {
                if (1 == b || 2 == b || 7 == b) return !0
            } else if (44 == a) {
                if (3 == b || 4 == b || 6 == b || 7 == b || 8 == b) return !0
            } else {
                if (32 == a || 33 == a || 34 == a || 35 == a || 36 == a || 38 == a || 39 == a || 40 == a || 41 == a) return !0;
                if (42 == a) {
                    if (1 == b || 7 == b) return !0
                } else if (45 == a) {
                    if (2 == b) return !0
                } else {
                    if (46 == a) return !0;
                    if (47 == a) {
                        if (8 == b) return !0
                    } else if (48 == a || 49 == a) return !0
                }
            }
        }
    }
    return !1
}
var Class_Dead = 9,
    Players = new SR_Player;

function SR_Player() {
    var a, b;
    this.a = Array(8);
    for (a = 0; 8 > a; a++) this.a[a] = Array(21);
    this.g = Array(8);
    for (a = 0; 8 > a; a++) this.g[a] = Array(21);
    this.f = new Int32Array(8);
    this.K = new Int32Array(8);
    this.i = new Int32Array(8);
    this.b = new Int32Array(8);
    this.c = new Int32Array(8);
    this.J = new Int32Array(8);
    this.I = new Int32Array(8);
    this.L = new Int32Array(8);
    this.h = -1;
    this.u = 0;
    this.H = new Int32Array(8);
    this.j = this.N = 0;
    this.w = new Int32Array(8);
    this.M = new Int32Array(8);
    this.A = new Int32Array(8);
    this.F = new Int32Array(8);
    this.v = new Int32Array(8);
    this.s = Array(8);
    for (a = 0; 8 > a; a++) this.s[a] = new Int32Array(6);
    this.C = Array(8);
    for (a = 0; 8 > a; a++) this.C[a] = new Int32Array(6);
    this.D = Array(8);
    for (a = 0; 8 > a; a++) this.D[a] = new Int32Array(6);
    for (a = 0; 8 > a; a++)
        for (b = 0; 21 > b; b++) this.a[a][b] = new Vector2D;
    for (a = 0; 8 > a; a++)
        for (b = 0; 21 > b; b++) this.g[a][b] = new Vector2D
}
SR_Player.prototype.o = function() {
    this.h = -1;
    this.u = 0
};
SR_Player.prototype.set = function(a, b, c) {
    b *= 8;
    c *= 8;
    for (var d = 0; 21 > d; d++) assignVector2D(this.a[a][d], b + random(4), c + random(4)), this.g[a][d].set(this.a[a][d]);
    this.f[a] = Ranger_Class[a];
    this.K[a] = 0;
    this.i[a] = 0;
    this.b[a] = -1;
    this.c[a] = 0;
    this.J[a] = 0;
    this.I[a] = 0;
    this.L[a] = 0;
    this.H[a] = 0;
    this.w[a] = 0;
    this.M[a] = 0;
    this.A[a] = 0;
    this.F[a] = 0;
    for (d = this.v[a] = 0; 6 > d; d++) this.s[a][d] = 0, this.C[a][d] = 0, this.D[a][d] = 0
};
WIN.fff = SR_Player.prototype.Y;
SR_Player.prototype.Y = function(a, b) {
    var c = this.a[a][b],
        d = new Vector2D;
    Vdistance(d, c, this.g[a][b]);
    c.set(this.g[a][b]);
    var e = (magnitudeOf(d) >> 2) + 1;
    scaleVector2D(d, 1 / e);
    var g, h, q;
    h = clamp(c.x, 0, 511) >> 3;
    q = clamp(c.y, 0, 383) >> 3;
    h = Terrain.a[q][h];
    9 == h && (scaleVector2D(d, .95), this.i[a] |= 2);
    var m = .5;
    8 == Stage_Spawns[Terrain.c][Current_Screen][0] && (m = 1);
    for (var l = 0; l < e; l++) g = c.y + d.y, h = clamp(c.x, 0, 511) >> 3, q = clamp(g, 0, 383) >> 3, h = Terrain.a[q][h], 384 <= g || (0 <= h && 8 >= h ? (d.x *= m, d.y = -d.y, this.i[a] |= 1) : c.y = g), g = c.x + d.x, h = clamp(g, 0, 511) >> 3, q = clamp(c.y, 0, 383) >> 3, h = Terrain.a[q][h], 0 > g || 512 <= g || (0 <= h && 8 >= h ? (d.y *= m, d.x = -d.x, this.i[a] |= 1) : c.x = g)
};

function PLfindPlayer(a, b, c, d, e) {
    var g = Players,
        h = .5 * (a + c),
        q = 1E3,
        m = -1;
    if (1 == g.N) return m;
    for (var l = e + 4; e < l; e++) {
        g.H[e] = 0;
        var A = g.a[e][2];
        g.f[e] == Class_Dead || A.x - 5 > c || A.x + 5 < a || A.y - 10 > d || A.y + 10 < b || (g.H[e] = 1, absVal(A.x - h) < q && (q = absVal(A.x - h), m = e))
    }
    return m
}

function PLtakeDamage(a, b, c, d, e, g, h, q, m, l) {
    var A = Players,
        z = -1;
    A.j = 0;
    q *= .5;
    m *= .5;
    for (var Z = l + 4; l < Z; l++)
        if (A.f[l] != Class_Dead && !(A.a[l][2].x - 5 > g + q || A.a[l][2].x + 5 < g - q || A.a[l][2].y - 10 > h + m || A.a[l][2].y + 10 < h - m)) {
            var z = -1,
                B = d + floor(random(e - d + 1));
            A.J[l] = 2;
            var S = 16711680;
            4 <= l && (z = 1, S = 12632256);
            checkEff(4 + l, 28) && (B += floor(B * getEff(4 + l, 9) / 100));
            var ia = 0;
            1 == b && checkEff(4 + l, 32) && (B += floor(B * getEff(4 + l, 9) / 100));
            if (2 == b) checkEff(4 + l, 38) && random(100) < getEff(4 + l, 8) && (ia = 1), ia || (A.w[l] = 500, A.M[l] = c, checkEff(4 + l, 9) && (A.w[l] -= floor(A.w[l] * getEff(4 + l, 8) / 100)));
            else if (4 == b) {
                checkEff(4 + l, 39) && random(100) < getEff(4 + l, 8) && (ia = 1);
                ia || (A.A[l] = c, A.F[l] = B, checkEff(4 + l, 9) && (A.A[l] -= floor(A.A[l] * getEff(4 + l, 8) / 100), A.F[l] -= floor(A.F[l] * getEff(4 + l, 8) / 100)));
                z = l;
                continue
            } else 5 == b && (checkEff(4 + l, 40) && random(100) < getEff(4 + l, 8) && (ia = 1), ia || (A.v[l] = floor(c / 10), checkEff(4 + l, 9) && (A.v[l] -= floor(A.v[l] * getEff(4 + l, 8) / 100))));
            0 == b && (B = maxOf(1, B - floor(DEX_Aura[l] / 5)));
            checkEff(4 + l, 8) && 0 == b && (B = maxOf(1, B - getEff(4 + l, 8)));
            checkEff(4 + l, 9) && 0 != b && (B -= floor(B * getEff(4 + l, 8) / 100));
            checkEff(4 + l, 10) && random(100) < getEff(4 + l, 8) && (B = 0, A.J[l] = 0, S = 16744576);
            antiCheatCheck();
            LP_Current[l] = clamp(LP_Current[l] - B, 0, LP_Max[l]);
            antiCheatSet();
            2 > Sett_Dmg_Indicators && Indicators.add(A.a[l][0].x, A.a[l][0].y, z, B, S);
            A.j += B;
            z = l;
            if (0 == a) break
        }
    return z
}
WIN.fff = SR_Player.prototype.X;
SR_Player.prototype.X = function() {
    var a = new Vector2D,
        b, c;
    if (-1 == this.h && 1 != Game_Mode) {
        if (Clicked) {
            b = 20;
            a.x = Mouse_Xpos - this.g[Selected_Player][0].x;
            a.y = Mouse_Ypos - (this.g[Selected_Player][0].y - 8);
            c = magnitudeOf(a);
            20 > c && c < b && (0 != LP_Current[Selected_Player] || 0 != Sett_Drag_Dead_Body) && (b = c, this.h = Selected_Player, this.u = 0);
            for (var d = 0; 4 > d; d++)
                if (0 != LP_Current[d] || 0 != Sett_Drag_Dead_Body)
                    for (var e = 0; 10 > e; e++) a.x = Mouse_Xpos - this.g[d][e].x, a.y = Mouse_Ypos - this.g[d][e].y, c = magnitudeOf(a), 20 > c && c < b && (b = c, this.h = d, this.u = e, Selected_Player = d)
        }
    } else Left_Click_Was_Down || (this.h = -1, this.u = 0)
};

function PLprojectileAttack(a, b, c, d, e) {
    var g = new Vector2D,
        h = b;
    8 > b && (h = Item_Inv[4 + b]);
    var q = getVal(h, 8) % 100,
        m = floor(getVal(h, 8) / 100),
        l = getVal(h, 17),
        A = getVal(h, 18),
        z = getVal(h, 19),
        Z = getVal(h, 20),
        B = getVal(h, 21),
        S = getVal(h, 22),
        ia = getVal(h, 23),
        za = getVal(h, 24),
        ta = getVal(h, 25),
        X = getVal(h, 26),
        T = getVal(h, 27),
        Y = getVal(h, 28),
        Ua = getVal(h, 29),
        eb = getVal(h, 30),
        Va = getVal(h, 31),
        ua = getVal(h, 32),
        pa = getVal(h, 33),
        Ha = 0,
        rb = getVal(h, 9),
        Aa = 8 > b ? AT_Min[b] : getVal(h, 10),
        ka = 8 > b ? AT_Max[b] : getVal(h, 11),
        ab = getVal(h, 12),
        Pa = getVal(h, 13),
        Wa = getVal(h, 34),
        Ca = getVal(h, 35),
        yb = getVal(h, 37),
        Hb = getVal(h, 42),
        Ib = getVal(h, 43),
        Jb = getVal(h, 44),
        Kb = getVal(h, 45),
        Lb = getVal(h, 46),
        Mb = getVal(h, 47),
        Nb = getVal(h, 48),
        Ob = getVal(h, 49),
        Pb = getVal(h, 50),
        Qb = getVal(h, 51),
        sb = getVal(h, 52),
        Rb = getVal(h, 53),
        Sb = getVal(h, 54),
        Tb = getVal(h, 55),
        Ub = getVal(h, 56),
        Vb = getVal(h, 57),
        $b = getVal(h, 38),
        ca = getVal(h, 39),
        Ba = getVal(h, 40),
        Oc = getVal(h, 41),
        Pc = Wa,
        zb = Ca;
    if (8 > b) {
        var tb = getVal(Item_Inv[4 + b], 5);
        1 == tb || 2 == tb || 7 == tb ? (Aa = getVal(Item_Inv[4 + b], 39), ka = getVal(Item_Inv[4 + b], 40), checkEff(4 + b, 13) && (Aa += getEff(4 + b, 8), ka += getEff(4 + b, 9)), checkEff(4 + b, 14) && (T += getEff(4 + b, 8)), checkEff(4 + b, 15) && (Aa += getEff(4 + b, 8), ka += getEff(4 + b, 9)), checkEff(4 + b, 16) && (Ca += getEff(4 + b, 8)), checkEff(4 + b, 17) && (Aa += getEff(4 + b, 8), ka += getEff(4 + b, 9)), checkEff(4 + b, 18) && (Aa += getEff(4 + b, 8), ka += getEff(4 + b, 9)), checkEff(4 + b, 19) && (Ca += getEff(4 + b, 8)), checkEff(4 + b, 20) && (Ca += getEff(4 + b, 8)), Aa += floor(Aa * STR_Aura[b] / 100), ka += floor(ka * STR_Aura[b] / 100), 7 == tb && (ab += floor(DEX[b] / 5))) : 3 == tb ? (402 != h && (Ca = Wa = 0), antiCheatCheck(), h = getVal(Item_Inv[4 + b], 36), MP_Bar[b] = minOf(MP_Bar[b] + MAG[b], h), MP_Bar[b] == h && 0 < h ? MP_Bar[b] = 0 : yb = 0, antiCheatSet(), checkEff(4 + b, 13) && (ca += getEff(4 + b, 8), Ba += getEff(4 + b, 9)), checkEff(4 + b, 14) && (sb += getEff(4 + b, 8)), checkEff(4 + b, 15) && (ca += getEff(4 + b, 8), Ba += getEff(4 + b, 9)), checkEff(4 + b, 16) && (zb += getEff(4 + b, 8)), checkEff(4 + b, 17) && (ca += getEff(4 + b, 8), Ba += getEff(4 + b, 9)), checkEff(4 + b, 18) && (ca += getEff(4 + b, 8), Ba += getEff(4 + b, 9)), checkEff(4 + b, 19) && (zb += getEff(4 + b, 8)), checkEff(4 + b, 20) && (zb += getEff(4 + b, 8)), ca += floor(ca * STR_Aura[b] / 100), Ba += floor(Ba * STR_Aura[b] / 100), checkEff(4 + b, 24) && random(100) < getEff(4 + b, 8) && (Va = 1), checkEff(4 + b, 25) && (pa += getEff(4 + b, 8)), checkEff(4 + b, 27) && random(100) < getEff(4 + b, 8) && (rb = 1), checkEff(4 + b, 29) && random(100) < getEff(4 + b, 8) && (Aa += floor(getEff(4 + b, 9) * Aa / 100), ka += floor(getEff(4 + b, 9) * ka / 100))) : 4 == tb || 5 == tb ? (checkEff(4 + b, 13) && (ca += getEff(4 + b, 8), Ba += getEff(4 + b, 9)), checkEff(4 + b, 14) && (T += getEff(4 + b, 8), sb += getEff(4 + b, 8)), checkEff(4 + b, 15) && (ca += getEff(4 + b, 8), Ba += getEff(4 + b, 9)), checkEff(4 + b, 16) && (Ca += getEff(4 + b, 8), zb += getEff(4 + b, 8)), checkEff(4 + b, 17) && (ca += getEff(4 + b, 8), Ba += getEff(4 + b, 9)), checkEff(4 + b, 18) && (ca += getEff(4 + b, 8), Ba += getEff(4 + b, 9)), checkEff(4 + b, 19) && (Ca += getEff(4 + b, 8), zb += getEff(4 + b, 8)), checkEff(4 + b, 20) && (Ca += getEff(4 + b, 8), zb += getEff(4 + b, 8)), ca += floor(ca * STR_Aura[b] / 100), Ba += floor(Ba * STR_Aura[b] / 100), checkEff(4 + b, 24) && random(100) < getEff(4 + b, 8) && (Va = 1), checkEff(4 + b, 25) && (pa += getEff(4 + b, 8))) : 6 == tb ? (0 != yb && (Ca = Wa = 0), checkEff(4 + b, 13) && (ca += getEff(4 + b, 8), Ba += getEff(4 + b, 9)), checkEff(4 + b, 14) && (sb += getEff(4 + b, 8)), checkEff(4 + b, 15) && (ca += getEff(4 + b, 8), Ba += getEff(4 + b, 9)), checkEff(4 + b, 16) && (zb += getEff(4 + b, 8)), checkEff(4 + b, 17) && (ca += getEff(4 + b, 8), Ba += getEff(4 + b, 9)), checkEff(4 + b, 18) && (ca += getEff(4 + b, 8), Ba += getEff(4 + b, 9)), checkEff(4 + b, 19) && (zb += getEff(4 + b, 8)), checkEff(4 + b, 20) && (zb += getEff(4 + b, 8)), ca += floor(ca * STR_Aura[b] / 100), Ba += floor(Ba * STR_Aura[b] / 100), checkEff(4 + b, 24) && random(100) < getEff(4 + b, 8) && (Va = 1), checkEff(4 + b, 25) && (pa += getEff(4 + b, 8)), checkEff(4 + b, 27) && random(100) < getEff(4 + b, 8) && (rb = 1), checkEff(4 + b, 29) && random(100) < getEff(4 + b, 8) && (Aa += floor(getEff(4 + b, 9) * Aa / 100), ka += floor(getEff(4 + b, 9) * ka / 100))) : 8 == tb && (Aa = getVal(Item_Inv[4 + b], 39), ka = getVal(Item_Inv[4 + b], 40), checkEff(4 + b, 13) && (Aa += getEff(4 + b, 8), ka += getEff(4 + b, 9)), checkEff(4 + b, 13) && (ca += getEff(4 + b, 8), Ba += getEff(4 + b, 9)), checkEff(4 + b, 14) && (T += getEff(4 + b, 8), sb += getEff(4 + b, 8)), checkEff(4 + b, 15) && (Aa += getEff(4 + b, 8), ka += getEff(4 + b, 9)), checkEff(4 + b, 15) && (ca += getEff(4 + b, 8), Ba += getEff(4 + b, 9)), checkEff(4 + b, 16) && (Ca += getEff(4 + b, 8), zb += getEff(4 + b, 8)), checkEff(4 + b, 17) && (Aa += getEff(4 + b, 8), ka += getEff(4 + b, 9)), checkEff(4 + b, 17) && (ca += getEff(4 + b, 8), Ba += getEff(4 + b, 9)), checkEff(4 + b, 18) && (Aa += getEff(4 + b, 8), ka += getEff(4 + b, 9)), checkEff(4 + b, 18) && (ca += getEff(4 + b, 8), Ba += getEff(4 + b, 9)), checkEff(4 + b, 19) && (Ca += getEff(4 + b, 8), zb += getEff(4 + b, 8)), checkEff(4 + b, 20) && (Ca += getEff(4 + b, 8), zb += getEff(4 + b, 8)), Aa += floor(Aa * STR_Aura[b] / 100), ka += floor(ka * STR_Aura[b] / 100), ca += floor(ca * STR_Aura[b] / 100), Ba += floor(Ba * STR_Aura[b] / 100));
        checkEff(4 + b, 26) && (ab += getEff(4 + b, 8) + floor(ab * getEff(4 + b, 9) / 100));
        (3 == tb || 4 == tb || 6 == tb) && checkEff(4 + b, 43) && random(100) < getEff(4 + b, 8) && (Ha = getEff(4 + b, 9));
        checkEff(4 + b, 44) && random(100) < getEff(4 + b, 8) && (ua = 2)
    }
    tb = 0;
    1 != Game_Mode ? 6 == q ? (h = Enemies.a[e][0].x, e = Enemies.a[e][0].y) : (h = Enemies.a[e][20].x, e = Enemies.a[e][20].y) : (tb = 1 - (e >> 2), h = a.a[e][2].x, e = a.a[e][2].y);
    if (q)
        if (1 == q) q = c + 10 * g.x, a = d + 10 * g.y, Projectiles.add(tb, q, a, 0, 0, l, A, z, Z, B, S, ia, za, ta, X, T, Y, Ua, eb, Va, ua, pa, Ha, rb, Aa, ka, Wa, Ca, yb, Hb, Ib, Jb, Kb, Lb, Mb, Nb, Ob, Pb, Qb, sb, Rb, Sb, Tb, Ub, Vb, $b, ca, Ba, Oc, Pc, zb);
        else if (2 == q) {
        g = h - c;
        g /= absVal(g);
        q = c + 10 * g;
        a = d;
        var ac = g * Pa * .1;
        for (b = 0; b < ab; b++) Projectiles.add(tb, q, a, ac, 0, l, A, z, Z, B, S, ia, za, ta, X, T, Y, Ua, eb, Va, ua, pa, Ha, rb, Aa, ka, Wa, Ca, yb, Hb, Ib, Jb, Kb, Lb, Mb, Nb, Ob, Pb, Qb, sb, Rb, Sb, Tb, Ub, Vb, $b, ca, Ba, Oc, Pc, zb)
    } else if (3 == q) {
        assignVector2D(g, h - c, e - d);
        var Hd = 0 < m ? m : 16,
            m = floor(512 * angleToXAxis(g) / TwoPi),
            m = m - floor((ab - 1) * Hd / 2);
        for (b = 0; b < ab; b++) {
            g.x = Xe_arr[m & 511][0];
            g.y = -Xe_arr[m & 511][1];
            q = c + 10 * g.x;
            a = d + 10 * g.y;
            var ac = g.x * Pa * .1,
                de = g.y * Pa * .1;
            Projectiles.add(tb, q, a, ac, de, l, A, z, Z, B, S, ia, za, ta, X, T, Y, Ua, eb, Va, ua, pa, Ha, rb, Aa, ka, Wa, Ca, yb, Hb, Ib, Jb, Kb, Lb, Mb, Nb, Ob, Pb, Qb, sb, Rb, Sb, Tb, Ub, Vb, $b, ca, Ba, Oc, Pc, zb);
            m += Hd
        }
    } else if (4 == q)
        for (b = 0; b < ab; b++) {
            assignVector2D(g, h - c, e - d);
            Hd = 0 < m ? m : ab + 4;
            if (1 < ab) {
                var ac = floor(random(512)),
                    ee = random(4) * Hd;
                g.x += Xe_arr[ac][0] * ee;
                g.y += Xe_arr[ac][1] * ee
            }
            q = c;
            a = d;
            ac = g.x / Pa;
            de = (g.y - .5 * Pa * Pa * Ua * .01) / Pa;
            Projectiles.add(tb, q, a, ac, de, l, A, z, Z, B, S, ia, za, ta, X, T, Y, Ua, eb, Va, ua, pa, Ha, rb, Aa, ka, Wa, Ca, yb, Hb, Ib, Jb, Kb, Lb, Mb, Nb, Ob, Pb, Qb, sb, Rb, Sb, Tb, Ub, Vb, $b, ca, Ba, Oc, Pc, zb)
        } else if (5 == q)
            for (b = 0; b < ab; b++) 0 == m ? (q = c + randomRange(-40, 40), a = d + randomRange(-60, 0)) : (q = c + randomRange(-10 * (m - 1), 10 * (m - 1)), a = d + randomRange(-60, -50)), assignVector2D(g, h - q, e - a), normalize(g), scaleVector2D(g, Pa), Projectiles.add(tb, q, a, g.x, g.y, l, A, z, Z, B, S, ia, za, ta, X, T, Y, Ua, eb, Va, ua, pa, Ha, rb, Aa, ka, Wa, Ca, yb, Hb, Ib, Jb, Kb, Lb, Mb, Nb, Ob, Pb, Qb, sb, Rb, Sb, Tb, Ub, Vb, $b, ca, Ba, Oc, Pc, zb);
        else if (6 == q)
        for (b = 0; b < ab; b++) q = h + randomRange(-Pa, Pa), a = e + randomRange(-Pa, Pa), Projectiles.add(tb, q, a, 0, 0, l, A, z, Z, B, S, ia, za, ta, X, T, Y, Ua, eb, Va, ua, pa, Ha, rb, Aa, ka, Wa, Ca, yb, Hb, Ib, Jb, Kb, Lb, Mb, Nb, Ob, Pb, Qb, sb, Rb, Sb, Tb, Ub, Vb, $b, ca, Ba, Oc, Pc, zb);
    else if (7 == q || 10 == q)
        for (g.x = c - a.a[b][5].x, g.y = d - a.a[b][5].y, 10 == q && 0 < g.y && (g.y = -g.y), q = a.a[b][5].x + .5 * g.x, a = a.a[b][5].y + .5 * g.y, normalize(g), scaleVector2D(g, .1 * Pa), b = 0; b < ab; b++) Projectiles.add(tb, q, a, g.x, g.y, l, A, z, Z, B, S, ia, za, ta, X, T, Y, Ua, eb, Va, ua, pa, Ha, rb, Aa, ka, Wa, Ca, yb, Hb, Ib, Jb, Kb, Lb, Mb, Nb, Ob, Pb, Qb, sb, Rb, Sb, Tb, Ub, Vb, $b, ca, Ba, Oc, Pc, zb);
    else if (12 == q)
        for (g = c - a.a[b][0].x, g /= absVal(g), q = a.a[b][0].x, a = a.a[b][0].y, ac = g * Pa * .1, b = 0; b < ab; b++) Projectiles.add(tb, q, a, ac, 0, l, A, z, Z, B, S, ia, za, ta, X, T, Y, Ua, eb, Va, ua, pa, Ha, rb, Aa, ka, Wa, Ca, yb, Hb, Ib, Jb, Kb, Lb, Mb, Nb, Ob, Pb, Qb, sb, Rb, Sb, Tb, Ub, Vb, $b, ca, Ba, Oc, Pc, zb);
    else if (8 == q)
        for (b = 0; b < ab; b++) q = 0 == m ? h + randomRange(-40, 40) : h + randomRange(-10 * (m - 1), 10 * (m - 1)), a = e + randomRange(-30, -60), Projectiles.add(tb, q, a, 0, 0, l, A, z, Z, B, S, ia, za, ta, X, T, Y, Ua, eb, Va, ua, pa, Ha, rb, Aa, ka, Wa, Ca, yb, Hb, Ib, Jb, Kb, Lb, Mb, Nb, Ob, Pb, Qb, sb, Rb, Sb, Tb, Ub, Vb, $b, ca, Ba, Oc, Pc, zb);
    else if (9 == q)
        for (0 == m ? (q = h, a = e) : (q = c, a = d), c = floor(512 / ab), ac = floor(random(c)), b = 0; b < ab; b++) g.x = Xe_arr[ac][0] * Pa, g.y = Xe_arr[ac][1] * Pa, Projectiles.add(tb, q, a, g.x, g.y, l, A, z, Z, B, S, ia, za, ta, X, T, Y, Ua, eb, Va, ua, pa, Ha, rb, Aa, ka, Wa, Ca, yb, Hb, Ib, Jb, Kb, Lb, Mb, Nb, Ob, Pb, Qb, sb, Rb, Sb, Tb, Ub, Vb, $b, ca, Ba, Oc, Pc, zb), ac += c;
    else if (11 == q)
        for (assignVector2D(g, h - c, e - d), ee = normalize(g), Hd = 0 < m ? m : 0, b = 0; b < ab; b++) ac = randomRange(-Hd, Hd), q = c + g.x * ee / 2 + g.y * ac, a = d + g.y * ee / 2 - g.x * ac, ac = Pa * (b + 1) / ab * g.x, de = Pa * (b + 1) / ab * g.y, Projectiles.add(tb, q, a, ac, de, l, A, z, Z, B, S, ia, za, ta, X, T, Y, Ua, eb, Va, ua, pa, Ha, rb, Aa, ka, Wa, Ca, yb, Hb, Ib, Jb, Kb, Lb, Mb, Nb, Ob, Pb, Qb, sb, Rb, Sb, Tb, Ub, Vb, $b, ca, Ba, Oc, Pc, zb)
}

function Walk(a, b) {
    if (0 != Sett_Auto_Move[b] || 1 == Game_Mode)
        if (0 < a.L[b]) a.L[b]--;
        else if (!(20 > floor(100 * LP_Current[b] / LP_Max[b]) && 1 != Game_Mode && 0 == Sett_Move_If_Dying)) {
        var c = .5 * (a.a[b][9].x + a.a[b][10].x),
            d = .5 * (a.a[b][9].y + a.a[b][10].y),
            e = RANGE[b],
            g;
        g = 1 != Game_Mode ? ENfindEnemy(c - 200 - e, d - 20 - e, c + 200 + e, d + 100 + e) : PLfindPlayer(c - 600, d - 300, c + 600, d + 300, 1 - (b >> 2) << 2); - 1 != g && (a.L[b] = 15, e = .6, c < (1 != Game_Mode ? Enemies.a[g][20].x : a.a[g][2].x) ? (c = floor(clamp(c + 14, 0, 511) / 8), d = floor(clamp(d - 6, 8, 383) / 8), 0 <= Terrain.a[d][c] && 8 >= Terrain.a[d][c] && (e = 2), 0 <= Terrain.a[d - 1][c] && 8 >= Terrain.a[d - 1][c] && (e = 4), a.a[b][9].x < a.a[b][10].x ? (a.a[b][7].x += 4, a.a[b][7].y -= 3 * e) : (a.a[b][8].x += 4, a.a[b][8].y -= 3 * e)) : (c = floor(clamp(c - 14, 0, 511) / 8), d = floor(clamp(d - 6, 8, 383) / 8), 0 <= Terrain.a[d][c] && 8 >= Terrain.a[d][c] && (e = 2), 0 <= Terrain.a[d - 1][c] && 8 >= Terrain.a[d - 1][c] && (e = 4), a.a[b][9].x > a.a[b][10].x ? (a.a[b][7].x -= 4, a.a[b][7].y -= 3 * e) : (a.a[b][8].x -= 4, a.a[b][8].y -= 3 * e)))
    }
}

function Swim(a, b) {
    if (0 != Sett_Auto_Move[b] && !(20 > floor(100 * LP_Current[b] / LP_Max[b]) && 0 == Sett_Move_If_Dying)) {
        var c = .5 * (a.a[b][9].x + a.a[b][10].x),
            d = .5 * (a.a[b][9].y + a.a[b][10].y),
            e = RANGE[b],
            e = 1 != Game_Mode ? ENfindEnemy(c - 200 - e, d - 100 - e, c + 200 + e, d + 100 + e) : PLfindPlayer(c - 600, d - 300, c + 600, d + 300, 1 - (b >> 2) << 2); - 1 != e && 9 == Terrain.a[floor(clamp(d, 8, 383) / 8)][floor(clamp(c, 0, 511) / 8)] && (c < (1 != Game_Mode ? Enemies.a[e][20].x : a.a[e][2].x) ? (a.a[b][0].x += .25, a.a[b][1].x += .25) : (a.a[b][0].x -= .25, a.a[b][1].x -= .25), d < (1 != Game_Mode ? Enemies.a[e][20].y : a.a[e][2].y) ? (a.a[b][0].y += .25, a.a[b][1].y += .25) : (a.a[b][0].y -= .25, a.a[b][1].y -= .25), a.a[b][0].x += randomRange(-.25, .25), a.a[b][0].y += randomRange(-.25, .25), a.a[b][1].x += randomRange(-.25, .25), a.a[b][1].y += randomRange(-.25, .25))
    }
}
WIN.fff = SR_Player.prototype.G;
SR_Player.prototype.G = function() {
    var a, b, c;
    this.X();
    var d = 1 != Game_Mode ? 4 : 8;
    for (a = 0; a < d; a++)
        if (0 < this.A[a] && 0 < LP_Current[a] && (this.A[a]--, antiCheatCheck(), LP_Current[a] = maxOf(LP_Current[a] - this.F[a], 0), antiCheatSet()), 0 < this.v[a] && 0 < LP_Current[a]) this.v[a]--;
        else {
            if (0 < this.w[a] && 0 < LP_Current[a] && (this.w[a]--, random(100) < this.M[a])) continue;
            0 != LP_Current[a] && (this.f[a] = 0 == Item_Inv[4 + a] ? 0 : Ranger_Class[a]);
            if ((55 != Current_Stage && 89 != Current_Stage && Current_Screen != Stage_Spawns[Current_Stage].length - 1 || 0 == Enemies.i) && 0 < (this.i[a] & 1) && 0 != LP_Current[a]) {
                b = (this.a[a][9].x + this.a[a][10].x) / 2;
                c = (this.a[a][9].y + this.a[a][10].y) / 2;
                var e = Terrain.g[63];
                7 == Stage_Spawns[Current_Stage][Current_Screen][1] && (e = Terrain.b[63]);
                500 < b && 10 > absVal(8 * e - c) && (Sign_Touched_Mode = Current_Screen != Stage_Spawns[Current_Stage].length - 1 ? 1 : 2)
            }
            this.K[a]++;
            if (0 == LP_Current[a])
                for (b = 0; 11 > b; b++) moveJoint(this.a[a][b], this.g[a][b], .05, .99);
            else if (2 == this.i[a])
                for (b = 0; 11 > b; b++) moveJoint(this.a[a][b], this.g[a][b], .01, .99);
            else if (10 > this.K[a]) moveJoint(this.a[a][0], this.g[a][0], -.2, .99), moveJoint(this.a[a][1], this.g[a][1], 0, .99), moveJoint(this.a[a][2], this.g[a][2], -.1, .99), moveJoint(this.a[a][3], this.g[a][3], 0, .99), moveJoint(this.a[a][4], this.g[a][4], 0, .99), moveJoint(this.a[a][5], this.g[a][5], 0, .99), moveJoint(this.a[a][6], this.g[a][6], 0, .99), moveJoint(this.a[a][7], this.g[a][7], 0, .99), moveJoint(this.a[a][8], this.g[a][8], 0, .99), moveJoint(this.a[a][9], this.g[a][9], .3, .99), moveJoint(this.a[a][10], this.g[a][10], .3, .99);
            else
                for (b = 0; 11 > b; b++) moveJoint(this.a[a][b], this.g[a][b], .05, .99);
            if (0 == LP_Current[a] && this.f[a] != Class_Dead) {
                this.f[a] = Class_Dead;
                for (b = 0; 11 > b; b++) this.a[a][b].x += randomRange(-2, 2), this.a[a][b].y += randomRange(-1, -3);
                if (1 == Game_Mode)
                    for (e = 1 - (a >> 2) << 2, b = 0; 4 > b; b++) checkEff(4 + e + b, 41) && random(100) < getEff(4 + e + b, 8) && (c = PLfindPlayer(this.a[a][0].x - 600, this.a[a][0].y - 300, this.a[a][0].x + 600, this.a[a][0].y + 300, a >> 2 << 2), -1 != c && PLprojectileAttack(Players, getEff(4 + e + b, 9), this.a[a][0].x, this.a[a][0].y, c))
            }
            this.h == a && 1 != Game_Mode && (this.a[this.h][this.u].x += (Mouse_Xpos - this.a[this.h][this.u].x) * (0 == LP_Current[a] ? .04 : .2), this.a[this.h][this.u].y += (Mouse_Ypos - this.a[this.h][this.u].y) * (0 == LP_Current[a] ? .04 : .2));
            this.f[a] && 1 != this.f[a] ? 2 == this.f[a] ? this.P(a) : 3 == this.f[a] ? this.R(a) : 4 == this.f[a] ? this.S(a) : 5 == this.f[a] ? this.T(a) : 6 == this.f[a] ? this.U(a) : 7 == this.f[a] ? this.V(a) : 8 == this.f[a] ? this.W(a) : this.f[a] == Class_Dead && (pullJoints(this.a[a][1], this.a[a][2], 3.6, .5, .5), pullJoints(this.a[a][3], this.a[a][5], 4.8, .5, .5), pullJoints(this.a[a][4], this.a[a][6], 4.8, .5, .5), pullJoints(this.a[a][7], this.a[a][9], 4.8, .5, .5), pullJoints(this.a[a][8], this.a[a][10], 4.8, .5, .5)) : this.O(a);
            0 < (this.i[a] & 1) && (this.K[a] = 0);
            for (b = this.i[a] = 0; 11 > b; b++) this.Y(a, b)
        }
};
WIN.fff = SR_Player.prototype.O;
SR_Player.prototype.O = function(a) {
    var b, c, d = new Vector2D,
        e = 1 - (a >> 2) << 2;
    b = AT_Min[a];
    var g = AT_Max[a],
        h = Agi_Min[a] + randInt(Agi_Max[a] - Agi_Min[a] + 1);
    c = RANGE[a];
    if (this.i[a] && this.f[a] && this.h != a) {
        0 < this.c[a] && this.c[a]--;
        var q = .5 * (this.a[a][9].x + this.a[a][10].x),
            m = .5 * (this.a[a][9].y + this.a[a][10].y);
        c = 1 != Game_Mode ? ENfindEnemy(q - c, m - c, q + c, m) : PLfindPlayer(q - c, m - c, q + c, m, e);
        if (!this.c[a] && -1 != c) {
            this.c[a] = h;
            q < (1 != Game_Mode ? Enemies.a[c][20].x : this.a[c][2].x) ? this.a[a][5].x < this.a[a][6].x ? (this.a[a][5].x += 4, this.a[a][4].x -= 4, this.a[a][2].y += 1, this.b[a] = 5) : (this.a[a][6].x += 4, this.a[a][3].x -= 4, this.a[a][2].y += 1, this.b[a] = 6) : this.a[a][5].x > this.a[a][6].x ? (this.a[a][5].x -= 4, this.a[a][4].x += 4, this.a[a][2].y += 1, this.b[a] = 5) : (this.a[a][6].x -= 4, this.a[a][3].x += 4, this.a[a][2].y += 1, this.b[a] = 6);
            antiCheatCheck();
            h = getVal(Item_Inv[4 + a], 36);
            MP_Bar[a] = minOf(MP_Bar[a] + MAG[a], h);
            if (MP_Bar[a] == h && 0 < h || -1 == h) MP_Bar[a] = 0, PLprojectileAttack(this, a, this.a[a][this.b[a]].x, this.a[a][this.b[a]].y, c);
            checkEff(4 + a, 46) && (h = getEff(4 + a, 8), LP_Current[a] = clamp(LP_Current[a] + h, 0, LP_Max[a]), Indicators.add(this.a[a][0].x, this.a[a][0].y, 0, h, 65280));
            antiCheatSet()
        } - 1 == c && Walk(this, a);
        Swim(this, a)
    }
    if (-1 != this.b[a] && this.f[a] && this.h != a && (c = getVal(Item_Inv[4 + a], 9), checkEff(4 + a, 27) && random(100) < getEff(4 + a, 8) && (c = 1), checkEff(4 + a, 29) && random(100) < getEff(4 + a, 8) && (b += floor(getEff(4 + a, 9) * b / 100), g += floor(getEff(4 + a, 9) * g / 100)), h = 12, q = 8, checkEff(4 + a, 42) && (h += floor(12 * getEff(4 + a, 8) / 100), q += floor(8 * getEff(4 + a, 8) / 100)), e = 1 != Game_Mode ? ENtakeDamage(c, 0, 0, b, g, this.a[a][this.b[a]].x, this.a[a][this.b[a]].y, h, q) : PLtakeDamage(c, 0, 0, b, g, this.a[a][this.b[a]].x, this.a[a][this.b[a]].y, h, q, e), -1 != e)) {
        this.b[a] = -1;
        checkEff(4 + a, 11) && (h = maxOf(1, floor(this.j * getEff(4 + a, 8) / 100)), antiCheatCheck(), LP_Current[a] = clamp(LP_Current[a] + h, 0, LP_Max[a]), antiCheatSet(), Indicators.add(this.a[a][0].x, this.a[a][0].y, 0, h, 65280));
        checkEff(4 + a, 12) && !Game_Mode && random(100) < getEff(4 + a, 8) && Drops.add(this.a[a][0].x, this.a[a][0].y, 2, 0, 0);
        if (checkEff(4 + a, 37) && !Game_Mode && random(100) < getEff(4 + a, 8)) {
            g = 100;
            for (b = 0; 4 > b; b++) checkEff(4 + b, 35) && (g += getEff(4 + b, 8));
            Drops.add(this.a[a][0].x, this.a[a][0].y, 1, floor(this.j * g / 100), 0)
        }
        checkEff(4 + a, 43) && random(100) < getEff(4 + a, 8) && (b = getEff(4 + a, 9), 1 != Game_Mode ? Vdistance(d, Enemies.a[e][0], this.a[a][1]) : Vdistance(d, Players.a[e][1], this.a[a][1]), normalize(d), scaleVector2D(d, .2 * b), 1 != Game_Mode ? scaleVector2D(d, Text_Spacing[EN_Info[Enemies.f[e]][EN_Species]] / EN_Info[Enemies.f[e]][EN_Size]) : scaleVector2D(d, .1), 1 != Game_Mode ? Enemies.c[e][0].sub(d) : Players.g[e][0].sub(d))
    }
    pullJoints(this.a[a][0], this.a[a][1], 3.6, .5, .5);
    pullJoints(this.a[a][1], this.a[a][2], 3.6, .5, .5);
    pullJoints(this.a[a][1], this.a[a][3], 4.8, .5, .5);
    pullJoints(this.a[a][1], this.a[a][4], 4.8, .5, .5);
    pullJoints(this.a[a][3], this.a[a][5], 4.8, .5, .5);
    pullJoints(this.a[a][4], this.a[a][6], 4.8, .5, .5);
    pullJoints(this.a[a][2], this.a[a][7], 4.8, .5, .5);
    pullJoints(this.a[a][2], this.a[a][8], 4.8, .5, .5);
    pullJoints(this.a[a][7], this.a[a][9], 4.8, .5, .5);
    pullJoints(this.a[a][8], this.a[a][10], 4.8, .5, .5);
    pullJoints(this.a[a][7], this.a[a][8], 6, .1, .1)
};
WIN.fff = SR_Player.prototype.P;
SR_Player.prototype.P = function(a) {
    var b, c, d = new Vector2D,
        e = 1 - (a >> 2) << 2;
    b = AT_Min[a];
    var g = AT_Max[a],
        h = Agi_Min[a] + randInt(Agi_Max[a] - Agi_Min[a] + 1),
        q = RANGE[a];
    if (this.i[a] && this.h != a) {
        0 < this.c[a] && this.c[a]--;
        var m = .5 * (this.a[a][9].x + this.a[a][10].x),
            l = .5 * (this.a[a][9].y + this.a[a][10].y);
        c = 1 != Game_Mode ? ENfindEnemy(m - q, l - q, m + q, l) : PLfindPlayer(m - q, l - q, m + q, l, e);
        this.c[a] || -1 == c || (this.c[a] = h, m < (1 != Game_Mode ? Enemies.a[c][20].x : this.a[c][2].x) ? (this.a[a][5].x += 3, this.a[a][5].y += .2 * (l - 2 - this.a[a][5].y), this.a[a][6].x = this.a[a][5].x - 2, this.a[a][6].y = this.a[a][5].y, this.a[a][1].x -= 3) : (this.a[a][5].x -= 3, this.a[a][5].y += .2 * (l - 2 - this.a[a][5].y), this.a[a][6].x = this.a[a][5].x + 2, this.a[a][6].y = this.a[a][5].y, this.a[a][1].x += 3), this.b[a] = 5, antiCheatCheck(), h = getVal(Item_Inv[4 + a], 36), MP_Bar[a] = minOf(MP_Bar[a] + MAG[a], h), MP_Bar[a] == h && 0 < h && (MP_Bar[a] = 0, this.I[a] = getVal(Item_Inv[4 + a], 41)), checkEff(4 + a, 46) && (h = getEff(4 + a, 8), LP_Current[a] = clamp(LP_Current[a] + h, 0, LP_Max[a]), Indicators.add(this.a[a][0].x, this.a[a][0].y, 0, h, 65280)), antiCheatSet()); - 1 == c && Walk(this, a);
        Swim(this, a)
    }
    if (-1 != this.b[a] && (checkEff(4 + a, 29) && random(100) < getEff(4 + a, 8) && (b += floor(getEff(4 + a, 9) * b / 100), g += floor(getEff(4 + a, 9) * g / 100)), Vdistance(d, this.a[a][5], this.a[a][6]), normalize(d), scaleVector2D(d, q), c = this.a[a][6].x + d.x / 2, h = this.a[a][6].y + d.y / 2, -1 != (1 != Game_Mode ? ENtakeDamage(1, 0, 0, b, g, c, h, absVal(d.x), absVal(d.y)) : PLtakeDamage(1, 0, 0, b, g, c, h, absVal(d.x), absVal(d.y), e)) && (this.b[a] = -1, checkEff(4 + a, 11) && (h = maxOf(1, floor(this.j * getEff(4 + a, 8) / 100)), antiCheatCheck(), LP_Current[a] = clamp(LP_Current[a] + h, 0, LP_Max[a]), antiCheatSet(), Indicators.add(this.a[a][0].x, this.a[a][0].y, 0, h, 65280)), checkEff(4 + a, 12) && !Game_Mode && random(100) < getEff(4 + a, 8) && Drops.add(this.a[a][0].x, this.a[a][0].y, 2, 0, 0), checkEff(4 + a, 37) && !Game_Mode && random(100) < getEff(4 + a, 8)))) {
        g = 100;
        for (b = 0; 4 > b; b++) checkEff(4 + b, 35) && (g += getEff(4 + b, 8));
        Drops.add(this.a[a][0].x, this.a[a][0].y, 1, floor(this.j * g / 100), 0)
    }
    pullJoints(this.a[a][0], this.a[a][1], 3.6, .5, .5);
    pullJoints(this.a[a][1], this.a[a][2], 3.6, .5, .5);
    pullJoints(this.a[a][1], this.a[a][3], 4.8, .5, .5);
    pullJoints(this.a[a][1], this.a[a][4], 4.8, .5, .5);
    pullJoints(this.a[a][3], this.a[a][5], 4.8, .5, .5);
    pullJoints(this.a[a][4], this.a[a][6], 4.8, .5, .5);
    pullJoints(this.a[a][3], this.a[a][4], 4.8, .01, .01);
    pullJoints(this.a[a][5], this.a[a][6], 2.4, .5, .5);
    pullJoints(this.a[a][2], this.a[a][7], 4.8, .5, .5);
    pullJoints(this.a[a][2], this.a[a][8], 4.8, .5, .5);
    pullJoints(this.a[a][7], this.a[a][9], 4.8, .5, .5);
    pullJoints(this.a[a][8], this.a[a][10], 4.8, .5, .5);
    pullJoints(this.a[a][7], this.a[a][8], 6, .1, .1);
    0 < this.I[a] && (this.I[a]--, Vdistance(d, this.a[a][5], this.a[a][6]), normalize(d), scaleVector2D(d, q), d.add(this.a[a][6]), 1 != Game_Mode ? PLprojectileAttack(this, a, d.x, d.y, 0) : PLprojectileAttack(this, a, d.x, d.y, e))
};
WIN.fff = SR_Player.prototype.R;
SR_Player.prototype.R = function(a) {
    var b;
    b = 1 - (a >> 2) << 2;
    var c = Agi_Min[a] + randInt(Agi_Max[a] - Agi_Min[a] + 1),
        d = RANGE[a],
        e = .5 * (this.a[a][9].x + this.a[a][10].x),
        g = .5 * (this.a[a][9].y + this.a[a][10].y);
    b = 1 != Game_Mode ? ENfindEnemy(e - d, g - d, e + d, g + d) : PLfindPlayer(e - d, g - d, e + d, g + d, b); - 1 != b && (e < (1 != Game_Mode ? Enemies.a[b][20].x : this.a[b][2].x) ? (this.a[a][6].x += .2, this.a[a][6].y -= .2, this.a[a][5].x -= .2) : (this.a[a][6].x -= .2, this.a[a][6].y -= .2, this.a[a][5].x += .2), this.a[a][5].y += .2);
    this.i[a] && this.h != a && (0 < this.c[a] && this.c[a]--, this.c[a] || (-1 != b && (this.c[a] = c, pullJoints(this.a[a][5], this.a[a][6], 2, .2, .2), this.b[a] = 6), -1 != this.b[a] && (PLprojectileAttack(this, a, this.a[a][6].x, this.a[a][6].y, b), this.b[a] = -1, checkEff(4 + a, 46) && (c = getEff(4 + a, 8), antiCheatCheck(), LP_Current[a] = clamp(LP_Current[a] + c, 0, LP_Max[a]), antiCheatSet(), Indicators.add(this.a[a][0].x, this.a[a][0].y, 0, c, 65280)))), -1 == b && (Walk(this, a), Swim(this, a)));
    pullJoints(this.a[a][0], this.a[a][1], 3.6, .5, .5);
    pullJoints(this.a[a][1], this.a[a][2], 3.6, .5, .5);
    pullJoints(this.a[a][1], this.a[a][3], 4.8, .5, .5);
    pullJoints(this.a[a][1], this.a[a][4], 4.8, .5, .5);
    pullJoints(this.a[a][3], this.a[a][5], 4.8, .5, .5);
    pullJoints(this.a[a][4], this.a[a][6], 4.8, .5, .5);
    pullJoints(this.a[a][5], this.a[a][6], 9.6, .02, .02);
    pullJoints(this.a[a][2], this.a[a][7], 4.8, .5, .5);
    pullJoints(this.a[a][2], this.a[a][8], 4.8, .5, .5);
    pullJoints(this.a[a][7], this.a[a][9], 4.8, .5, .5);
    pullJoints(this.a[a][8], this.a[a][10], 4.8, .5, .5);
    pullJoints(this.a[a][7], this.a[a][8], 6, .1, .1)
};
WIN.fff = SR_Player.prototype.S;
SR_Player.prototype.S = function(a) {
    var b;
    b = 1 - (a >> 2) << 2;
    var c = Agi_Min[a] + randInt(Agi_Max[a] - Agi_Min[a] + 1),
        d = RANGE[a],
        e = .5 * (this.a[a][9].x + this.a[a][10].x),
        g = .5 * (this.a[a][9].y + this.a[a][10].y);
    b = 1 != Game_Mode ? ENfindEnemy(e - d, g - d, e + d, g + d) : PLfindPlayer(e - d, g - d, e + d, g + d, b); - 1 != b && (e < (1 != Game_Mode ? Enemies.a[b][20].x : this.a[b][2].x) ? (this.a[a][5].x += .1, this.a[a][6].x += .1, this.a[a][1].x -= .2) : (this.a[a][5].x -= .1, this.a[a][6].x -= .1, this.a[a][1].x += .2));
    this.i[a] && this.h != a && (0 < this.c[a] && this.c[a]--, this.c[a] || (-1 != b && (this.c[a] = c, e < (1 != Game_Mode ? Enemies.a[b][20].x : this.a[b][2].x) ? (pullJoints(this.a[a][5], this.a[a][6], 0, .1, .1), this.b[a] = 6) : (pullJoints(this.a[a][5], this.a[a][6], 0, .1, .1), this.b[a] = 5)), -1 != this.b[a] && (PLprojectileAttack(this, a, this.a[a][6].x, this.a[a][6].y, b), this.b[a] = -1, checkEff(4 + a, 46) && (c = getEff(4 + a, 8), antiCheatCheck(), LP_Current[a] = clamp(LP_Current[a] + c, 0, LP_Max[a]), antiCheatSet(), Indicators.add(this.a[a][0].x, this.a[a][0].y, 0, c, 65280)))), -1 == b && (Walk(this, a), Swim(this, a)));
    pullJoints(this.a[a][0], this.a[a][1], 3.6, .5, .5);
    pullJoints(this.a[a][1], this.a[a][2], 3.6, .5, .5);
    pullJoints(this.a[a][1], this.a[a][3], 4.8, .5, .5);
    pullJoints(this.a[a][1], this.a[a][4], 4.8, .5, .5);
    pullJoints(this.a[a][3], this.a[a][5], 4.8, .5, .5);
    pullJoints(this.a[a][4], this.a[a][6], 4.8, .5, .5);
    pullJoints(this.a[a][5], this.a[a][6], 10.8, .01, .01);
    pullJoints(this.a[a][2], this.a[a][7], 4.8, .5, .5);
    pullJoints(this.a[a][2], this.a[a][8], 4.8, .5, .5);
    pullJoints(this.a[a][7], this.a[a][9], 4.8, .5, .5);
    pullJoints(this.a[a][8], this.a[a][10], 4.8, .5, .5);
    pullJoints(this.a[a][7], this.a[a][8], 6, .1, .1)
};
WIN.fff = SR_Player.prototype.T;
SR_Player.prototype.T = function(a) {
    var b, c, d = 1 - (a >> 2) << 2;
    b = Agi_Min[a] + randInt(Agi_Max[a] - Agi_Min[a] + 1);
    c = RANGE[a];
    var e = .5 * (this.a[a][9].x + this.a[a][10].x),
        g = .5 * (this.a[a][9].y + this.a[a][10].y);
    c = 1 != Game_Mode ? ENfindEnemy(e - c, g - c / 2, e + c, g + c / 2) : PLfindPlayer(e - c, g - c / 2, e + c, g + c / 2, d);
    if (this.i[a] && this.h != a) {
        0 < this.c[a] && this.c[a]--;
        if (!this.c[a] && -1 != c) {
            this.c[a] = b;
            this.a[a][6].y -= 2;
            this.a[a][5].y += 2;
            if (1 != Game_Mode)
                for (b = 0; b < Enemies.i; b++) 0 != Enemies.D[b] && PLprojectileAttack(this, a, this.a[a][6].x, this.a[a][6].y, b);
            else
                for (b = d; b < d + 4; b++) 0 != Players.H[b] && PLprojectileAttack(this, a, this.a[a][6].x, this.a[a][6].y, b);
            if (checkEff(4 + a, 46)) {
                d = getEff(4 + a, 8);
                antiCheatCheck();
                for (b = a >> 2 << 2; b < (a >> 2 << 2) + 4; b++) a != b && 0 != LP_Current[b] && (LP_Current[b] = clamp(LP_Current[b] + d, 0, LP_Max[b]), Indicators.add(this.a[b][0].x, this.a[b][0].y, 0, d, 65280));
                antiCheatSet()
            }
        } - 1 == c && (Walk(this, a), Swim(this, a))
    }
    pullJoints(this.a[a][0], this.a[a][1], 3.6, .5, .5);
    pullJoints(this.a[a][1], this.a[a][2], 3.6, .5, .5);
    pullJoints(this.a[a][1], this.a[a][3], 4.8, .5, .5);
    pullJoints(this.a[a][1], this.a[a][4], 4.8, .5, .5);
    pullJoints(this.a[a][3], this.a[a][5], 4.8, .5, .5);
    pullJoints(this.a[a][4], this.a[a][6], 4.8, .5, .5);
    pullJoints(this.a[a][2], this.a[a][7], 4.8, .5, .5);
    pullJoints(this.a[a][2], this.a[a][8], 4.8, .5, .5);
    pullJoints(this.a[a][7], this.a[a][9], 4.8, .5, .5);
    pullJoints(this.a[a][8], this.a[a][10], 4.8, .5, .5);
    pullJoints(this.a[a][7], this.a[a][8], 6, .1, .1)
};
WIN.fff = SR_Player.prototype.U;
SR_Player.prototype.U = function(a) {
    var b, c, d = new Vector2D;
    c = 1 - (a >> 2) << 2;
    b = Agi_Min[a] + randInt(Agi_Max[a] - Agi_Min[a] + 1);
    var e = RANGE[a],
        g = .5 * (this.a[a][9].x + this.a[a][10].x),
        h = .5 * (this.a[a][9].y + this.a[a][10].y);
    c = 1 != Game_Mode ? ENfindEnemy(g - e, h - e, g + e, h + e) : PLfindPlayer(g - e, h - e, g + e, h + e, c); - 1 != c && this.h != a && (1 != Game_Mode ? Vdistance(d, Enemies.a[c][20], this.a[a][6]) : Vdistance(d, this.a[c][2], this.a[a][6]), normalize(d), this.a[a][5].x += .2 * d.x, this.a[a][5].y += .2 * d.y, this.a[a][6].x += .2 * d.x, this.a[a][6].y += .2 * d.y, this.a[a][1].x -= .4 * d.x, this.a[a][1].y -= .4 * d.y);
    if (this.i[a] && this.h != a) {
        0 < this.c[a] && this.c[a]--;
        if (!this.c[a] && (-1 != c && (this.c[a] = b, this.a[a][5].y -= 1.5, this.a[a][6].y -= 1.5, this.a[a][3].y += 1.6, this.a[a][4].y += 1.6, this.b[a] = 6), -1 != this.b[a])) {
            e = getVal(Item_Inv[4 + a], 36);
            g = 1;
            258 == Item_Inv[4 + a] && (g = getVal(Item_Inv[4 + a], 12), checkEff(4 + a, 26) && (g += getEff(4 + a, 8) + floor(g * getEff(4 + a, 9) / 100)));
            antiCheatCheck();
            if (0 < e && (e = maxOf(e - MAG[a], 1), e * g <= Team_Gold)) {
                Team_Gold = clamp(Team_Gold - e * g, 0, 9999999);
                for (b = 0; b < g; b++) Indicators.add(this.a[a][6].x, this.a[a][6].y, 0 > d.x ? .5 : -.5, e, 16776960);
                e = 0
            }
            0 == e && (PLprojectileAttack(this, a, this.a[a][6].x, this.a[a][6].y, c), checkEff(4 + a, 46) && (d = getEff(4 + a, 8), LP_Current[a] = clamp(LP_Current[a] + d, 0, LP_Max[a]), Indicators.add(this.a[a][0].x, this.a[a][0].y, 0, d, 65280)));
            antiCheatSet();
            this.b[a] = -1
        } - 1 == c && (Walk(this, a), Swim(this, a))
    }
    pullJoints(this.a[a][0], this.a[a][1], 3.6, .5, .5);
    pullJoints(this.a[a][1], this.a[a][2], 3.6, .5, .5);
    pullJoints(this.a[a][1], this.a[a][3], 4.8, .5, .5);
    pullJoints(this.a[a][1], this.a[a][4], 4.8, .5, .5);
    pullJoints(this.a[a][3], this.a[a][5], 4.8, .5, .5);
    pullJoints(this.a[a][4], this.a[a][6], 4.8, .5, .5);
    pullJoints(this.a[a][5], this.a[a][6], 1.2, .5, .5);
    pullJoints(this.a[a][2], this.a[a][7], 4.8, .5, .5);
    pullJoints(this.a[a][2], this.a[a][8], 4.8, .5, .5);
    pullJoints(this.a[a][7], this.a[a][9], 4.8, .5, .5);
    pullJoints(this.a[a][8], this.a[a][10], 4.8, .5, .5);
    pullJoints(this.a[a][7], this.a[a][8], 6, .1, .1)
};
WIN.fff = SR_Player.prototype.V;
SR_Player.prototype.V = function(a) {
    var b, c = new Vector2D,
        d = 1 - (a >> 2) << 2,
        e = AT_Min[a],
        g = AT_Max[a],
        h = Agi_Min[a] + randInt(Agi_Max[a] - Agi_Min[a] + 1),
        q = RANGE[a];
    for (b = 11; 14 >= b; b++) moveJoint(this.a[a][b], this.g[a][b], .05, .95);
    if (this.i[a] && this.h != a) {
        0 < this.c[a] && this.c[a]--;
        b = .5 * (this.a[a][9].x + this.a[a][10].x);
        var m = .5 * (this.a[a][9].y + this.a[a][10].y);
        b = 1 != Game_Mode ? ENfindEnemy(b - q, m - q - 20, b + q, m + 20) : PLfindPlayer(b - q, m - q - 20, b + q, m + 20, d);
        this.c[a] || -1 == b || (this.c[a] = h, this.a[a][5].x < this.a[a][6].x ? (this.a[a][5].x += 4, this.a[a][4].x -= 4) : (this.a[a][6].x += 4, this.a[a][3].x -= 4), this.a[a][2].y += 1, this.b[a] = 14, antiCheatCheck(), h = getVal(Item_Inv[4 + a], 36), MP_Bar[a] = minOf(MP_Bar[a] + MAG[a], h), checkEff(4 + a, 46) && (h = getEff(4 + a, 8), LP_Current[a] = clamp(LP_Current[a] + h, 0, LP_Max[a]), Indicators.add(this.a[a][0].x, this.a[a][0].y, 0, h, 65280)), antiCheatSet()); - 1 == b && Walk(this, a);
        Swim(this, a)
    }
    if (-1 != this.b[a] && (checkEff(4 + a, 29) && random(100) < getEff(4 + a, 8) && (e += floor(getEff(4 + a, 9) * e / 100), g += floor(getEff(4 + a, 9) * g / 100)), h = 20, checkEff(4 + a, 42) && (h += floor(20 * getEff(4 + a, 8) / 100)), d = 1 != Game_Mode ? ENtakeDamage(1, 0, 0, e, g, this.a[a][this.b[a]].x, this.a[a][this.b[a]].y, h, h) : PLtakeDamage(1, 0, 0, e, g, this.a[a][this.b[a]].x, this.a[a][this.b[a]].y, h, h, d), -1 != d)) {
        antiCheatCheck();
        h = getVal(Item_Inv[4 + a], 36);
        if (MP_Bar[a] == h && 0 < h || -1 == h) MP_Bar[a] = 0, e = this.a[a][this.b[a]].y, g = floor(clamp(this.a[a][this.b[a]].x, 0, 511) / 8), h = floor(clamp(this.a[a][this.b[a]].y, 0, 255) / 8), 0 <= h - Terrain.b[g] ? e = 8 * Terrain.b[g] + 7 : 3 >= absVal(h - Terrain.g[g]) && (e = 8 * Terrain.g[g] + 7), PLprojectileAttack(this, a, this.a[a][this.b[a]].x, e, d);
        antiCheatSet();
        this.b[a] = -1;
        checkEff(4 + a, 11) && (h = maxOf(1, floor(this.j * getEff(4 + a, 8) / 100)), antiCheatCheck(), LP_Current[a] = clamp(LP_Current[a] + h, 0, LP_Max[a]), antiCheatSet(), Indicators.add(this.a[a][0].x, this.a[a][0].y, 0, h, 65280));
        checkEff(4 + a, 12) && !Game_Mode && random(100) < getEff(4 + a, 8) && Drops.add(this.a[a][0].x, this.a[a][0].y, 2, 0, 0);
        if (checkEff(4 + a, 37) && !Game_Mode && random(100) < getEff(4 + a, 8)) {
            e = 100;
            for (b = 0; 4 > b; b++) checkEff(4 + b, 35) && (e += getEff(4 + b, 8));
            Drops.add(this.a[a][0].x, this.a[a][0].y, 1, floor(this.j * e / 100), 0)
        }
        checkEff(4 + a, 43) && random(100) < getEff(4 + a, 8) && (e = getEff(4 + a, 9), 1 != Game_Mode ? Vdistance(c, Enemies.a[d][0], this.a[a][1]) : Vdistance(c, Players.a[d][1], this.a[a][1]), normalize(c), scaleVector2D(c, .2 * e), 1 != Game_Mode ? scaleVector2D(c, Text_Spacing[EN_Info[Enemies.f[d]][EN_Species]] / EN_Info[Enemies.f[d]][EN_Size]) : scaleVector2D(c, .1), 1 != Game_Mode ? Enemies.c[d][0].sub(c) : Players.g[d][0].sub(c))
    }
    pullJoints(this.a[a][0], this.a[a][1], 3.6, .5, .5);
    pullJoints(this.a[a][1], this.a[a][2], 3.6, .5, .5);
    pullJoints(this.a[a][1], this.a[a][3], 4.8, .5, .5);
    pullJoints(this.a[a][1], this.a[a][4], 4.8, .5, .5);
    pullJoints(this.a[a][3], this.a[a][5], 4.8, .5, .5);
    pullJoints(this.a[a][4], this.a[a][6], 4.8, .5, .5);
    pullJoints(this.a[a][5], this.a[a][6], 14.4, .02, .02);
    pullJoints(this.a[a][5], this.a[a][11], 4.8, 0, .3);
    pullJoints(this.a[a][11], this.a[a][12], 4.8, 0, .3);
    pullJoints(this.a[a][12], this.a[a][13], 4.8, 0, .3);
    pullJoints(this.a[a][13], this.a[a][14], 4.8, 0, .3);
    pullJoints(this.a[a][2], this.a[a][7], 4.8, .5, .5);
    pullJoints(this.a[a][2], this.a[a][8], 4.8, .5, .5);
    pullJoints(this.a[a][7], this.a[a][9], 4.8, .5, .5);
    pullJoints(this.a[a][8], this.a[a][10], 4.8, .5, .5);
    pullJoints(this.a[a][7], this.a[a][8], 6, .1, .1)
};
WIN.fff = SR_Player.prototype.W;
SR_Player.prototype.W = function(a) {
    var b, c, d = new Vector2D,
        e = 1 - (a >> 2) << 2,
        g = AT_Min[a],
        h = AT_Max[a],
        q = Agi_Min[a] + randInt(Agi_Max[a] - Agi_Min[a] + 1),
        m = RANGE[a],
        l;
    l = 10 > DEX[a] ? 1 : 30 > DEX[a] ? 2 : 60 > DEX[a] ? 3 : 100 > DEX[a] ? 4 : 5;
    checkEff(4 + a, 47) && (l += 1);
    for (b = 11; 14 >= b; b++) moveJoint(this.a[a][b], this.g[a][b], .05, .95);
    for (b = 15; 20 >= b; b++) moveJoint(this.a[a][b], this.g[a][b], 0, 1);
    this.a[a][11].x -= .1;
    this.a[a][11].y -= .1;
    this.a[a][12].x -= .1;
    this.a[a][12].y += .1;
    this.a[a][13].x += .1;
    this.a[a][13].y -= .1;
    this.a[a][14].x += .1;
    this.a[a][14].y += .1;
    if (this.i[a] && this.h != a) {
        0 < this.c[a] && this.c[a]--;
        b = .5 * (this.a[a][9].x + this.a[a][10].x);
        c = .5 * (this.a[a][9].y + this.a[a][10].y);
        c = 1 != Game_Mode ? ENfindEnemy(b - m, c - m, b + m, c + m) : PLfindPlayer(b - m, c - m, b + m, c + m, e);
        for (b = 0; b < l && 0 != this.s[a][b]; b++);
        this.c[a] || -1 == c || b == l || (this.c[a] = q, this.s[a][b] = 1, this.C[a][b] = floor(m / 2) + 20, this.D[a][b] = 0, this.a[a][12].x -= 2, this.a[a][14].x += 2, this.b[a] = 15 + b, this.a[a][this.b[a]].set(this.a[a][0]), this.a[a][this.b[a]].y -= 5, this.g[a][this.b[a]].set(this.a[a][this.b[a]]), 1 != Game_Mode ? Vdistance(d, Enemies.a[c][20], this.a[a][this.b[a]]) : Vdistance(d, this.a[c][1], this.a[a][this.b[a]]), normalize(d), scaleVector2D(d, 2), this.a[a][this.b[a]].add(d)); - 1 == c && (Walk(this, a), Swim(this, a))
    }
    for (b = 0; b < l; b++)
        if (0 != this.s[a][b] && (this.b[a] = 15 + b, this.C[a][b]--, 0 >= this.C[a][b] && (1 == this.s[a][b] ? (this.s[a][b]++, d.set(this.a[a][0]), d.y -= 5, this.g[a][this.b[a]].set(this.a[a][this.b[a]]), Vdistance(d, d, this.a[a][this.b[a]]), q = normalize(d), scaleVector2D(d, 2), this.a[a][this.b[a]].add(d), this.C[a][b] = floor(q / 2)) : (this.s[a][b] = 0, this.C[a][b] = 0, this.D[a][b] = 0)), this.D[a][b]--, !(0 < this.D[a][b]) && (q = 0, checkEff(4 + a, 27) && random(100) < getEff(4 + a, 8) && (q = 1), checkEff(4 + a, 29) && random(100) < getEff(4 + a, 8) && (g += floor(getEff(4 + a, 9) * g / 100), h += floor(getEff(4 + a, 9) * h / 100)), q = 1 != Game_Mode ? ENtakeDamage(q, 0, 0, g, h, this.a[a][this.b[a]].x, this.a[a][this.b[a]].y, 10, 10) : PLtakeDamage(q, 0, 0, g, h, this.a[a][this.b[a]].x, this.a[a][this.b[a]].y, 10, 10, e), -1 != q))) {
            antiCheatCheck();
            m = getVal(Item_Inv[4 + a], 36);
            MP_Bar[a] = minOf(MP_Bar[a] + MAG[a], m);
            if (MP_Bar[a] == m && 0 < m || -1 == m) MP_Bar[a] = 0, PLprojectileAttack(this, a, this.a[a][this.b[a]].x, this.a[a][this.b[a]].y, q);
            checkEff(4 + a, 46) && (q = getEff(4 + a, 8), LP_Current[a] = clamp(LP_Current[a] + q, 0, LP_Max[a]), Indicators.add(this.a[a][0].x, this.a[a][0].y, 0, q, 65280));
            antiCheatSet();
            this.D[a][b] = getVal(Item_Inv[4 + a], 7)
        }
    pullJoints(this.a[a][0], this.a[a][1], 3.6, .5, .5);
    pullJoints(this.a[a][1], this.a[a][2], 3.6, .5, .5);
    pullJoints(this.a[a][1], this.a[a][3], 4.8, .5, .5);
    pullJoints(this.a[a][1], this.a[a][4], 4.8, .5, .5);
    pullJoints(this.a[a][3], this.a[a][5], 4.8, .5, .5);
    pullJoints(this.a[a][4], this.a[a][6], 4.8, .5, .5);
    pullJoints(this.a[a][2], this.a[a][7], 4.8, .5, .5);
    pullJoints(this.a[a][2], this.a[a][8], 4.8, .5, .5);
    pullJoints(this.a[a][7], this.a[a][9], 4.8, .5, .5);
    pullJoints(this.a[a][8], this.a[a][10], 4.8, .5, .5);
    pullJoints(this.a[a][7], this.a[a][8], 6, .1, .1);
    pullJoints(this.a[a][1], this.a[a][11], 3.6, 0, .1);
    pullJoints(this.a[a][1], this.a[a][12], 12, 0, .1);
    pullJoints(this.a[a][11], this.a[a][12], 9.6, .5, .5);
    pullJoints(this.a[a][1], this.a[a][13], 3.6, 0, .1);
    pullJoints(this.a[a][1], this.a[a][14], 12, 0, .1);
    pullJoints(this.a[a][13], this.a[a][14], 9.6, .5, .5)
};
WIN.fff = SR_Player.prototype.B;
SR_Player.prototype.B = function() {
    var a, b, c = new Vector2D,
        d = new Vector2D,
        e = 1 != Game_Mode ? 4 : 8;
    for (a = 0; a < e; a++) {
        var g = getVal(Item_Inv[4 + a], 16),
            h = getVal(Item_Inv[4 + a], 6),
            q = 15908203,
            m = 16777215;
        checkEff(4 + a, 32) && (q = 13421772, m = 3342438);
        0 < this.v[a] ? (q = 1989840, m = 5934817) : 0 < this.w[a] ? (q = 9840, m = 1989840) : 0 < this.A[a] && (q = 3381504, m = 3407616);
        0 < this.J[a] && (this.J[a]--, m = 16711680);
        Display_Mode2 = Display_Mode = 1;
        if (a != Selected_Player || Game_Mode || 2 != Sett_PL_Symbol)
            if (0 < Anger_Crown_Lightning) {
                Anger_Crown_Lightning--;
                var l = minOf(Anger_Crown_Lightning, 64);
                for (b = 0; 11 > b; b++) dispItemCentered(Effect_Img, floor(this.a[a][b].x), floor(this.a[a][b].y), 24, 24, 0, 0, 12, 12, l << 24 | 16777062);
                120 < Anger_Crown_Lightning && (b = randInt(11), PLprojectileAttack(Players, 563, Players.a[a][b].x, Players.a[a][b].y, 0))
            } else
                for (b = 0; 11 > b; b++) dispItemCentered(Effect_Img, floor(this.a[a][b].x), floor(this.a[a][b].y), 12, 12, 0, 0, 12, 12, 1073741824);
        else
            for (b = 0; 11 > b; b++) dispItemCentered(Effect_Img, floor(this.a[a][b].x), floor(this.a[a][b].y), 12, 12, 0, 0, 12, 12, 1358888960);
        Display_Mode = Display_Mode2 = 0;
        8 == this.f[a] && (b = (h & 16711680) >> 17 << 16 | (h & 65280) >> 9 << 8 | (h & 255) >> 1, drawLine(this.a[a][1].x, this.a[a][1].y, this.a[a][11].x, this.a[a][11].y, b), drawLine(this.a[a][1].x, this.a[a][1].y, this.a[a][12].x, this.a[a][12].y, b), drawLine(this.a[a][11].x, this.a[a][11].y, this.a[a][12].x, this.a[a][12].y, b), drawLine(this.a[a][1].x, this.a[a][1].y, this.a[a][13].x, this.a[a][13].y, b), drawLine(this.a[a][1].x, this.a[a][1].y, this.a[a][14].x, this.a[a][14].y, b), drawLine(this.a[a][13].x, this.a[a][13].y, this.a[a][14].x, this.a[a][14].y, b));
        drawLine(this.a[a][1].x, this.a[a][1].y, this.a[a][2].x, this.a[a][2].y, m);
        this.f[a] != Class_Dead && (drawLine(this.a[a][1].x, this.a[a][1].y, this.a[a][3].x, this.a[a][3].y, m), drawLine(this.a[a][1].x, this.a[a][1].y, this.a[a][4].x, this.a[a][4].y, m));
        drawLine(this.a[a][3].x, this.a[a][3].y, this.a[a][5].x, this.a[a][5].y, m);
        drawLine(this.a[a][4].x, this.a[a][4].y, this.a[a][6].x, this.a[a][6].y, m);
        this.f[a] != Class_Dead && (drawLine(this.a[a][2].x, this.a[a][2].y, this.a[a][7].x, this.a[a][7].y, m), drawLine(this.a[a][2].x, this.a[a][2].y, this.a[a][8].x, this.a[a][8].y, m));
        drawLine(this.a[a][7].x, this.a[a][7].y, this.a[a][9].x, this.a[a][9].y, m);
        drawLine(this.a[a][8].x, this.a[a][8].y, this.a[a][10].x, this.a[a][10].y, m);
        outlineRect(floor(this.a[a][0].x) - 2, floor(this.a[a][0].y) - 2, 5, 5, q);
        Display_Mode2 = 2;
        checkEff(4 + a, 48) && dispItem(Drop_Img, floor(this.a[a][0].x) - 6, floor(this.a[a][0].y) - 6 - 6, 12, 12, 228, 0, 12, 12, 16766720);
        checkEff(4 + a, 49) && dispItem(Drop_Img, floor(this.a[a][0].x) - 6, floor(this.a[a][0].y) - 6 - 6, 12, 12, 228, 0, 12, 12, 14540253);
        Display_Mode2 = 0;
        if (1 == this.f[a]) g = 3, checkEff(4 + a, 42) && (g = 5), filledRect(floor(this.a[a][5].x) - 1, floor(this.a[a][5].y) - 1, g, g, h), filledRect(floor(this.a[a][6].x) - 1, floor(this.a[a][6].y) - 1, g, g, h);
        else if (2 == this.f[a]) checkEff(4 + a, 22) && (g += getEff(4 + a, 8)), checkEff(4 + a, 45) && (g += getEff(4 + a, 9)), Vdistance(c, this.a[a][5], this.a[a][6]), normalize(c), scaleVector2D(c, g), c.add(this.a[a][6]), drawLine(this.a[a][6].x, this.a[a][6].y, c.x, c.y, h);
        else if (3 == this.f[a]) Vdistance(c, this.a[a][6], this.a[a][5]), normalize(c), d.set(c), setPerpendicular(d), scaleVector2D(c, 18), c.add(this.a[a][5]), drawLine(this.a[a][5].x, this.a[a][5].y, c.x, c.y, h), scaleVector2D(d, 8), sumVector2D(c, this.a[a][6], d), drawLine(this.a[a][5].x, this.a[a][5].y, c.x, c.y, 8421504), Vdistance(d, this.a[a][6], d), drawLine(this.a[a][5].x, this.a[a][5].y, d.x, d.y, 8421504), drawLine(c.x, c.y, d.x, d.y, 12632256);
        else if (4 == this.f[a]) sumVector2D(c, this.a[a][5], this.a[a][6]), scaleVector2D(c, .5), filledRect(floor(c.x) - 1, floor(c.y) - 1, 3, 3, h);
        else if (5 == this.f[a]) c.x = this.a[a][0].x + randomRange(-10, 10), c.y = this.a[a][0].y + randomRange(-10, 0), Vdistance(c, this.a[a][6], this.a[a][4]), normalize(c), setPerpendicular(c), scaleVector2D(c, 8), drawLine(this.a[a][6].x - c.x, this.a[a][6].y - c.y, this.a[a][6].x + c.x, this.a[a][6].y + c.y, 8421504), filledRect(floor(this.a[a][6].x + c.x) - 1, floor(this.a[a][6].y + c.y) - 1, 3, 3, h);
        else if (6 == this.f[a]) g = floor(clamp(floor(this.a[a][6].x) - floor(this.a[a][1].x), -8, 8) / 2), -4 == g ? filledRect(floor(this.a[a][6].x) - 5, floor(this.a[a][6].y) - 2, 7, 2, h) : -3 == g ? filledRect(floor(this.a[a][6].x) - 4, floor(this.a[a][6].y) - 2, 6, 2, h) : -2 == g ? filledRect(floor(this.a[a][6].x) - 3, floor(this.a[a][6].y) - 2, 5, 2, h) : -1 == g ? filledRect(floor(this.a[a][6].x) - 2, floor(this.a[a][6].y) - 2, 3, 2, h) : 0 == g ? filledRect(floor(this.a[a][6].x) - 1, floor(this.a[a][6].y) - 3, 2, 2, h) : 1 == g ? filledRect(floor(this.a[a][6].x) - 1, floor(this.a[a][6].y) - 2, 3, 2, h) : 2 == g ? filledRect(floor(this.a[a][6].x) - 2, floor(this.a[a][6].y) - 2, 5, 2, h) : 3 == g ? filledRect(floor(this.a[a][6].x) - 2, floor(this.a[a][6].y) - 2, 6, 2, h) : 4 == g && filledRect(floor(this.a[a][6].x) - 2, floor(this.a[a][6].y) - 2, 7, 2, h), filledRect(floor(this.a[a][6].x) - 1, floor(this.a[a][6].y) - 2, 2, 4, h);
        else if (7 == this.f[a]) g = 3, checkEff(4 + a, 42) && (g = 5), b = (h & 16711680) >> 17 << 16 | (h & 65280) >> 9 << 8 | (h & 255) >> 1, drawLine(this.a[a][5].x, this.a[a][5].y, this.a[a][11].x, this.a[a][11].y, b), drawLine(this.a[a][11].x, this.a[a][11].y, this.a[a][12].x, this.a[a][12].y, b), drawLine(this.a[a][12].x, this.a[a][12].y, this.a[a][13].x, this.a[a][13].y, b), drawLine(this.a[a][13].x, this.a[a][13].y, this.a[a][14].x, this.a[a][14].y, b), filledRect(floor(this.a[a][14].x) - 1, floor(this.a[a][14].y) - 1, g, g, h);
        else if (8 == this.f[a]) {
            g = 10 > DEX[a] ? 1 : 30 > DEX[a] ? 2 : 60 > DEX[a] ? 3 : 100 > DEX[a] ? 4 : 5;
            checkEff(4 + a, 47) && (g += 1);
            for (b = 0; b < g && 0 != this.s[a][b]; b++);
            b != g && dispItemCentered(Effect_Img, floor(this.a[a][0].x), floor(this.a[a][0].y) - 5, 7, 3, 33, 0, 7, 3, h);
            for (b = 0; b < g; b++) 0 != this.s[a][b] && dispItemCentered(Effect_Img, floor(this.a[a][15 + b].x), floor(this.a[a][15 + b].y), 7, 3, 33, 0, 7, 3, h)
        }
        40 != Sequence_Step && (0 < STR_Aura[a] + DEX_Aura[a] && (Display_Mode = 2, Display_Mode2 = 1, h = STR_Aura[a], h < DEX_Aura[a] && (h = DEX_Aura[a]), h < MAG_Aura[a] && (h = MAG_Aura[a]), h = 4278190080 | 255 * STR_Aura[a] / h << 16 | 255 * DEX_Aura[a] / h << 8 | 255 * MAG_Aura[a] / h, dispItemCentered(Effect_Img, floor(floor(this.a[a][9].x + this.a[a][10].x) / 2), floor(floor(this.a[a][9].y + this.a[a][10].y) / 2), 20, 12, 12, 0, 20, 12, h), Display_Mode = Display_Mode2 = 0), 0 < (Sett_LP_Bar_Disp & 1) && 0 < LP_Current[a] && (filledRect(floor(this.a[a][0].x) - 6, floor(this.a[a][0].y) - 6, 13, 2, 10027008), filledRect(floor(this.a[a][0].x) - 6, floor(this.a[a][0].y) - 6, floor(13 * LP_Current[a] / LP_Max[a]), 2, 52224)), a != Selected_Player || Game_Mode || (0 == Sett_PL_Symbol ? filledRect(floor(this.a[a][0].x) - 1, floor(this.a[a][0].y) - 8, 3, 3, 16776960) : 1 == Sett_PL_Symbol && (drawLine(floor(this.a[a][0].x) - 3, floor(this.a[a][0].y) - 14, floor(this.a[a][0].x) + 3, floor(this.a[a][0].y) - 14, 16776960), drawLine(floor(this.a[a][0].x) - 3, floor(this.a[a][0].y) - 14, floor(this.a[a][0].x) + .5, floor(this.a[a][0].y) - 7, 16776960), drawLine(floor(this.a[a][0].x) + 3.5, floor(this.a[a][0].y) - 14, floor(this.a[a][0].x) + .5, floor(this.a[a][0].y) - 7, 16776960))))
    }
};
var Book_Indexer = [0, 0, 5, 9, 14, 19, 23, 27, 31, 35, 39, 41, 45, 49, 53, 57, 61, 65, 70, 75, 80, 80, 85, 90, 94, 98, 102, 106, 110, 114, 116, 120, 124, 128, 130, 134, 138, 142, 146, 150, 154, 158, 162, 164, 168, 172, 176, 180, 180, 185, 190, 195, 199, 203, 207, 211, 215, 219, 223, 227, 231, 235, 239, 243, 245, 249, 253, 257, 260, 264, 268, 268, 270, 274, 278, 282, 286, 290, 290, 294, 298, 302, 306, 310, 315, 320, 324, 328, 332, 338, 339],
    EN_Lvl = 0,
    EN_Species = 1,
    EN_Size = 3,
    EN_LP = 6,
    Ph_Resist = 35,
    Fi_Resist = 36,
    Ic_Resist = 37,
    Th_Resist = 38,
    Po_Resist = 39,
    Fr_Resist = 40,
    En_2nd_Att = 60,
    EN_EXP = 61,
    En_Gold = 62,
    En_Drop1 = 63,
    EN_Info = [
        [1, 0, 1, 1, 3394611, 10053171, 10, 2, 1, 1, 4294967091, 1, 16, 16, 8, 8, 0, 0, 10, 10, 0, 100, 0,
            0, 0, 0, 1, 3, 1, 1, 50, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 7, 40, 189, 40, 19, 80
        ],
        [2, 0, 1, 1, 3394815, 10053171, 20, 2, 1, 1, 4294967091, 1, 16, 16, 8, 8, 0, 0, 10, 10, 0, 100, 0, 0, 0, 0, 2, 3, 1, 1, 50, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 3, 8, 15, 290, 15, 20, 40],
        [3, 0, 2, 1, 13369344, 10053171, 50, 2, 1, 1, 4294967091, 1, 16, 16, 8, 8, 0, 0, 10, 10, 0, 100, 0, 0, 0, 0, 3, 5, 1, 1, 50, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 10, 9, 60, 60, 40, 21, 70],
        [4, 0, 3, 1,
            255, 10053171, 40, 4, 0, 2, 4286611584, 1, 16, 16, 8, 8, 0, 0, 100, 10, 5, 100, 0, 0, 0, 0, 4, 5, 1, 100, 50, 20, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 15, 10, 15, 77, 15, 22, 40
        ],
        [5, 0, 2, 2, 8421504, 10053171, 500, 3, 0, 2, 4286611584, 1, 8, 8, 8, 8, 0, 0, 100, 10, 0, 100, 0, 0, 0, 0, 1, 3, 10, 10, 10, 15, 120, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 100, 9, 3, 7, 5, 48, 10],
        [5, 1, 4, 1, 3394611, 3381555, 50, 3, 1, 4, 4294967295, 1, 16, 16, 8, 8, 0, 0, 20, 40, 0, 100, 0, 0, 0, 0, 3, 4, 1, 5, 50, 20, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080,
            1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 10, 13, 40, 0, 0, 23, 80
        ],
        [6, 1, 2, 1, 8421504, 10053171, 80, 3, 1, 4, 4294967295, 1, 16, 16, 8, 8, 0, 0, 20, 40, 0, 100, 0, 0, 0, 0, 4, 6, 1, 5, 50, 20, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 20, 14, 20, 0, 0, 24, 60],
        [7, 1, 4, 1, 13382451, 10027008, 90, 3, 1, 4, 4294967295, 1, 16, 16, 8, 8, 0, 0, 20, 40, 0, 100, 0, 0, 0, 0, 6, 8, 3, 20, 50, 20, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 30, 12, 15, 78, 15, 25, 30],
        [8, 1, 4, 2, 3394611, 3381555, 200, 3, 1, 4, 4294967295, 1, 24, 24, 12, 12, 0, 0, 20,
            40, 0, 100, 0, 0, 0, 0, 8, 12, 1, 5, 50, 20, 40, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 30, 11, 15, 0, 0, 39, 50
        ],
        [8, 2, 4, 1, 16764057, 13408563, 60, 3, 1, 9, 4294967295, 1, 16, 16, 8, 8, 0, 0, 50, 30, 0, 100, 0, 0, 0, 0, 3, 4, 1, 10, 50, 20, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 30, 15, 30, 0, 0, 26, 70],
        [9, 0, 2, 1, 13395456, 10053171, 120, 2, 1, 1, 4294967091, 1, 16, 16, 8, 8, 0, 0, 10, 10, 0, 100, 0, 0, 0, 0, 8, 12, 1, 1, 50, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 30, 17, 30, 79, 40,
            28, 80
        ],
        [10, 0, 3, 1, 6684825, 13408563, 110, 4, 0, 2, 4286611584, 1, 16, 16, 8, 8, 0, 0, 150, 10, 4, 100, 0, 0, 0, 0, 6, 8, 1, 120, 50, 20, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 40, 18, 20, 0, 0, 19, 40],
        [11, 2, 4, 1, 16737792, 13408563, 110, 3, 1, 9, 4294967295, 1, 16, 16, 8, 8, 0, 0, 50, 30, 0, 100, 0, 0, 0, 0, 6, 8, 3, 10, 50, 20, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 50, 16, 20, 0, 0, 23, 40],
        [12, 2, 4, 2, 8421504, 10053171, 500, 3, 1, 9, 4286611584, 1, 16, 16, 8, 8, 0, 0, 150, 30, 0, 100, 0, 0, 0, 0, 5, 6, 12, 20, 50, 15, 100, 0, 0,
            0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 800, 200, 16, 5, 0, 0, 40, 10
        ],
        [10, 3, 4, 1, 10079232, 6710886, 90, 1, 1, 2, 4288269312, 1, 8, 8, 8, 8, 0, 0, 100, 20, 5, 100, 0, 0, 0, 0, 1, 4, 1, 0, 20, 50, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 40, 61, 20, 0, 0, 31, 80],
        [10, 1, 2, 1, 6723840, 6710784, 200, 3, 1, 4, 4294967295, 1, 16, 16, 8, 8, 0, 0, 20, 40, 0, 100, 0, 0, 0, 0, 8, 12, 1, 5, 50, 20, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 40, 0, 0, 0, 0, 33, 80],
        [11, 2, 4, 1, 6723840, 6710784, 140, 3, 1, 9, 4294967295,
            1, 16, 16, 8, 8, 0, 0, 50, 30, 0, 100, 0, 0, 0, 0, 6, 8, 2, 10, 50, 20, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 50, 291, 20, 0, 0, 35, 80
        ],
        [12, 3, 4, 2, 10027008, 3342336, 160, 1, 1, 2, 4288217088, 1, 8, 8, 8, 8, 0, 0, 100, 20, 5, 100, 0, 0, 0, 0, 1, 8, 1, 0, 20, 100, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 60, 190, 10, 0, 0, 36, 30],
        [14, 3, 4, 3, 13395456, 10027008, 800, 3, 1, 2, 4291585536, 1, 16, 16, 8, 8, 0, 0, 150, 30, 3, 100, 0, 0, 0, 0, 4, 8, 1, 20, 20, 200, 150, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 1E3, 300, 41, 10, 0, 0, 459, 10
        ],
        [10, 1, 5, 1, 3381759, 3368652, 180, 3, 1, 11, 4288269567, 1, 16, 16, 8, 8, 0, 0, 20, 40, 0, 100, 0, 0, 0, 0, 4, 5, 1, 5, 50, 20, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 40, 0, 0, 0, 0, 37, 100],
        [10, 0, 3, 1, 8421504, 10053171, 140, 4, 0, 12, 4294967295, 1, 8, 8, 8, 8, 0, 0, 150, 10, 5, 100, 0, 0, 0, 0, 3, 6, 2, 100, 50, 20, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 50, 62, 10, 191, 10, 34, 40],
        [12, 1, 5, 1, 13382451, 10027008, 220, 3, 1, 11, 4294927974, 1, 16, 16, 8, 8, 0, 0, 200, 40, 0, 100, 0, 0, 0,
            0, 3, 4, 1, 5, 20, 100, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 60, 0, 0, 0, 0, 32, 30
        ],
        [14, 1, 5, 2, 3381759, 3368652, 330, 3, 1, 11, 4288269567, 1, 32, 32, 16, 16, 0, 0, 100, 40, 0, 100, 0, 0, 0, 0, 9, 15, 1, 10, 50, 20, 80, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 200, 0, 0, 0, 0, 42, 50],
        [11, 5, 2, 1, 3385907, 10053171, 200, 4, 0, 13, 4281571635, 1, 16, 16, 8, 8, 0, 0, 150, 10, 5, 100, 0, 0, 0, 0, 1, 2, 2, 100, 50, 20, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 50, 54, 40, 80, 40, 0, 0],
        [11,
            1, 4, 1, 13369548, 10053171, 180, 3, 1, 4, 4294954239, 1, 16, 16, 8, 8, 0, 0, 20, 40, 0, 100, 0, 0, 0, 0, 8, 12, 1, 5, 20, 20, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 50, 55, 30, 0, 0, 27, 50
        ],
        [13, 5, 2, 1, 15636787, 10053171, 250, 3, 1, 5, 4294926352, 1, 16, 32, 16, 16, 0, 0, 40, 20, -1, 99, 0, 0, 0, 0, 1, 2, 1, 15, 20, 200, 80, 1, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 70, 56, 15, 0, 0, 0, 0],
        [15, 5, 2, 2, 10027008, 10053171, 1E3, 4, 0, 13, 4288230195, 1, 16, 16, 8, 8, 0, 0, 200, 10, 5, 100, 0, 0, 0, 0, 2, 4, 9, 150, 50, 20, 150, 0, 0, 0, 0, 0, 0,
            0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 300, 57, 15, 0, 0, 43, 30
        ],
        [12, 5, 2, 1, 8421504, 10053171, 220, 4, 0, 12, 4288243251, 1, 16, 16, 8, 8, 0, 0, 150, 10, 5, 100, 0, 0, 0, 0, 2, 5, 1, 100, 50, 20, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 50, 293, 30, 0, 0, 0, 0],
        [12, 2, 5, 1, 3385907, 10053171, 160, 3, 1, 9, 4294967295, 1, 16, 16, 8, 8, 0, 0, 50, 30, 0, 100, 0, 0, 0, 0, 6, 8, 3, 10, 50, 20, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 50, 192, 20, 0, 0, 0, 0],
        [14, 2, 5, 1, 15636787, 10053171, 210, 3, 1, 5,
            4294926352, 1, 16, 32, 16, 16, 0, 0, 40, 20, -1, 99, 0, 0, 0, 0, 1, 2, 1, 15, 20, 200, 60, 1, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 80, 63, 20, 0, 0, 0, 0
        ],
        [16, 5, 2, 3, 6684825, 10053171, 1600, 4, 0, 12, 4284874905, 1, 16, 16, 8, 8, 0, 0, 200, 10, 5, 100, 0, 0, 0, 0, 10, 12, 3, 100, 50, 20, 150, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 300, 0, 0, 0, 0, 44, 10],
        [13, 5, 2, 1, 8421504, 10053171, 240, 4, 0, 13, 4288243251, 1, 16, 16, 8, 8, 0, 0, 150, 10, 5, 100, 0, 0, 0, 0, 1, 2, 3, 100, 50, 20, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 50, 64, 20, 0, 0, 0, 0
        ],
        [12, 6, 1, 1, 3385907, 10053171, 120, 2, 1, 1, 4294967295, 1, 16, 16, 8, 8, 0, 0, 10, 20, 0, 100, 0, 0, 0, 0, 8, 12, 1, 1, 100, 200, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 50, 65, 20, 0, 0, 0, 0],
        [14, 6, 1, 1, 13421619, 10053171, 180, 1, 0, 14, 4294967142, 1, 32, 32, 32, 32, 0, 0, 10, 10, 0, 100, 0, 0, 0, 1, 8, 12, 1, 0, 100, 200, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 80, 66, 20, 67, 20, 0, 0],
        [16, 6, 2, 2, 15636787, 10053171, 1200, 1, 0, 5, 4294926352, 2, 32, 32, 32, 16, 0, 0,
            200, 20, 50, 100, 0, 1, 0, 1, 1, 2, 1, 0, 20, 200, 150, 1, 50, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 400, 81, 5, 0, 0, 45, 10
        ],
        [14, 4, 4, 1, 13421772, 10053171, 200, 2, 1, 1, 4294918208, 1, 16, 16, 8, 8, 0, 0, 10, 10, 0, 100, 0, 0, 0, 0, 6, 8, 1, 1, 50, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 60, 68, 50, 0, 0, 38, 100],
        [15, 4, 4, 1, 13369344, 10053171, 240, 4, 0, 2, 4286611584, 1, 8, 8, 8, 8, 0, 0, 300, 10, 3, 100, 0, 0, 0, 0, 1, 3, 4, 150, 50, 15, 150, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 2164219920, 1, 16, 48, 12, 36, 50, 20, 0, 100, 0, 0, 0, 1, 2, 1, 0,
            200, 90, 70, 20, 82, 20, 0, 0
        ],
        [14, 6, 1, 1, 15636787, 10053171, 160, 1, 0, 5, 4294926352, 2, 32, 32, 32, 16, 0, 0, 100, 20, 50, 100, 0, 1, 0, 1, 1, 2, 1, 0, 100, 200, 150, 1, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 60, 69, 20, 0, 0, 0, 0],
        [16, 4, 4, 2, 13421772, 10053171, 2E3, 5, 1, 1, 4294918208, 1, 40, 16, 40, 8, 0, 0, 100, 20, 5, 99, 0, 0, 0, 0, 10, 20, 1, 0, 50, 300, 40, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 500, 71, 3, 0, 0, 47, 10],
        [20, 4, 4, 3, 13421772, 10053171, 5E3, 5, 1, 1, 4294918208, 1, 48, 16, 48, 8, 0, 0, 100, 20, 5, 99, 0, 0, 0,
            0, 20, 40, 1, 0, 50, 300, 40, 0, 0, 0, 0, 0, 0, 0, 90, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1E3, 1E3, 29, 3, 0, 0, 30, 20
        ],
        [0, 0, 0, 0, 0, 0, 0, 4, 0, 2, 4286611584, 1, 8, 8, 8, 8, 0, 0, 300, 10, 3, 100, 0, 0, 0, 0, 3, 4, 12, 200, 50, 15, 200, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 2164219920, 1, 16, 48, 12, 36, 50, 20, 0, 100, 0, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [10, 0, 1, 2, 6723840, 10053171, 900, 2, 1, 1, 4294918208, 1, 32, 48, 48, 32, 0, 0, 10, 10, 0, 100, 0, 0, 0, 0, 10, 20, 1, 1, 50, 30, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 30, 0, 0, 2, 1, 244, 20],
        [10, 0, 1, 1, 3368448,
            6697728, 90, 2, 1, 1, 4294967091, 1, 16, 16, 8, 8, 0, 0, 10, 10, 0, 100, 0, 0, 0, 0, 3, 4, 1, 1, 50, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 30, 0, 0, 0, 0, 0, 0
        ],
        [11, 0, 3, 1, 10053120, 6697728, 120, 4, 0, 2, 4284900966, 1, 16, 16, 8, 8, 0, 0, 150, 10, 5, 100, 0, 0, 0, 0, 6, 8, 1, 100, 50, 20, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 40, 292, 20, 0, 0, 0, 0],
        [13, 0, 3, 2, 13421772, 6710886, 900, 4, 0, 2, 4288256409, 1, 32, 32, 16, 16, 0, 0, 150, 20, 5, 100, 0, 0, 0, 1, 10, 20, 1, 120, 10, 15, 150, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080,
            1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 200, 285, 10, 0, 0, 341, 10
        ],
        [11, 2, 4, 2, 6710988, 13408563, 600, 3, 1, 11, 4281545625, 1, 32, 32, 16, 16, 0, 0, 100, 40, 0, 100, 0, 0, 0, 0, 8, 16, 1, 10, 50, 30, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 40, 0, 0, 2, 1, 243, 30],
        [11, 2, 4, 1, 6710988, 13408563, 90, 3, 1, 11, 4281545625, 1, 16, 16, 8, 8, 0, 0, 60, 40, 0, 100, 0, 0, 0, 0, 3, 4, 1, 10, 50, 20, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 40, 294, 20, 0, 0, 0, 0],
        [12, 5, 4, 1, 6723891, 10053171, 230, 3, 1, 9, 4291624908, 1, 16, 16, 8,
            8, 0, 0, 60, 30, 0, 100, 0, 0, 0, 0, 3, 4, 2, 10, 50, 20, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 40, 295, 20, 0, 0, 0, 0
        ],
        [14, 2, 4, 2, 16737792, 13408563, 900, 3, 1, 11, 4291585536, 1, 16, 16, 8, 8, 0, 0, 150, 40, 0, 100, 0, 0, 0, 0, 6, 8, 12, 10, 50, 15, 80, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 200, 277, 10, 0, 0, 389, 10],
        [12, 1, 1, 2, 3394611, 10053171, 900, 3, 1, 1, 4294918208, 1, 16, 32, 16, 16, 0, 0, 40, 40, 0, 100, 0, 0, 0, 0, 15, 25, 1, 10, 50, 30, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            1E3, 50, 115, 10, 2, 1, 0, 0
        ],
        [12, 1, 5, 2, 3381555, 6697728, 900, 3, 1, 11, 4281584691, 1, 16, 16, 8, 8, 0, 0, 80, 40, 0, 100, 0, 0, 0, 0, 5, 9, 3, 10, 50, 30, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 50, 0, 0, 2, 1, 245, 15],
        [13, 5, 4, 1, 10027110, 10053171, 240, 4, 0, 13, 4288217190, 1, 16, 16, 8, 8, 0, 0, 120, 10, 5, 100, 0, 0, 0, 0, 3, 4, 2, 100, 50, 20, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 40, 193, 20, 0, 0, 0, 0],
        [15, 1, 2, 2, 13421772, 10053171, 1100, 3, 1, 4, 4294967295, 1, 32, 32, 16, 16, 0, 0, 150, 40, 0, 100, 0, 0, 0, 0, 5, 15,
            1, 30, 10, 15, 150, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 200, 0, 0, 0, 0, 46, 10
        ],
        [15, 7, 4, 1, 13408563, 4465152, 150, 3, 1, 11, 4294967295, 1, 16, 16, 8, 8, 0, 0, 40, 10, 0, 100, 0, 0, 0, 0, 6, 8, 1, 10, 50, 20, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 60, 0, 0, 0, 0, 53, 200],
        [16, 5, 4, 1, 10027110, 10053171, 300, 3, 0, 12, 4291572633, 1, 16, 16, 8, 8, 0, 0, 120, 10, 0, 100, 0, 0, 0, 0, 5, 7, 1, 10, 50, 20, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 60, 0, 0, 0, 0, 52, 100],
        [17, 7, 2, 1, 3381555,
            13056, 300, 3, 1, 11, 4281597747, 1, 16, 16, 8, 8, 0, 0, 80, 10, 0, 100, 0, 0, 0, 0, 8, 12, 1, 10, 50, 20, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 80, 0, 0, 0, 0, 51, 100
        ],
        [18, 7, 2, 2, 13421772, 13421772, 3E3, 3, 1, 4, 4294967295, 1, 16, 16, 8, 8, 0, 0, 150, 40, 0, 100, 0, 0, 50, 0, 3, 5, 5, 20, 80, 100, 150, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 700, 49, 10, 0, 0, 406, 10],
        [15, 1, 4, 1, 13408563, 4465152, 240, 3, 1, 4, 4291598643, 1, 16, 16, 8, 8, 0, 0, 40, 60, 0, 100, 0, 0, 0, 0, 8, 9, 1, 10, 50, 20, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080,
            1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 50, 72, 20, 0, 0, 84, 60
        ],
        [16, 8, 6, 1, 3368448, 10066329, 260, 3, 0, 6, 4281558528, 1, 16, 16, 8, 8, 0, 0, 50, 20, 0, 95, 0, 0, 0, 0, 1, 1, 1, 5, 10, 1E3, 500, 4, 10, 0, 0, 0, 0, 100, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 80, 75, 40, 0, 0, 86, 80],
        [17, 1, 4, 1, 13382451, 4465152, 120, 3, 1, 4, 4291572531, 1, 16, 16, 8, 8, 0, 0, 80, 60, 0, 100, 0, 0, 0, 0, 12, 15, 1, 10, 50, 20, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 50, 73, 20, 0, 0, 85, 60],
        [18, 8, 6, 2, 6723840, 10066329, 1E3, 4, 0, 12, 4284913920, 1, 16, 16, 8,
            8, 0, 0, 150, 20, 5, 100, 0, 0, 0, 0, 3, 5, 3, 100, 10, 1E3, 500, 0, 0, 0, 0, 0, 0, 100, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 300, 74, 15, 83, 15, 104, 30
        ],
        [16, 2, 4, 1, 13408563, 4465152, 180, 3, 1, 9, 4291598643, 1, 16, 16, 8, 8, 0, 0, 30, 30, 0, 100, 0, 0, 0, 0, 4, 5, 2, 10, 50, 20, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 50, 195, 20, 0, 0, 88, 60],
        [17, 8, 6, 1, 6684825, 10066329, 280, 3, 0, 6, 4284874905, 1, 16, 16, 8, 8, 0, 0, 50, 20, 0, 95, 0, 0, 0, 0, 1, 1, 1, 5, 10, 1E3, 500, 4, 15, 0, 0, 0, 0, 100, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 150, 80, 141, 20, 0, 0, 87, 60
        ],
        [18, 2, 4, 1, 13382451, 4465152, 220, 3, 1, 9, 4291572531, 1, 16, 16, 8, 8, 0, 0, 50, 30, 0, 100, 0, 0, 0, 0, 3, 4, 4, 15, 50, 20, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 50, 126, 20, 296, 20, 0, 0],
        [19, 8, 6, 3, 10053324, 10066329, 3500, 4, 0, 12, 4278216192, 1, 16, 16, 8, 8, 0, 0, 150, 20, 5, 100, 0, 0, 0, 0, 1, 1, 1, 120, 25, 1E3, 500, 4, 100, 0, 0, 0, 0, 100, 80, 3, 0, 6, 4278216192, 1, 16, 16, 8, 8, 50, 20, 0, 96, 1, 1, 0, 1, 1, 5, 0, 1E3, 800, 128, 5, 105, 10, 460, 10],
        [17, 0, 2, 1, 13395456, 10066329, 300, 2, 1, 1, 4291585536, 1, 16, 16, 8, 8, 0, 0, 10,
            10, 0, 100, 0, 0, 0, 0, 10, 15, 1, 1, 50, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 40, 119, 20, 0, 0, 93, 60
        ],
        [18, 1, 6, 1, 10092339, 10066329, 240, 3, 1, 4, 4288282419, 1, 16, 16, 8, 8, 0, 0, 40, 40, 0, 100, 0, 0, 0, 0, 9, 10, 1, 10, 50, 20, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 40, 118, 20, 0, 0, 102, 60],
        [19, 1, 6, 1, 16711680, 10066329, 300, 3, 1, 9, 4294901760, 1, 16, 16, 8, 8, 0, 0, 80, 40, 0, 100, 0, 0, 0, 0, 4, 5, 1, 15, 50, 30, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 90, 120, 15,
            0, 0, 89, 50
        ],
        [20, 0, 2, 2, 16777215, 10066329, 4400, 3, 0, 13, 4294967295, 1, 16, 16, 8, 8, 0, 0, 150, 10, 0, 100, 0, 1, 0, 0, 4, 5, 10, 10, 15, 15, 150, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2E3, 700, 0, 0, 103, 10, 106, 10],
        [20, 7, 4, 1, 16776960, 13421568, 77, 1, 0, 14, 4294967040, 1, 32, 32, 32, 32, 0, 0, 10, 10, 0, 100, 0, 0, 0, 1, 1, 9, 1, 0, 100, 200, 20, 0, 0, 1E3, 100, 100, 100, 100, 90, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 777, 0, 0, 100, 10, 112, 10],
        [18, 2, 4, 1, 6684927, 6710937, 240, 3, 1, 4, 4284875007, 1, 16, 16, 8, 8, 0, 0, 20, 40, 0, 100, 0, 0, 0,
            0, 8, 10, 1, 5, 50, 30, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 50, 117, 20, 0, 0, 92, 60
        ],
        [19, 2, 4, 1, 13369599, 10053273, 240, 3, 1, 9, 4291559679, 1, 16, 16, 8, 8, 0, 0, 40, 10, 0, 100, 0, 0, 0, 0, 4, 5, 2, 10, 50, 30, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 50, 116, 20, 0, 0, 98, 60],
        [20, 2, 5, 1, 16711833, 13408665, 280, 3, 1, 11, 4294901913, 1, 16, 16, 8, 8, 0, 0, 80, 10, 0, 100, 0, 0, 0, 0, 2, 4, 1, 15, 50, 30, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 100, 0, 0, 90, 60, 99, 60],
        [21,
            2, 4, 2, 16777215, 10066329, 4E3, 3, 1, 9, 4294967295, 1, 16, 16, 8, 8, 20, 0, 150, 10, 0, 100, 0, 0, 0, 0, 4, 5, 10, 10, 15, 15, 90, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2E3, 700, 287, 10, 0, 0, 107, 10
        ],
        [20, 7, 2, 1, 16776960, 13421568, 77, 1, 0, 14, 4294967040, 1, 32, 32, 32, 32, 0, 0, 10, 10, 0, 100, 0, 0, 0, 1, 1, 9, 1, 0, 100, 200, 20, 0, 0, 1E3, 100, 100, 100, 100, 90, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 777, 0, 0, 100, 10, 113, 10],
        [19, 4, 4, 1, 13408512, 13421721, 300, 2, 1, 1, 4294918208, 1, 16, 16, 8, 8, 0, 0, 10, 10, 0, 100, 0, 0, 0, 0, 10, 15, 1, 1, 50,
            20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 60, 127, 20, 0, 0, 91, 60
        ],
        [19, 2, 4, 1, 13395456, 13408614, 240, 3, 1, 9, 4291585536, 1, 16, 16, 8, 8, 0, 0, 40, 10, 0, 100, 0, 0, 0, 0, 3, 4, 3, 10, 50, 30, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 60, 194, 20, 0, 0, 97, 60],
        [21, 4, 4, 1, 13382400, 13408665, 300, 3, 1, 5, 4294926352, 1, 16, 32, 16, 16, 0, 0, 25, 20, -1, 99, 0, 1, 0, 0, 2, 3, 1, 10, 20, 200, 40, 1, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 100, 196, 20, 0, 0, 96, 60],
        [22, 4, 4, 2, 13382400,
            13408665, 1E3, 3, 1, 5, 4294926352, 1, 16, 32, 16, 16, 0, 0, 40, 20, -1, 99, 0, 1, 0, 0, 4, 5, 1, 15, 20, 200, 80, 1, 80, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 150, 297, 20, 279, 40, 108, 40
        ],
        [20, 7, 5, 1, 16776960, 13421568, 77, 1, 0, 14, 4294967040, 1, 32, 32, 32, 32, 0, 0, 10, 10, 0, 100, 0, 0, 0, 1, 1, 9, 1, 0, 100, 200, 20, 0, 0, 1E3, 100, 100, 100, 100, 90, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 777, 0, 0, 100, 10, 114, 10],
        [21, 0, 7, 1, 3394611, 10053171, 300, 2, 1, 11, 4281584691, 1, 16, 16, 8, 8, 0, 0, 40, 10, 0, 100, 0, 0, 0, 0, 10, 15, 1, 1, 50, 20, 40, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 80, 0, 0, 0, 0, 101, 60
        ],
        [22, 0, 7, 1, 3394815, 10053171, 300, 2, 1, 11, 4281584895, 1, 16, 16, 8, 8, 0, 0, 40, 10, 0, 100, 0, 0, 0, 0, 10, 20, 1, 1, 50, 20, 40, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 80, 125, 20, 0, 0, 0, 0],
        [23, 0, 7, 1, 13369344, 10053171, 600, 4, 1, 12, 4294926352, 1, 16, 16, 8, 8, 0, 0, 150, 10, 5, 100, 0, 0, 0, 0, 5, 15, 1, 80, 50, 30, 120, 1, 0, 0, 50, 0, 0, 0, 0, 1, 0, 6, 2164219920, 1, 32, 32, 16, 16, 10, 20, 0, 100, 0, 0, 1, 5, 15, 1, 0, 400, 120, 197, 10, 0, 0, 0, 0],
        [22, 5, 7, 1, 255, 10053171,
            400, 3, 1, 13, 4284887808, 1, 16, 16, 8, 8, 0, 0, 80, 10, 0, 100, 0, 0, 0, 0, 8, 12, 1, 10, 50, 30, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 90, 129, 20, 0, 0, 0, 0
        ],
        [24, 0, 7, 3, 8421504, 10053171, 4800, 3, 1, 3, 4286611584, 1, 16, 32, 16, 16, 0, 0, 150, 20, 5, 100, 0, 0, 0, 0, 8, 15, 3, 100, 30, 200, 150, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2E3, 900, 111, 10, 0, 0, 342, 10],
        [22, 1, 7, 1, 13421823, 10053171, 330, 3, 1, 4, 4294967295, 1, 16, 16, 8, 8, 0, 0, 20, 20, 0, 100, 0, 0, 0, 0, 10, 15, 1, 5, 50, 20, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080,
            1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 80, 121, 20, 0, 0, 0, 0
        ],
        [23, 1, 7, 1, 10027008, 10053171, 660, 3, 1, 4, 4288217088, 1, 16, 32, 16, 16, 0, 0, 20, 20, 0, 100, 0, 0, 0, 0, 20, 30, 1, 5, 50, 30, 40, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 120, 122, 10, 0, 0, 0, 0],
        [22, 2, 7, 1, 13421823, 10053171, 280, 3, 0, 12, 4294967295, 1, 16, 16, 8, 8, 0, 0, 60, 20, 0, 100, 0, 0, 0, 0, 8, 12, 1, 10, 50, 20, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 70, 123, 20, 0, 0, 0, 0],
        [23, 2, 7, 1, 10027008, 10053171, 440, 3, 0, 12, 4288217088, 1, 16, 16,
            8, 8, 0, 0, 60, 20, 0, 100, 0, 0, 0, 0, 4, 8, 5, 10, 50, 30, 40, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 110, 124, 10, 0, 0, 0, 0
        ],
        [25, 1, 7, 3, 8421504, 10053171, 5200, 3, 1, 4, 4286611584, 1, 16, 32, 16, 16, 0, 0, 150, 20, 10, 100, 0, 0, 0, 0, 8, 12, 5, 50, 30, 200, 150, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2E3, 900, 110, 10, 0, 0, 390, 10],
        [23, 1, 8, 1, 65535, 26214, 340, 3, 1, 4, 4278255615, 1, 16, 16, 8, 8, 0, 0, 20, 20, 0, 100, 0, 0, 0, 0, 10, 15, 1, 5, 50, 20, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            200, 80, 298, 20, 0, 0, 0, 0
        ],
        [23, 3, 8, 1, 65535, 16777215, 220, 5, 0, 13, 4278255615, 1, 16, 16, 8, 8, 50, 0, 150, 10, 5, 100, 0, 0, 0, 0, 1, 5, 6, 0, 50, 30, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 80, 198, 20, 0, 0, 0, 0],
        [25, 5, 8, 1, 16711935, 13421772, 800, 3, 1, 5, 4294926352, 2, 16, 32, 16, 16, 0, 0, 150, 40, 0, 100, 1, 0, 0, 1, 4, 6, 3, 10, 50, 30, 150, 1, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 800, 150, 131, 10, 132, 10, 133, 10],
        [26, 3, 8, 3, 65535, 16777215, 4800, 5, 0, 12, 4278255615, 1, 16, 16, 8, 8, 50, 0, 150, 10, 5, 100, 0, 0, 0, 0,
            1, 9, 12, 0, 30, 200, 80, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2E3, 900, 246, 10, 0, 0, 109, 10
        ],
        [24, 0, 8, 1, 13434726, 6723840, 300, 4, 0, 13, 4291624806, 1, 16, 16, 8, 8, 0, 0, 150, 10, 5, 100, 0, 0, 0, 0, 1, 3, 1, 100, 50, 50, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 40, 26, 30, 134, 50, 0, 0],
        [24, 2, 7, 1, 13434726, 6723840, 200, 3, 1, 9, 4291624806, 1, 16, 16, 8, 8, 0, 0, 80, 10, 0, 100, 0, 0, 0, 0, 1, 3, 2, 10, 50, 25, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 40, 26, 30, 135, 50, 0, 0],
        [25,
            4, 9, 1, 16764006, 16777164, 400, 5, 1, 10, 3439316019, 2, 16, 16, 8, 8, 50, 0, 100, 10, 5, 100, 0, 0, 0, 0, 2, 3, 9, 0, 50, 30, 60, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 80, 91, 20, 136, 30, 0, 0
        ],
        [27, 4, 9, 2, 16764006, 16777164, 6E3, 5, 1, 10, 4294954035, 2, 32, 32, 16, 16, 0, 0, 100, 10, 30, 100, 0, 0, 0, 0, 30, 50, 1, 0, 20, 200, 40, 3, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2E3, 900, 130, 10, 0, 0, 407, 10],
        [26, 7, 7, 1, 13421823, 10066380, 400, 3, 1, 4, 4291611903, 1, 16, 16, 8, 8, 0, 0, 40, 10, 0, 100, 0, 0, 0, 0, 10, 18, 1, 5, 50, 20, 40, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 90, 199, 30, 0, 0, 146, 90
        ],
        [26, 9, 7, 1, 16764159, 10053273, 300, 3, 0, 12, 4294954239, 1, 16, 16, 8, 8, 0, 0, 80, 10, 0, 100, 0, 0, 0, 0, 10, 15, 1, 10, 50, 20, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 90, 137, 30, 0, 0, 143, 80],
        [28, 9, 8, 1, 16711884, 3342387, 450, 3, 0, 15, 4294901964, 1, 16, 16, 8, 8, 0, 0, 200, 10, 0, 98, 0, 1, 0, 0, 10, 15, 1, 5, 50, 50, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 130, 140, 10, 0, 0, 0, 0],
        [29, 9, 7, 2, 16764006, 16777164,
            7E3, 3, 0, 15, 4278190080, 1, 32, 32, 16, 16, 0, 10, 500, 10, 0, 90, 0, 1, 0, 0, 20, 40, 1, 100, 20, 50, 150, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2E3, 900, 138, 5, 0, 0, 172, 10
        ],
        [27, 5, 8, 1, 3368448, 13056, 400, 3, 1, 11, 4288269312, 1, 16, 16, 4, 4, 0, 0, 300, 10, 0, 100, 0, 0, 0, 0, 6, 8, 1, 2, 100, 15, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 90, 139, 50, 0, 0, 145, 200],
        [27, 7, 7, 1, 16764159, 10053273, 420, 3, 1, 4, 4294954239, 1, 16, 16, 8, 8, 0, 0, 40, 10, 0, 100, 0, 0, 0, 0, 12, 18, 1, 5, 50, 20, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080,
            1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 100, 299, 10, 0, 0, 144, 50
        ],
        [29, 0, 8, 1, 16711884, 3342387, 480, 3, 1, 17, 4294901964, 1, 16, 16, 8, 8, 0, 0, 200, 10, 0, 100, 0, 0, 0, 0, 10, 15, 1, 15, 50, 50, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 130, 142, 10, 0, 0, 147, 50],
        [30, 5, 8, 3, 10027008, 3342336, 8E3, 3, 1, 11, 4291585638, 1, 16, 16, 4, 4, 0, 10, 500, 10, 0, 100, 0, 0, 0, 0, 10, 22, 15, 3, 50, 15, 180, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2E3, 900, 174, 10, 0, 0, 461, 10],
        [28, 7, 7, 1, 21916, 21916, 400, 3, 1, 13, 1610612736,
            1, 16, 16, 4, 4, 0, 0, 100, 10, 0, 100, 0, 0, 0, 0, 3, 4, 1, 3, 50, 20, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 90, 301, 30, 0, 0, 151, 80
        ],
        [28, 7, 2, 1, 8421504, 6697728, 500, 3, 1, 3, 4278190080, 1, 16, 16, 8, 8, 0, 0, 100, 10, 0, 100, 0, 0, 0, 0, 12, 18, 1, 15, 50, 20, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 100, 0, 0, 150, 40, 152, 40],
        [30, 9, 10, 1, 13382400, 0, 500, 3, 1, 5, 4294926352, 2, 16, 32, 16, 16, 0, 0, 150, 40, 0, 100, 1, 0, 0, 1, 6, 9, 1, 10, 50, 30, 150, 1, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 400, 150, 0, 0, 148, 30, 149, 30
        ],
        [31, 9, 7, 2, 21916, 21916, 2E3, 3, 1, 17, 1073741824, 1, 16, 16, 4, 4, 0, 0, 300, 10, 0, 100, 0, 0, 0, 0, 10, 22, 2, 10, 50, 20, 180, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 300, 248, 20, 0, 0, 171, 50],
        [32, 7, 7, 1, 15658496, 13421568, 500, 1, 0, 14, 4293848576, 1, 16, 16, 16, 16, 0, 0, 50, 20, 0, 100, 0, 0, 0, 0, 1, 9, 1, 0, 25, 100, 20, 3, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 250, 150, 182, 20, 0, 0, 186, 60],
        [32, 7, 10, 1, 8421504, 2105376, 600, 3, 1, 17, 4278190233, 1, 16, 16, 8, 8, 0, 0, 100, 10, 0,
            100, 0, 0, 0, 0, 5, 10, 1, 15, 50, 20, 80, 0, 0, 0, 0, 0, -100, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 250, 120, 178, 30, 201, 30, 184, 80
        ],
        [33, 7, 10, 2, 8421504, 2105376, 800, 3, 1, 17, 4278229248, 1, 32, 32, 16, 16, 0, 0, 150, 10, 0, 100, 1, 0, 0, 0, 10, 20, 1, 10, 50, 20, 150, 0, 0, 0, 0, 0, -100, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 200, 179, 10, 0, 0, 185, 30],
        [36, 7, 10, 4, 8421504, 2105376, 12E3, 3, 1, 17, 4288217088, 1, 48, 48, 24, 24, 0, 0, 300, 10, 0, 100, 0, 0, 0, 0, 20, 40, 1, 15, 50, 20, 180, 0, 0, 0, 0, 0, -100, 0, 80, 3, 0, 6, 2151677952, 1, 16, 16, 8, 8, 100, 10, 0,
            99, 0, 0, 0, 10, 20, 9, 0, 3E3, 999, 308, 10, 0, 0, 175, 10
        ],
        [40, 9, 7, 4, 13421772, 8388608, 4E4, 3, 0, 7, 4291611903, 1, 32, 32, 24, 24, 0, 20, 400, 10, 0, 95, 0, 1, 40, 0, 5, 5, 1, 40, 50, 300, 200, 5, 2500, 0, 0, 0, 0, 0, 90, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4E3, 4E3, 94, 5, 0, 0, 95, 20],
        [0, 0, 0, 0, 0, 0, 0, 3, 1, 5, 4294926352, 2, 24, 48, 24, 24, 0, 0, 300, 40, 0, 100, 1, 0, 0, 1, 3, 5, 3, 10, 50, 300, 300, 1, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [29, 8, 7, 1, 16777164, 16764057, 800, 6, 0, 13, 4294954137, 1, 16, 16, 4, 4, 0, 10, 200, 10, 3, 99, 0,
            0, 0, 0, 6, 8, 6, 25, 200, 1E3, 500, 0, 0, 10, -100, 0, 0, 100, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 120, 155, 20, 0, 0, 168, 80
        ],
        [29, 5, 7, 1, 16777164, 10053171, 800, 4, 1, 3, 4288243251, 1, 16, 16, 8, 8, 50, 0, 200, 10, 4, 100, 0, 0, 0, 0, 14, 18, 1, 160, 100, 20, 80, 0, 0, 0, -100, 50, 50, 50, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 120, 157, 30, 300, 30, 164, 80],
        [31, 2, 8, 1, 3394560, 3381504, 300, 3, 0, 6, 4281571584, 1, 16, 16, 8, 8, 0, 0, 250, 20, 0, 100, 0, 0, 0, 0, 1, 1, 1, 2, 300, 25, 80, 4, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 400, 90, 153, 10, 0, 0, 167, 50
        ],
        [33, 8, 7, 3, 16777164, 16764057, 11E3, 706, 0, 12, 4294954137, 1, 16, 16, 8, 8, 30, 0, 300, 10, 3, 99, 0, 0, 0, 0, 33, 33, 23, 40, 100, 1E3, 500, 0, 0, 30, -100, 50, 50, 100, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2500, 300, 170, 10, 0, 0, 343, 10],
        [30, 2, 7, 1, 16763955, 13382400, 400, 3, 1, 9, 4294954035, 1, 16, 16, 8, 8, 0, 0, 100, 20, 0, 100, 0, 0, 0, 0, 3, 4, 3, 10, 50, 30, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 50, 158, 30, 0, 0, 161, 100],
        [31, 3, 7, 1, 16763955, 13382400, 400, 3, 1, 9, 4291572480, 1, 16, 16, 8, 8,
            0, 0, 100, 20, 0, 100, 0, 0, 0, 0, 3, 4, 5, 10, 50, 30, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 50, 154, 30, 0, 0, 162, 100
        ],
        [31, 5, 7, 1, 13382400, 3355443, 800, 7, 0, 0, 4278190080, 1, 16, 16, 8, 8, 0, 0, 100, 10, 0, 100, 0, 0, 0, 0, -2, 0, 1, 0, 300, 30, 500, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 100, 156, 10, 200, 10, 0, 0],
        [34, 5, 7, 2, 13382400, 3355443, 8E3, 7, 0, 0, 4278190080, 1, 16, 16, 8, 8, 0, 0, 100, 10, 0, 100, 0, 0, 0, 0, -2, 0, 5, 0, 100, 8, 500, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            2500, 300, 281, 10, 0, 0, 177, 10
        ],
        [31, 6, 8, 1, 39168, 13056, 80, 1, 0, 6, 4278216192, 1, 32, 32, 16, 16, 0, 0, 50, 20, 0, 100, 0, 0, 0, 0, 1, 1, 1, 0, 100, 200, 20, 4, 50, 0, 0, 0, 0, 100, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 130, 180, 30, 0, 0, 166, 120],
        [32, 4, 7, 1, 10066176, 3355443, 180, 4, 0, 12, 4288217088, 1, 16, 16, 8, 8, 0, 0, 1E3, 10, 4, 100, 0, 0, 0, 0, 10, 10, 1, 150, 50, 30, 60, 0, 0, -10, 0, 0, 0, 0, 0, 4, 0, 5, 4294926352, 2, 16, 32, 16, 32, 100, 10, 4, 98, 0, 1, 0, 6, 9, 5, 0, 200, 140, 181, 20, 0, 0, 163, 80],
        [32, 8, 9, 1, 10066176, 3355443, 300, 8003, 1, 9, 4288230144, 1, 16, 16, 8, 8, 0, 20, 200,
            10, 0, 100, 1, 0, 20, 0, 8, 16, 2, 20, 200, 1E3, 500, 0, 0, -10, 0, 0, 0, 100, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 150, 183, 20, 0, 0, 165, 80
        ],
        [35, 5, 9, 3, 10066176, 3355443, 9E3, 4003, 1, 9, 4288230144, 1, 16, 16, 8, 8, 0, 0, 200, 10, 0, 100, 0, 0, 0, 0, 50, 60, 7, 13, 100, 50, 200, 0, 0, -10, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2500, 400, 247, 10, 0, 0, 176, 10],
        [33, 10, 8, 1, 13369548, 13421772, 1E3, 3, 1, 4, 4291559628, 1, 16, 16, 8, 8, 0, 0, 10, 10, 1, 100, 0, 0, 0, 0, 1, 1, 1, 5, 10, 100, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 300, 10, 152, 50, 0, 0, 187, 200
        ],
        [36, 10, 8, 2, 13369548, 13421772, 1E4, 1003, 1, 9, 4291559628, 1, 16, 16, 8, 8, 20, 0, 200, 10, 0, 100, 0, 0, 0, 0, 1, 1, 7, 20, 10, 100, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3E3, 10, 173, 10, 169, 10, 391, 10],
        [38, 10, 11, 1, 15449209, 4210752, 600, 3, 1, 4, 4293639289, 1, 16, 16, 8, 8, 0, 0, 10, 10, 1, 100, 0, 0, 0, 0, 1, 3, 1, 5, 10, 100, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 150, 202, 30, 208, 30, 302, 30],
        [39, 1, 11, 1, 15449209, 13599032, 600, 4, 1, 3, 4291789112, 1, 16, 16, 8,
            8, 0, 20, 200, 10, 5, 100, 0, 0, 0, 0, 1, 1, 5, 80, 50, 20, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 160, 205, 30, 206, 30, 0, 80
        ],
        [40, 0, 12, 1, 6710886, 3355443, 1E3, 3, 1, 18, 4294967040, 1, 16, 16, 4, 4, 0, 0, 500, 10, 0, 100, 1, 0, 0, 0, 20, 40, 1, 10, 200, 30, 200, 3, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 200, 203, 10, 207, 10, 0, 50],
        [42, 0, 12, 3, 6710886, 3355443, 15E3, 3, 1, 18, 4294967040, 1, 16, 16, 16, 16, 0, 0, 300, 10, 0, 100, 0, 0, 0, 0, 1, 1, 1, 40, 5, 1E3, 250, 3, 0, 30, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 3E3, 1E3, 204, 5, 0, 0, 237, 10
        ],
        [38, 2, 11, 1, 15449209, 13599032, 400, 3, 1, 4, 4293639289, 1, 16, 16, 8, 8, 0, 0, 10, 10, 0, 100, 0, 0, 0, 0, 1, 3, 1, 5, 10, 100, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 150, 218, 40, 0, 0, 0, 80],
        [41, 3, 12, 1, 13382451, 16737894, 500, 3, 1, 18, 4294901760, 1, 16, 16, 4, 4, 0, 0, 500, 10, 0, 100, 1, 0, 0, 0, 6, 9, 9, 10, 200, 20, 120, 1, 100, 0, 100, -50, 0, 0, -50, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 160, 0, 10, 0, 0, 210, 50],
        [41, 6, 12, 1, 6710886, 11184810, 1E3, 1, 0, 14, 4294967295, 1, 32, 32, 32,
            32, 0, 0, 10, 10, 0, 100, 0, 0, 0, 1, 10, 10, 1, 0, 200, 20, 20, 0, 0, 30, 50, 80, -100, 50, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 200, 0, 20, 0, 0, 209, 80
        ],
        [43, 0, 12, 3, 6710886, 3355443, 15E3, 404, 1, 3, 2162932857, 1, 16, 16, 4, 4, 0, 0, 300, 10, 8, 100, 0, 0, 0, 0, 1, 7, 30, 120, 50, 30, 250, 0, 0, 30, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3E3, 1100, 250, 10, 0, 0, 238, 10],
        [39, 11, 13, 1, 10079232, 39168, 400, 3, 1, 9, 4288269312, 1, 16, 16, 4, 4, 0, 5, 200, 10, 0, 100, 0, 0, 0, 0, 1, 3, 9, 20, 50, 1E3, 500, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 50, 303, 30, 0, 0, 211, 100
        ],
        [39, 11, 13, 1, 13395711, 13408563, 400, 103, 1, 9, 4291585791, 1, 16, 16, 4, 4, 30, 0, 200, 10, 0, 100, 0, 0, 0, 0, 1, 3, 3, 20, 50, 1E3, 500, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 50, 220, 30, 0, 0, 212, 100],
        [42, 11, 11, 1, 16737843, 10027008, 600, 3, 1, 18, 4294927923, 1, 16, 16, 4, 4, 0, 0, 500, 10, 0, 100, 1, 0, 0, 0, 10, 10, 1, 10, 50, 1E3, 500, 1, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 200, 0, 10, 0, 0, 213, 50],
        [44, 11, 13, 2, 15658496, 47872, 2500, 3, 1, 10, 4293848576,
            2, 16, 24, 8, 8, 0, 0, 300, 10, 0, 100, 0, 0, 0, 0, 1, 9, 1, 80, 5, 1E3, 500, 3, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 800, 214, 20, 0, 0, 239, 50
        ],
        [40, 2, 11, 1, 16737843, 13599032, 500, 3, 1, 5, 4294926352, 2, 16, 32, 16, 16, 0, 0, 100, 40, 0, 100, 1, 0, 0, 0, 4, 6, 1, 10, 50, 30, 40, 1, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 180, 217, 30, 0, 0, 0, 80],
        [40, 11, 13, 1, 13421772, 13408614, 450, 103, 1, 9, 4291611852, 1, 16, 16, 4, 4, 30, 0, 200, 10, 0, 100, 0, 0, 0, 0, 1, 4, 3, 20, 50, 1E3, 500, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 50, 216, 30, 0, 0, 0, 80
        ],
        [43, 10, 13, 1, 16737843, 6710886, 1E3, 4, 0, 12, 4288217088, 1, 16, 16, 8, 8, 0, 0, 200, 10, 5, 100, 0, 0, 0, 0, 1, 3, 1, 100, 50, 30, 150, 1, 50, 0, 0, 0, 0, 0, 0, 1, 0, 5, 2164219920, 1, 16, 32, 12, 32, 200, 20, 0, 100, 0, 0, 0, 1, 3, 1, 0, 500, 200, 215, 30, 0, 0, 0, 80],
        [45, 10, 13, 2, 16737843, 10027008, 16E3, 4, 1, 12, 4288217088, 1, 16, 16, 8, 8, 0, 0, 300, 10, 5, 100, 0, 0, 0, 0, 4, 6, 9, 100, 50, 100, 150, 1, 50, 0, 0, 0, 0, 0, 80, 1, 0, 5, 2164219920, 1, 16, 32, 12, 32, 200, 20, 0, 100, 0, 0, 0, 1, 3, 1, 0, 3E3, 1200, 219, 5, 0, 0, 240, 10],
        [44, 10, 13, 2, 16724736, 6697728, 8E3,
            3, 1, 16, 4294914816, 2, 16, 16, 8, 8, 0, 0, 500, 10, 0, 100, 1, 0, 0, 0, 10, 10, 3, 10, 250, 30, 200, 1, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3E3, 1500, 0, 30, 2, 1, 221, 40
        ],
        [44, 11, 13, 2, 13421568, 10053120, 9E3, 3, 1, 9, 4291611648, 1, 32, 32, 8, 8, 0, 0, 200, 10, 0, 100, 0, 0, 0, 0, 20, 40, 1, 20, 100, 1E3, 500, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3E3, 500, 0, 30, 2, 1, 222, 40],
        [41, 9, 11, 1, 3394815, 26265, 1E3, 4, 0, 12, 4281584895, 1, 16, 16, 8, 8, 0, 0, 200, 10, 5, 100, 0, 0, 0, 0, 1, 9, 1, 80, 50, 30, 80, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 4278190080,
            1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 100, 224, 20, 252, 20, 225, 20
        ],
        [46, 4, 11, 1, 16777164, 16764006, 1E3, 4, 0, 13, 3439329228, 2, 16, 16, 8, 8, 0, 20, 200, 10, 15, 100, 0, 0, 0, 0, 5, 5, 1, 40, 25, 100, 80, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 200, 223, 99, 304, 99, 241, 450],
        [42, 9, 11, 1, 13421823, 10053375, 600, 3, 0, 7, 4291611903, 1, 16, 16, 8, 8, 0, 10, 100, 10, 0, 95, 0, 1, 0, 0, 5, 5, 1, 20, 50, 30, 80, 5, 250, 0, 0, 100, 0, 0, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 150, 227, 30, 0, 0, 233, 80],
        [43, 9, 13, 1, 10079283, 10053120, 700,
            3, 0, 6, 4288269363, 1, 16, 16, 8, 8, 0, 0, 100, 10, 0, 100, 0, 1, 0, 0, 1, 1, 1, 5, 50, 20, 100, 4, 8, 0, 0, 0, 0, 100, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 180, 0, 30, 0, 0, 234, 80
        ],
        [45, 9, 12, 1, 13382451, 16751001, 800, 3, 1, 6, 4294926352, 2, 16, 24, 8, 8, 0, 0, 50, 10, 0, 95, 1, 0, 0, 0, 2, 3, 1, 10, 10, 100, 50, 1, 50, 0, 100, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 200, 0, 30, 0, 0, 235, 80],
        [47, 9, 12, 2, 16777062, 3355443, 18E3, 3, 0, 2, 4294967142, 2, 16, 16, 8, 8, 0, 0, 200, 10, 0, 100, 0, 0, 0, 0, 20, 50, 1, 40, 50, 100, 250, 3, 0, 0, 0, 0, 100, 0, 80, 2, 0, 15, 4294967142,
            1, 16, 16, 8, 8, 50, 10, 0, 0, 0, 0, 0, 1, 9, 30, 0, 3E3, 200, 229, 3, 236, 10, 310, 10
        ],
        [44, 12, 7, 1, 16777215, 3342438, 1200, 2, 1, 15, 4294967295, 1, 16, 16, 8, 8, 0, 0, 40, 40, 0, 100, 0, 0, 0, 0, 11, 15, 1, 1, 50, 30, 20, 0, 0, 0, -100, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 66, 228, 30, 0, 0, 0, 80],
        [44, 2, 4, 1, 16777215, 3342438, 1E3, 3, 1, 9, 4294967295, 1, 16, 16, 8, 8, 0, 0, 100, 10, 0, 100, 0, 0, 0, 0, 9, 11, 1, 10, 50, 30, 40, 0, 0, 0, -100, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 66, 230, 30, 0, 0, 0, 80],
        [46, 12, 8, 1, 10027008, 13056, 666, 1, 0, 6, 4284874803,
            1, 16, 16, 4, 4, 0, 0, 200, 20, 0, 100, 0, 0, 0, 0, 1, 1, 1, 0, 10, 100, 500, 4, 66, 0, -100, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 666, 231, 10, 305, 10, 251, 20
        ],
        [48, 12, 4, 2, 16777215, 16777215, 18E3, 4, 1, 6, 4284874803, 1, 16, 20, 8, 8, 50, 0, 1E3, 20, 0, 100, 0, 0, 0, 0, 6, 6, 6, 1E3, 350, 1E3, 500, 4, 66, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3E3, 666, 226, 5, 232, 5, 242, 10],
        [44, 12, 11, 1, 16777215, 3342438, 1200, 3, 1, 18, 4294967295, 1, 8, 12, 8, 8, 0, 0, 40, 40, 0, 100, 0, 0, 0, 0, 11, 15, 1, 10, 50, 30, 40, 0, 0, 0, -100, 0, 0, 0, 0, 0, 0, 0, 4278190080,
            1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 66, 255, 40, 0, 0, 0, 80
        ],
        [45, 2, 13, 1, 10066431, 153, 800, 3, 1, 9, 4284901119, 1, 16, 16, 8, 8, 10, 0, 100, 10, 0, 100, 0, 0, 0, 0, 1, 1, 3, 10, 50, 30, 40, 5, 250, 0, 0, 100, 0, 0, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 200, 254, 30, 0, 0, 0, 80],
        [47, 1, 13, 1, 16736272, 13369344, 1200, 1, 0, 5, 4294926352, 2, 12, 32, 8, 16, 0, 0, 200, 20, 8, 100, 0, 1, 0, 0, 3, 4, 1, 0, 10, 100, 500, 1, 50, 0, 100, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 300, 256, 20, 257, 20, 0, 20],
        [49, 1, 13, 2, 16760848, 13395456, 19E3, 1, 0, 6, 4294938640,
            2, 28, 28, 16, 16, 0, 0, 500, 20, 0, 100, 1, 0, 0, 0, 3, 4, 1, 0, 10, 100, 500, 1, 50, 0, 100, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3E3, 666, 283, 10, 0, 0, 249, 10
        ],
        [50, 12, 11, 3, 4340274, 4469538, 8E4, 104, 1, 6, 2164219920, 2, 16, 20, 12, 12, 50, 0, 100, 10, -1, 99, 0, 1, 0, 0, 6, 6, 50, 40, 300, 100, 60, 1, 50, 0, 0, 0, 0, 0, 90, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 6E3, 3E3, 159, 5, 0, 0, 160, 20],
        [0, 0, 0, 0, 0, 0, 0, 4, 1, 3, 4284874803, 1, 16, 16, 8, 8, 0, 0, 1E3, 10, 8, 100, 0, 0, 0, 0, 1, 1, 1, 80, 150, 50, 500, 4, 66, 0, 0, 0, 0, 0, 0, 2, 0, 6, 4284874854, 2, 16, 16, 8, 8, 66, 20, 0,
            86, 0, 0, 0, 1, 1, 30, 0, 0, 0, 0, 20, 0, 0, 0, 100
        ],
        [45, 10, 7, 1, 16763955, 13382400, 1E3, 3, 1, 4, 4294954035, 1, 16, 16, 8, 8, 0, 0, 10, 10, 1, 100, 0, 0, 0, 0, 2, 3, 1, 5, 10, 100, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 150, 253, 30, 0, 0, 0, 100],
        [48, 10, 7, 2, 13382400, 3355443, 5E3, 7, 0, 0, 4278190080, 1, 16, 16, 8, 8, 0, 0, 100, 10, 0, 100, 0, 0, 0, 0, -1, 0, 1, 0, 50, 30, 500, 0, 0, 50, 50, 50, 50, 50, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 300, 258, 20, 306, 20, 2, 1],
        [47, 5, 12, 1, 6710886, 13408614, 1200, 4, 0, 2, 4284900966, 1, 16, 16, 8, 8, 0, 0,
            200, 10, 8, 100, 0, 0, 0, 0, 40, 50, 1, 100, 50, 20, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 300, 259, 10, 0, 0, 0, 20
        ],
        [50, 5, 12, 2, 6684672, 13408614, 18E3, 4, 0, 2, 4284900966, 1, 16, 16, 8, 8, 0, 0, 200, 10, 8, 100, 0, 0, 0, 0, 40, 50, 1, 100, 50, 30, 500, 1, 0, 0, 0, 0, 0, 0, 80, 3, 0, 6, 2164219920, 2, 16, 16, 8, 8, 200, 40, 0, 90, 0, 2, 1, 8, 12, 10, 0, 3E3, 1500, 268, 10, 0, 0, 392, 10],
        [47, 10, 4, 1, 13382400, 4467234, 800, 3, 1, 9, 4291572480, 1, 16, 16, 8, 8, 0, 0, 60, 10, 0, 100, 0, 0, 0, 0, 5, 10, 1, 10, 50, 30, 60, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 350, 200, 0, 30, 0, 0, 260, 150
        ],
        [48, 3, 8, 1, 12303155, 13421772, 800, 1, 1, 17, 4290493235, 1, 16, 16, 8, 8, 0, 0, 100, 10, 5, 100, 0, 0, 0, 0, 5, 10, 1, 0, 50, 30, 200, 0, 0, 0, 0, 0, 0, 50, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 350, 300, 0, 20, 0, 0, 264, 80],
        [49, 7, 14, 2, 13421772, 2237064, 3E3, 1, 0, 14, 4291611852, 1, 32, 32, 24, 24, 0, 50, 60, 10, 0, 100, 1, 0, 0, 0, 80, 90, 1, 0, 50, 20, 40, 0, 0, 0, 0, 50, 0, 0, 50, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 550, 500, 0, 10, 0, 0, 262, 20],
        [51, 7, 14, 3, 13421772, 2237064, 2E4, 4, 0, 14, 4291572531, 1, 64, 64, 56, 56, 0,
            100, 110, 10, 0, 95, 1, 0, 0, 1, 150, 200, 1, 20, 50, 30, 300, 0, 0, 0, 0, 50, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4E3, 1500, 269, 10, 0, 0, 462, 10
        ],
        [48, 2, 5, 1, 6737100, 13107, 900, 3, 1, 17, 4278242355, 1, 16, 16, 8, 8, 0, 0, 300, 10, 0, 100, 0, 0, 0, 0, 10, 20, 1, 4, 50, 30, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 350, 250, 0, 20, 0, 0, 265, 80],
        [49, 3, 5, 1, 10066431, 13421772, 900, 1, 1, 17, 4281545727, 1, 16, 16, 8, 8, 0, 0, 200, 10, 3, 100, 0, 0, 0, 0, 10, 20, 1, 0, 50, 30, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 350, 250, 0, 20, 0, 0, 263, 80
        ],
        [50, 13, 14, 1, 13421772, 3355443, 1E3, 3, 1, 17, 4294967295, 1, 16, 16, 8, 8, 0, 0, 100, 10, 0, 100, 0, 0, 0, 0, 1, 5, 1, 15, 20, 50, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 550, 500, 0, 20, 0, 0, 267, 80],
        [52, 13, 14, 1, 13395456, 6697728, 3E3, 3, 1, 18, 4294914816, 1, 16, 16, 8, 8, 0, 0, 500, 10, 0, 100, 0, 0, 0, 0, 1, 5, 1, 6, 20, 50, 150, 1, 100, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1500, 1E3, 261, 40, 0, 0, 266, 40],
        [51, 1, 12, 9, 15449209, 13599032, 2E3, 0, 0, 0, 4278190080, 1, 16, 16, 8, 8, 0, 0, 100, 10,
            0, 100, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 200, 0, 0, 100, 100, 100, 100, 100, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 550, 2E3, 0, 10, 0, 0, 322, 20
        ],
        [49, 7, 11, 1, 7914239, 35839, 1100, 3, 1, 16, 4294967295, 1, 16, 16, 8, 8, 0, 0, 100, 10, 0, 100, 0, 0, 0, 0, 10, 20, 1, 15, 50, 30, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 350, 250, 0, 20, 0, 0, 0, 80],
        [50, 5, 14, 1, 39168, 3355443, 1400, 3, 1, 16, 4281584691, 1, 16, 16, 8, 8, 0, 0, 200, 10, 0, 100, 0, 0, 0, 0, 1, 1, 1, 15, 50, 20, 200, 4, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 350, 250,
            0, 20, 0, 0, 0, 80
        ],
        [53, 13, 14, 1, 16763904, 13408512, 5E3, 3, 1, 10, 4294967142, 1, 16, 16, 8, 8, 0, 0, 500, 10, 0, 100, 0, 0, 0, 0, 1, 99, 1, 30, 50, 30, 300, 3, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4E3, 1500, 344, 10, 0, 0, 408, 10],
        [51, 2, 15, 1, 6710886, 3355443, 1200, 3, 1, 11, 4288256409, 1, 8, 16, 8, 8, 0, 0, 100, 10, 0, 100, 0, 0, 0, 0, 5, 10, 1, 10, 50, 30, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 300, 312, 90, 0, 0, 0, 100],
        [53, 2, 15, 1, 13382451, 6684672, 1400, 3, 1, 18, 4291572531, 1, 8, 16, 8, 8, 0, 0, 500, 10, 0, 100, 0, 2, 0, 0,
            10, 20, 1, 10, 100, 100, 80, 1, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 300, 313, 10, 0, 0, 0, 30
        ],
        [53, 3, 15, 1, 6723891, 3355443, 1400, 3, 1, 11, 4284913971, 1, 8, 16, 8, 8, 0, 0, 500, 10, 0, 100, 0, 0, 0, 0, 1, 1, 1, 2, 300, 100, 200, 4, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 300, 314, 10, 0, 0, 0, 30],
        [55, 2, 15, 2, 13369344, 6710886, 22E3, 3, 1, 18, 4291559424, 1, 8, 16, 8, 8, 0, 0, 1500, 10, 0, 100, 0, 2, 0, 0, 10, 20, 3, 10, 100, 50, 80, 1, 50, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5E3, 1500, 315, 3,
            0, 0, 358, 10
        ],
        [52, 9, 15, 1, 6724044, 3368601, 1E3, 7203, 0, 15, 4281545523, 1, 16, 16, 8, 8, 0, 0, 100, 10, 0, 100, 0, 2, 0, 0, 1, 9, 4, 15, 50, 30, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 300, 0, 10, 0, 0, 320, 20],
        [52, 2, 15, 1, 13421772, 6710886, 1400, 3, 1, 11, 4288256409, 1, 8, 16, 8, 8, 0, 0, 100, 10, 0, 100, 0, 0, 0, 0, 5, 10, 1, 10, 50, 30, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 300, 316, 90, 0, 0, 0, 100],
        [53, 12, 15, 1, 13408767, 3342438, 3600, 2, 1, 15, 4291598847, 1, 16, 16, 8, 8, 0, 0, 40, 40, 0, 100, 0, 0, 0, 0, 10, 40, 1,
            1, 50, 20, 20, 0, 0, 0, -100, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 66, 317, 30, 0, 0, 0, 50
        ],
        [54, 12, 15, 1, 6723840, 13056, 3666, 3, 0, 6, 4284913920, 1, 16, 16, 4, 4, 0, 0, 1E3, 20, 0, 100, 0, 2, 0, 0, 1, 1, 1, 1, 10, 100, 500, 4, 6, 0, -100, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 600, 666, 318, 10, 0, 0, 0, 30],
        [56, 12, 15, 2, 10027008, 6697779, 26E3, 3, 1, 18, 4291559424, 1, 8, 16, 8, 8, 0, 0, 1500, 10, 0, 100, 0, 2, 0, 0, 10, 20, 5, 10, 100, 50, 300, 1, 50, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5E3, 1500, 319, 5, 0, 0, 356,
            10
        ],
        [56, 9, 15, 3, 6724044, 3368601, 55E3, 7203, 0, 15, 4281545523, 1, 24, 24, 16, 16, 0, 0, 200, 10, 0, 100, 0, 2, 0, 0, 15, 45, 4, 15, 50, 50, 60, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5500, 5500, 321, 1, 0, 0, 0, 10],
        [54, 2, 15, 1, 6723840, 13056, 1600, 3, 0, 6, 4278216192, 1, 16, 16, 4, 4, 0, 0, 200, 20, 0, 100, 0, 0, 0, 0, 1, 1, 1, 2, 50, 30, 80, 4, 10, 0, 0, 0, 0, 100, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 300, 0, 50, 0, 0, 325, 150],
        [54, 2, 15, 1, 16737792, 10040064, 1600, 3, 0, 13, 4294927872, 1, 16, 16, 4, 4, 0, 0, 200, 10, 0, 100, 0, 0, 0, 0, 1, 1, 1, 15,
            50, 20, 80, 1, 50, 0, 100, 0, 0, 0, 0, 1, 0, 5, 2164219920, 1, 16, 32, 12, 24, 100, 20, 5, 100, 0, 1, 0, 3, 4, 1, 0, 400, 300, 0, 50, 0, 0, 324, 150
        ],
        [54, 2, 15, 1, 16777062, 6710784, 1600, 3, 1, 10, 4294967193, 1, 16, 16, 4, 4, 0, 0, 200, 10, 0, 100, 0, 0, 0, 0, 1, 9, 1, 20, 50, 20, 40, 3, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 300, 0, 50, 0, 0, 326, 150],
        [57, 5, 15, 2, 10027008, 6697779, 28E3, 3, 1, 18, 4291559424, 1, 8, 16, 8, 8, 0, 0, 1500, 10, 0, 100, 0, 2, 0, 0, 10, 20, 7, 10, 100, 50, 300, 1, 50, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5E3, 1500, 0, 5,
            0, 0, 357, 10
        ],
        [53, 9, 15, 1, 16777062, 3355443, 1E3, 0, 0, 15, 4278190080, 1, 16, 16, 16, 16, 0, 0, 100, 10, 0, 100, 0, 0, 0, 0, 0, 0, 0, 10, 50, 50, 80, 0, 0, 1E4, 100, 100, 100, 100, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 9999, 0, 5, 0, 0, 0, 10],
        [55, 1, 7, 1, 16777215, 11059400, 2E3, 3, 1, 4, 4294967295, 1, 16, 16, 8, 8, 0, 0, 20, 40, 0, 100, 0, 0, 0, 0, 5, 5, 1, 5, 50, 20, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 300, 328, 90, 0, 0, 0, 100],
        [56, 0, 3, 1, 6710886, 3355443, 1600, 4, 0, 2, 4281545523, 1, 16, 16, 12, 12, 0, 10, 1E3, 10, 8, 100, 0, 0, 0, 0, 10,
            50, 1, 80, 50, 20, 150, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 500, 330, 15, 0, 0, 327, 30
        ],
        [57, 0, 3, 1, 11059400, 4931105, 1600, 4, 1, 16, 4289249480, 1, 16, 16, 8, 8, 0, 10, 1E3, 10, 5, 100, 0, 0, 0, 0, 5, 5, 1, 100, 50, 20, 150, 2, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 400, 332, 20, 0, 0, 323, 40],
        [59, 0, 3, 2, 16777215, 3355443, 3E4, 4, 0, 2, 4294967295, 1, 32, 32, 24, 24, 0, 10, 300, 10, 5, 100, 0, 1, 0, 1, 100, 500, 1, 120, 250, 50, 300, 0, 0, 0, 0, 0, 0, 0, 90, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6E3, 2E3, 329,
            3, 0, 0, 354, 10
        ],
        [56, 4, 16, 1, 16777215, 16777215, 1100, 4, 0, 13, 4294967295, 1, 16, 16, 8, 8, 0, 0, 1E3, 10, 5, 100, 0, 0, 0, 0, 5, 5, 1, 40, 50, 20, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 100, 333, 90, 0, 0, 0, 100],
        [57, 4, 16, 2, 10066329, 16777215, 2200, 4, 0, 2, 4288256409, 1, 16, 16, 12, 12, 0, 0, 1E3, 10, 2, 100, 0, 0, 0, 0, 15, 15, 1, 160, 50, 20, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 200, 334, 30, 0, 0, 0, 60],
        [58, 4, 16, 3, 14527231, 16777215, 3300, 4, 0, 2, 4292717311, 1, 16, 16, 12, 12, 0, 0, 500, 40, 2, 100, 0, 2, 0,
            0, 30, 30, 1, 160, 150, 20, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 300, 335, 20, 0, 0, 0, 40
        ],
        [60, 4, 16, 4, 16777215, 16777215, 33E3, 4, 0, 2, 4294967295, 1, 32, 32, 24, 24, 0, 0, 1200, 10, 1, 100, 0, 2, 0, 1, 300, 300, 1, 320, 250, 50, 320, 0, 0, 0, 0, 0, 0, 0, 90, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6E3, 500, 331, 5, 0, 0, 355, 10],
        [57, 5, 13, 1, 10035746, 3355443, 2E3, 4, 0, 12, 4288256409, 1, 16, 16, 8, 8, 0, 0, 1E3, 10, 2, 100, 0, 0, 0, 0, 1, 3, 1, 200, 10, 50, 80, 0, 0, 1E4, 0, 100, 100, 100, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 500, 300, 0, 50, 0, 0, 336, 150
        ],
        [57, 5, 13, 1, 10066176, 3355443, 2E3, 6, 0, 13, 4284900966, 1, 16, 16, 8, 8, 0, 0, 1E3, 10, 1, 100, 0, 0, 0, 0, 1, 3, 5, 15, 50, 50, 80, 0, 0, 1E4, 100, 100, 0, 100, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 300, 0, 50, 0, 0, 337, 150],
        [59, 6, 13, 1, 3355545, 3355443, 1E3, 1, 0, 6, 2164219920, 1, 16, 16, 12, 12, 0, 0, 20, 20, 0, 100, 0, 0, 0, 0, 2, 3, 1, 0, 5, 500, 200, 1, 50, 1E4, 100, 0, 100, 100, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 1E3, 0, 20, 0, 0, 339, 10],
        [61, 6, 16, 2, 10066329, 10066329, 35E3, 6, 0, 15, 4288256409, 1, 16, 16, 16,
            16, 0, 90, 100, 10, 5, 95, 0, 1, 0, 0, 50, 100, 10, 20, 250, 20, 80, 0, 0, 0, 100, 100, 100, 100, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6E3, 500, 338, 10, 0, 0, 340, 10
        ],
        [61, 14, 7, 1, 10035746, 6710886, 1500, 1, 0, 12, 4288256409, 1, 16, 16, 8, 8, 0, 0, 1E3, 10, 5, 100, 0, 0, 0, 0, 1, 1, 1, 0, 10, 50, 60, 1, 50, 0, 100, 100, 100, 100, 100, 1, 0, 5, 2164219920, 2, 16, 32, 16, 32, 300, 20, 0, 0, 0, 0, 0, 1, 1, 1, 0, 500, 500, 0, 50, 0, 0, 373, 200],
        [61, 4, 16, 1, 6710886, 10035746, 2500, 1, 0, 5, 2164219920, 2, 16, 32, 16, 32, 0, 0, 200, 20, 10, 100, 0, 1, 0, 0, 1, 1, 1, 0, 10, 200, 80, 1, 50, 0, 100, 100, 100, 100, 100,
            0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 500, 0, 50, 0, 0, 370, 200
        ],
        [63, 0, 3, 2, 6710886, 10035746, 35E3, 4, 0, 2, 4288256409, 1, 16, 16, 16, 16, 0, 0, 1E3, 10, 5, 100, 0, 0, 0, 0, 33, 33, 1, 120, 200, 20, 200, 1, 50, 0, 100, 100, 100, 100, 100, 6, 0, 5, 2164219920, 2, 16, 32, 16, 32, 50, 20, 20, 95, 0, 1, 0, 3, 6, 30, 0, 5E3, 5E3, 0, 20, 2, 1, 369, 20],
        [65, 14, 7, 2, 10035746, 6710886, 3E4, 1, 0, 2, 4288256409, 1, 16, 16, 16, 16, 0, 0, 1E3, 10, 5, 100, 0, 0, 0, 0, 66, 66, 1, 0, 50, 20, 80, 1, 50, 0, 100, 100, 100, 100, 100, 6, 0, 5, 2164219920, 2, 16, 32, 16, 32, 500, 20, 20, 95, 0, 1, 0, 3, 6, 30, 0, 6500, 5E3, 0, 5,
            0, 0, 375, 5
        ],
        [70, 13, 2, 2, 10040115, 3355443, 2E4, 104, 1, 6, 2164219920, 2, 16, 20, 12, 12, 30, 0, 100, 10, -1, 99, 0, 1, 0, 0, 3, 4, 30, 40, 300, 100, 60, 1, 50, 0, 100, 0, 0, 0, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8E3, 9999, 403, 4, 0, 0, 0, 5],
        [70, 13, 5, 2, 3355545, 3355443, 2E4, 3, 0, 7, 4291611903, 1, 32, 32, 24, 24, 0, 20, 200, 10, 0, 95, 0, 1, 40, 0, 5, 5, 1, 40, 50, 100, 200, 5, 500, 0, 0, 100, 0, 0, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8E3, 9999, 383, 4, 0, 0, 0, 5],
        [70, 13, 9, 2, 10066227, 3355443, 2E4, 3, 0, 2, 4294967142, 2, 16, 16, 8, 8, 0, 0, 200, 10, 0, 100, 0, 0,
            0, 0, 1, 50, 1, 40, 100, 100, 250, 3, 0, 0, 0, 0, 100, 0, 100, 2, 0, 15, 4294967142, 1, 16, 16, 8, 8, 50, 10, 0, 0, 0, 0, 0, 1, 9, 30, 0, 8E3, 9999, 402, 4, 0, 0, 0, 5
        ],
        [70, 13, 6, 2, 3381555, 3355443, 2E4, 4, 1, 3, 4284874803, 1, 16, 16, 8, 8, 0, 0, 1E3, 10, 8, 100, 0, 0, 0, 0, 1, 1, 1, 80, 200, 50, 500, 4, 66, 0, 0, 0, 0, 100, 100, 2, 0, 6, 4284874854, 2, 16, 16, 8, 8, 66, 20, 0, 86, 0, 0, 0, 1, 1, 30, 0, 8E3, 9999, 404, 4, 0, 0, 0, 5],
        [58, 2, 15, 1, 10066278, 16777164, 800, 3, 1, 9, 4294967244, 1, 16, 16, 8, 8, 0, 0, 50, 10, 0, 100, 0, 0, 0, 0, 5, 15, 1, 10, 50, 20, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 250,
            100, 0, 50, 0, 0, 0, 100
        ],
        [58, 10, 15, 1, 6723993, 13434879, 800, 3, 1, 4, 4291624959, 1, 16, 16, 8, 8, 0, 0, 10, 10, 0, 100, 0, 0, 0, 0, 5, 15, 1, 5, 50, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 250, 100, 0, 50, 0, 0, 0, 100],
        [60, 5, 8, 1, 13369599, 10066380, 2400, 3, 1, 4, 4284901119, 1, 16, 16, 8, 8, 0, 0, 300, 40, 0, 100, 0, 0, 0, 0, 10, 30, 3, 10, 50, 30, 180, 2, 50, 0, 0, 100, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2E3, 1E3, 346, 10, 0, 0, 352, 10],
        [62, 3, 16, 2, 16777215, 10027008, 38E3, 4, 0, 2, 4286611584, 1, 16, 16, 16, 16, 0, 0, 300, 10, 3, 100, 0,
            0, 0, 0, 10, 10, 1, 200, 50, 15, 350, 1, 50, 0, 50, 0, 0, 0, 90, 1, 0, 5, 3439288336, 1, 16, 48, 16, 48, 1E3, 20, 0, 100, 0, 0, 0, 6, 9, 1, 0, 6E3, 1E3, 359, 10, 0, 0, 463, 10
        ],
        [59, 5, 13, 2, 16777011, 3355392, 25E3, 5, 1, 10, 4294967091, 2, 16, 32, 8, 32, 0, 0, 500, 10, 2, 100, 0, 0, 0, 0, 1, 29, 1, 0, 5, 100, 180, 3, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5E3, 999, 348, 20, 2, 1, 349, 20],
        [60, 8, 14, 2, 17408, 14548957, 25E3, 3, 0, 13, 4278255360, 1, 16, 16, 4, 4, 0, 0, 500, 10, 0, 100, 0, 2, 0, 0, 1, 1, 32, 5, 50, 1E3, 500, 4, 3, 0, 0, 0, 0, 100, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 5E3, 2500, 345, 20, 2, 1, 0, 40
        ],
        [61, 10, 11, 2, 6710886, 13421772, 25E3, 104, 1, 6, 2164219920, 2, 16, 20, 12, 12, 50, 0, 100, 10, -1, 99, 0, 1, 0, 0, 2, 3, 50, 40, 250, 1, 60, 1, 50, 0, 100, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5E3, 5E3, 351, 20, 2, 1, 0, 40],
        [63, 4, 16, 1, 16777215, 10027008, 38E3, 3, 1, 1, 4288217088, 1, 8, 8, 8, 8, 0, 0, 100, 10, 0, 100, 0, 0, 0, 0, 5, 5, 1, 10, 5, 1E3, 150, 0, 0, 0, 0, 0, 0, 0, 90, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6500, 2E3, 347, 3, 350, 3, 353, 10],
        [60, 3, 7, 1, 16764108, 10053222, 900, 3, 0, 12, 4294954188, 1, 16, 16, 8, 8, 0,
            0, 1E3, 10, 0, 100, 0, 0, 0, 0, 5, 15, 1, 2, 50, 20, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 150, 361, 50, 0, 0, 0, 100
        ],
        [61, 3, 13, 1, 16711782, 6684723, 900, 1, 1, 17, 4294901862, 1, 16, 16, 8, 8, 0, 0, 1E3, 10, 5, 100, 0, 0, 0, 0, 10, 10, 1, 0, 30, 200, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 400, 365, 50, 0, 0, 0, 100],
        [62, 0, 3, 2, 13421823, 6710886, 25E3, 4, 0, 7, 4291611903, 2, 16, 16, 12, 12, 0, 0, 1E3, 10, 5, 100, 0, 0, 0, 0, 5, 5, 9, 150, 250, 20, 300, 5, 1500, 0, 100, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 5E3, 5E3, 360, 20, 2, 1, 363, 20
        ],
        [64, 5, 14, 2, 13421823, 16711782, 3E4, 3, 0, 2, 4291611903, 2, 16, 16, 8, 8, 0, 300, 300, 10, 0, 100, 0, 2, 0, 0, 0, 0, 1, 10, 50, 50, 300, 2, 20, 0, 0, 0, 0, 0, 90, 2, 1, 4, 4291611903, 2, 8, 16, 8, 8, 80, 10, 0, 100, 0, 0, 0, 5, 10, 30, 0, 6500, 3E3, 0, 5, 0, 0, 368, 10],
        [63, 0, 3, 1, 16751001, 6697779, 2500, 4, 0, 12, 4294914867, 1, 16, 16, 8, 8, 0, 10, 1E3, 10, 3, 100, 0, 0, 0, 0, 10, 30, 1, 200, 200, 1E3, 1E3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 150, 362, 90, 0, 0, 0, 100],
        [63, 0, 3, 1, 13395507, 6697728, 2500, 4, 0, 13, 4288243251, 1, 16,
            16, 8, 8, 0, 10, 1E3, 10, 3, 100, 0, 0, 0, 0, 1, 5, 7, 200, 200, 1E3, 1E3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 150, 367, 60, 0, 0, 0, 100
        ],
        [63, 5, 10, 1, 16763904, 10053120, 2500, 3, 1, 17, 4294953984, 1, 16, 16, 8, 8, 0, 0, 1E3, 10, 0, 100, 0, 0, 0, 0, 5, 15, 1, 5, 400, 1E3, 1E3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 150, 366, 40, 0, 0, 0, 80],
        [66, 4, 16, 1, 13395507, 16763904, 6E3, 2, 1, 17, 4294914867, 1, 16, 16, 8, 8, 0, 0, 1E3, 10, 0, 100, 0, 0, 0, 0, 5, 15, 1, 15, 300, 1E3, 1E3, 0, 0, 0, 0, 0, 0, 0, 90, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 650, 1E3, 364, 30, 0, 0, 393, 100
        ],
        [64, 8, 13, 1, 3355647, 10066380, 1E3, 3, 1, 16, 4291611903, 1, 16, 16, 8, 8, 0, 0, 1E3, 10, 0, 100, 0, 0, 0, 0, 5, 5, 1, 5, 200, 1E3, 500, 5, 1E3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 550, 100, 0, 50, 0, 0, 371, 100],
        [65, 1, 14, 9, 16777215, 3355494, 4E4, 4, 1, 17, 4288221457, 1, 32, 48, 32, 32, 0, 50, 500, 10, 3, 100, 0, 0, 0, 0, 10, 50, 1, 200, 150, 20, 300, 1, 50, 0, 0, 0, 0, 0, 0, 3, 0, 6, 3439288336, 2, 16, 16, 16, 16, 80, 20, 0, 90, 0, 2, 0, 6, 9, 50, 0, 5500, 550, 0, 20, 2, 1, 372, 20],
        [63, 1, 16, 1, 16750848, 10053120, 3E3, 3, 1, 4, 4281584691,
            1, 16, 16, 8, 8, 0, 0, 20, 20, 0, 100, 0, 0, 0, 0, 5, 20, 1, 5, 50, 50, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 550, 200, 0, 50, 0, 0, 374, 200
        ],
        [67, 1, 16, 9, 16777164, 13408512, 6E4, 4, 1, 17, 4284901017, 1, 32, 48, 32, 32, 0, 50, 1E3, 10, 3, 100, 0, 0, 0, 0, 10, 50, 1, 200, 150, 20, 300, 5, 1800, 0, 0, 0, 0, 0, 90, 3, 1, 9, 4291624959, 2, 16, 16, 16, 16, 50, 20, 0, 90, 0, 2, 0, 5, 15, 50, 0, 7E3, 1E3, 0, 5, 0, 0, 376, 10],
        [65, 1, 15, 1, 16777215, 10066380, 2E3, 2, 0, 13, 4284900966, 1, 16, 16, 8, 8, 0, 0, 500, 10, 0, 100, 0, 0, 0, 0, 2, 3, 1, 5, 50, 30, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 550, 150, 394, 90, 0, 0, 400, 90
        ],
        [66, 1, 15, 1, 16777079, 7829367, 2E3, 5, 1, 10, 4294967091, 2, 16, 16, 8, 16, 0, 0, 500, 10, 1, 98, 0, 0, 0, 0, 1, 29, 1, 0, 50, 20, 200, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 550, 150, 395, 90, 0, 0, 401, 90],
        [67, 5, 8, 2, 16750848, 10040064, 15E3, 203, 0, 2, 3439288336, 2, 16, 16, 8, 8, 0, 0, 1E3, 10, 0, 100, 0, 0, 0, 0, 5, 10, 30, 5, 150, 30, 500, 1, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2E3, 3E3, 396, 15, 397, 15, 399, 15],
        [69, 5, 8, 3, 16763955, 16750848, 3E4, 3, 1, 16, 4294926352,
            2, 32, 32, 24, 24, 0, 0, 1E3, 10, 0, 99, 1, 0, 200, 0, 5, 20, 1, 5, 300, 20, 500, 1, 50, 0, 0, 0, 0, 0, 95, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3E3, 3E3, 398, 10, 0, 0, 409, 20
        ],
        [64, 14, 15, 1, 26316, 10066380, 3E3, 1, 1, 9, 4291611903, 1, 16, 20, 4, 20, 0, 0, 200, 10, 5, 100, 0, 1, 0, 0, 5, 5, 1, 0, 50, 50, 500, 2, 25, 0, 0, 50, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 550, 500, 0, 30, 0, 0, 385, 50],
        [65, 1, 5, 2, 16777215, 3355494, 15E3, 104, 0, 12, 4294967295, 1, 16, 16, 8, 8, 30, 50, 300, 10, 3, 100, 0, 0, 0, 0, 10, 30, 5, 200, 150, 20, 500, 0, 0, 0, 0, 50, 0, 0, 80, 0, 0, 0, 4278190080, 1,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 550, 1500, 0, 20, 0, 0, 386, 30
        ],
        [66, 5, 8, 2, 16776960, 6710886, 15E3, 1, 1, 18, 4294967057, 2, 7, 32, 8, 32, 0, 0, 40, 10, 50, 100, 0, 1, 0, 0, 1, 99, 1, 0, 5, 250, 80, 3, 0, 0, 0, 50, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 550, 2E3, 0, 20, 2, 1, 387, 50],
        [68, 8, 14, 3, 16777215, 26316, 65E3, 104, 1, 9, 4278216396, 1, 16, 20, 8, 8, 200, 0, 500, 10, 3, 100, 0, 0, 0, 0, 25, 50, 30, 200, 150, 1E3, 500, 0, 0, 0, 0, 50, 0, 0, 100, 1, 1, 9, 4278216396, 2, 16, 20, 4, 20, 500, 10, 5, 100, 0, 1, 0, 25, 50, 1, 0, 7E3, 3E3, 0, 5, 0, 0, 388, 10],
        [70, 10, 13, 4, 2368552, 4931105, 25E4,
            4, 1, 17, 4291607446, 1, 32, 32, 8, 8, 0, 25, 200, 10, 8, 100, 0, 0, 0, 0, 100, 200, 1, 80, 50, 100, 100, 0, 0, 0, 0, 100, 0, 0, 100, 3, 1, 6, 4283121185, 1, 16, 16, 8, 8, 50, 40, 0, 94, 0, 2, 0, 8, 8, 15, 1, 8E3, 8E3, 377, 10, 379, 10, 381, 10
        ],
        [0, 0, 0, 0, 0, 0, 0, 6406, 1, 3, 4291611903, 2, 16, 16, 8, 8, 0, 25, 2E3, 10, 0, 100, 0, 2, 0, 0, 25, 50, 2, 10, 100, 100, 500, 5, 500, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 100],
        [66, 5, 17, 1, 6710886, 3355443, 9E3, 0, 0, 1, 4294967295, 1, 16, 16, 8, 8, 0, 0, 10, 10, 0, 100, 0, 0, 0, 0, 1, 1, 1, 0, 50, 20, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080,
            1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 300, 413, 60, 0, 0, 0, 80
        ],
        [68, 14, 17, 1, 13421772, 6710886, 2E3, 1, 1, 17, 4291598592, 1, 16, 16, 4, 4, 0, 0, 500, 10, 2, 100, 0, 0, 0, 0, 20, 30, 1, 0, 50, 30, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 600, 200, 412, 50, 0, 0, 0, 80],
        [68, 0, 17, 1, 13421772, 6710886, 3E3, 2, 1, 17, 4291572480, 1, 16, 16, 4, 4, 0, 0, 1E3, 10, 0, 100, 0, 0, 0, 0, 10, 20, 1, 5, 50, 30, 500, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 600, 200, 415, 60, 0, 0, 0, 80],
        [71, 5, 17, 2, 16724991, 10027212, 7E4, 4, 0, 12, 4294915071,
            1, 16, 16, 8, 8, 0, 0, 1E3, 10, 2, 100, 0, 2, 0, 0, 50, 60, 1, 150, 10, 50, 500, 0, 0, 0, 0, 0, 0, 0, 95, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6E3, 3E3, 414, 3, 0, 0, 0, 20
        ],
        [67, 7, 19, 1, 16751103, 13434726, 3E3, 3, 1, 4, 4278190182, 1, 16, 16, 8, 8, 0, 0, 40, 20, 0, 100, 0, 0, 0, 0, 20, 30, 1, 5, 50, 30, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 300, 416, 90, 0, 0, 0, 80],
        [68, 10, 18, 1, 13395558, 6697779, 5E3, 3, 0, 13, 4281545523, 1, 16, 16, 4, 4, 0, 0, 80, 20, 0, 100, 0, 0, 0, 0, 7, 13, 1, 10, 20, 200, 80, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 450, 300, 411, 60, 0, 0, 0, 80
        ],
        [69, 9, 19, 1, 13421619, 6723840, 6E3, 4, 1, 14, 4294967142, 1, 16, 16, 8, 8, 20, 60, 120, 10, 2, 100, 0, 0, 0, 0, 1, 45, 10, 50, 50, 30, 250, 3, 0, 0, 100, 100, 0, 0, 95, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 600, 300, 410, 20, 0, 0, 0, 40],
        [72, 9, 19, 2, 16777164, 13408767, 75E3, 1, 0, 15, 4280427042, 1, 24, 24, 16, 16, 0, 80, 1E3, 20, 1, 92, 0, 0, 0, 0, 1, 90, 1, 0, 10, 200, 500, 0, 0, 0, 100, 100, 0, 0, 95, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6E3, 3E3, 417, 3, 0, 0, 0, 20],
        [69, 5, 17, 1, 16737843, 6710784, 9E3, 104, 0, 13, 4294941030,
            1, 16, 16, 4, 4, 40, 0, 200, 10, 3, 100, 0, 0, 0, 0, 10, 20, 10, 150, 200, 30, 80, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 600, 400, 0, 50, 0, 0, 419, 100
        ],
        [69, 8, 7, 1, 16751001, 16777164, 9E3, 6, 0, 13, 4294967244, 1, 16, 16, 4, 4, 0, 10, 200, 10, 3, 99, 0, 0, 0, 0, 20, 30, 6, 25, 200, 1E3, 500, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 600, 400, 0, 50, 0, 0, 418, 100],
        [70, 14, 18, 1, 13382604, 6697728, 9E3, 1, 0, 12, 4284874905, 1, 16, 16, 8, 8, 0, 0, 500, 40, 1, 98, 0, 0, 0, 0, 8, 8, 1, 0, 15, 200, 500, 4, 50, 0, 0, 0, 0, 100, 0, 0, 0, 0, 4278190080, 1,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 600, 800, 0, 10, 0, 0, 421, 20
        ],
        [73, 6, 18, 2, 13421619, 10053120, 12E4, 104, 0, 13, 4284913920, 1, 16, 16, 4, 4, 50, 0, 300, 10, 3, 100, 0, 0, 0, 0, 8, 8, 10, 200, 150, 30, 500, 4, 50, 0, 0, 0, 0, 100, 95, 3, 1, 6, 4291611648, 1, 16, 16, 8, 8, 1E3, 40, 0, 99, 0, 2, 0, 8, 8, 3, 0, 6E3, 4E3, 0, 5, 0, 0, 464, 10],
        [70, 15, 8, 1, 6750003, 3368448, 1E4, 3, 0, 13, 4284887808, 1, 16, 16, 4, 4, 0, 0, 100, 10, 0, 100, 0, 0, 0, 0, 8, 9, 1, 5, 50, 20, 60, 0, 0, 0, -50, 0, 0, 100, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 600, 100, 0, 80, 0, 0, 420, 100],
        [70, 15, 8, 2, 6750003, 3368448, 3E4, 4, 0,
            12, 4284926976, 1, 16, 16, 8, 8, 0, 0, 300, 10, 3, 100, 0, 0, 0, 0, 1, 1, 1, 150, 100, 20, 180, 4, 40, 0, -50, 0, 0, 100, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 600, 500, 0, 50, 0, 0, 422, 80
        ],
        [74, 15, 8, 3, 6750003, 3368448, 15E4, 4, 0, 2, 4288217292, 1, 16, 16, 8, 8, 0, 0, 500, 10, 3, 100, 0, 0, 0, 0, 8, 8, 1, 200, 150, 30, 500, 4, 50, 0, 0, 0, 0, 100, 95, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6E3, 5E3, 0, 5, 0, 0, 423, 10],
        [71, 4, 17, 1, 16737792, 16750899, 9E3, 4, 0, 12, 4294926352, 2, 16, 16, 4, 4, 0, 20, 100, 10, 20, 100, 0, 0, 0, 0, 6, 8, 1, 40, 50, 50, 80, 1, 50, 1E4, -600, 100, 100, 100,
            100, 1, 0, 5, 2164219920, 2, 16, 32, 16, 32, 100, 20, 0, 0, 0, 0, 0, 6, 8, 1, 0, 600, 500, 0, 50, 0, 0, 424, 100
        ],
        [71, 4, 17, 1, 13421568, 16777164, 9E3, 4, 1, 10, 4294967091, 2, 16, 16, 4, 4, 0, 20, 100, 10, 20, 100, 0, 0, 0, 0, 1, 15, 1, 40, 50, 50, 80, 3, 0, 1E4, 100, 100, -600, 100, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 600, 500, 0, 50, 0, 0, 425, 100],
        [71, 4, 17, 1, 6724095, 13209, 9E3, 4, 1, 9, 4284914175, 2, 16, 16, 4, 4, 0, 20, 100, 10, 20, 100, 0, 0, 0, 0, 4, 5, 1, 40, 50, 50, 80, 2, 50, 1E4, 100, -600, 100, 100, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 600, 500, 0, 50, 0, 0, 427, 80],
        [75, 4, 19, 2, 6710886, 16777215, 12E4, 806, 1, 17, 4284900966, 1, 16, 16, 4, 4, 40, 20, 300, 10, 10, 99, 0, 0, 0, 0, 20, 30, 16, 50, 50, 100, 500, 0, 0, -100, 100, 100, 100, 100, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6E3, 5E3, 426, 5, 0, 0, 428, 5],
        [73, 1, 12, 9, 4210752, 13421568, 8E3, 4, 1, 18, 4294967056, 2, 16, 16, 8, 8, 0, 500, 500, 10, 3, 100, 0, 0, 0, 0, 0, 0, 1, 150, 150, 50, 500, 3, 0, 99999, 100, 100, 100, 100, 100, 1, 0, 18, 4294967057, 2, 64, 500, 40, 500, 10, 10, 0, 0, 1, 0, 1, 1, 9999, 1, 0, 1200, 7E3, 430, 10, 432, 10, 434, 10],
        [72, 2, 12, 1, 16764006, 16777164, 5E3, 3, 1, 9, 4288243200, 1,
            16, 16, 4, 4, 0, 0, 500, 10, 0, 100, 0, 0, 0, 0, 6, 9, 1, 2, 50, 50, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 600, 500, 431, 80, 0, 0, 0, 80
        ],
        [72, 15, 12, 1, 6736947, 16777164, 1E4, 1, 0, 9, 4288243200, 1, 16, 16, 4, 16, 0, 0, 200, 10, 5, 100, 0, 1, 0, 0, 6, 9, 1, 0, 50, 50, 500, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 600, 500, 429, 80, 0, 0, 0, 80],
        [76, 1, 12, 9, 4210752, 10027008, 12E3, 2, 1, 18, 4294910480, 2, 32, 64, 64, 4, 0, 0, 1E3, 10, 0, 100, 1, 0, 0, 1, 10, 10, 1, 5, 250, 50, 500, 1, 50, 99999, 100, 100, 100, 100, 100, 0, 0, 0, 4278190080, 1, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6E3, 7E3, 433, 6, 435, 6, 436, 6
        ],
        [74, 16, 18, 1, 10027212, 13421823, 1E4, 3, 0, 13, 4284874905, 1, 16, 16, 4, 4, 0, 0, 250, 10, 0, 100, 0, 0, 0, 0, 1, 1, 1, 5, 10, 100, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 700, 70, 0, 50, 437, 99, 438, 100],
        [77, 16, 18, 2, 13369548, 13421823, 15E4, 4803, 0, 12, 4288217241, 1, 16, 16, 4, 4, 0, 0, 500, 10, 0, 100, 0, 2, 0, 0, 1, 1, 3, 10, 5, 1E3, 400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7E3, 77, 0, 10, 439, 10, 440, 10],
        [74, 4, 20, 1, 13421772, 6710886, 15E3, 2, 1, 19, 4294967295,
            1, 8, 16, 16, 16, 0, 0, 10, 10, 0, 100, 0, 0, 0, 0, 10, 15, 1, 1, 50, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 800, 100, 0, 80, 0, 0, 445, 300
        ],
        [75, 4, 20, 1, 13382400, 4473924, 1E4, 104, 1, 6, 4294926352, 2, 8, 8, 8, 8, 6, 0, 50, 10, -1, 99, 0, 1, 0, 0, 5, 8, 3, 40, 10, 500, 40, 1, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 800, 200, 0, 10, 0, 0, 443, 20],
        [75, 0, 20, 1, 3355443, 8921600, 25E3, 4, 1, 17, 4294926352, 1, 24, 16, 8, 8, 0, 500, 500, 10, 3, 100, 0, 0, 0, 0, 0, 0, 1, 150, 250, 50, 500, 1, 50, 0, 0, 0, 0, 0, 0, 6, 0, 5, 2164219920, 2, 16, 32, 16, 32, 100,
            20, 5, 99, 0, 1, 0, 3, 5, 9, 0, 800, 200, 0, 10, 0, 0, 444, 20
        ],
        [78, 0, 20, 3, 3355443, 8921600, 15E4, 1604, 1, 17, 4294926352, 1, 24, 16, 8, 8, 0, 0, 500, 10, 3, 100, 0, 0, 0, 0, 10, 15, 3, 150, 50, 10, 500, 1, 50, 0, 0, 0, 0, 0, 100, 6, 0, 5, 2164219920, 2, 16, 32, 16, 32, 100, 20, 5, 99, 0, 1, 0, 3, 5, 9, 0, 8E3, 500, 441, 5, 0, 0, 442, 10],
        [75, 16, 20, 1, 13421772, 6710886, 1E4, 3, 1, 19, 4294967295, 1, 6, 6, 8, 8, 0, 0, 80, 10, 0, 100, 0, 0, 0, 0, 1, 9, 1, 5, 50, 20, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 800, 300, 2, 2, 446, 300, 447, 300],
        [77, 1, 18, 2, 16776960, 6697728, 9E4, 6, 1, 19, 3439329041,
            2, 16, 16, 16, 16, 0, 20, 200, 10, 0, 96, 0, 0, 500, 0, 1, 33, 9, 50, 50, 50, 40, 3, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 800, 5E3, 451, 5, 0, 0, 448, 20
        ],
        [77, 5, 13, 2, 13434624, 3355392, 9E4, 3, 1, 18, 4291624755, 2, 8, 8, 8, 8, 0, 0, 200, 10, 0, 100, 0, 0, 0, 0, 1, 33, 1, 30, 9, 250, 300, 3, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 800, 5E3, 449, 20, 0, 0, 450, 20],
        [79, 5, 20, 3, 3355443, 16772608, 18E4, 3, 1, 19, 4294962688, 2, 8, 8, 8, 8, 0, 0, 300, 10, 0, 100, 0, 0, 500, 0, 1, 33, 1, 30, 4, 250, 500, 3, 0, 0, 0, 0, 100, 0, 100, 0, 0, 0, 4278190080, 1, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8E3, 5E3, 0, 5, 0, 0, 465, 10
        ],
        [76, 11, 20, 1, 13421772, 6714227, 15E3, 4, 1, 19, 4288256409, 1, 8, 8, 4, 4, 0, 0, 200, 10, 5, 100, 0, 0, 0, 0, 9, 12, 1, 120, 50, 1E3, 500, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 800, 300, 453, 80, 0, 0, 0, 100],
        [78, 11, 20, 3, 10079487, 6714227, 9E4, 4503, 1, 19, 3432631551, 2, 12, 12, 8, 8, 0, 0, 200, 10, 0, 100, 0, 2, 0, 0, 1, 1, 5, 20, 5, 1E3, 500, 5, 500, 0, 0, 0, 0, 0, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4E3, 4E3, 452, 10, 0, 0, 0, 20],
        [76, 1, 17, 1, 13382400, 6714227, 15E3, 3, 1, 6, 4294926352,
            2, 16, 16, 8, 8, 0, 0, 50, 10, -1, 99, 1, 0, 0, 0, 3, 6, 1, 5, 20, 40, 40, 1, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 800, 300, 454, 80, 0, 0, 0, 100
        ],
        [80, 0, 17, 3, 13382400, 6714227, 18E4, 1, 0, 2, 4294926368, 2, 32, 32, 24, 24, 0, 0, 2E3, 10, 0, 100, 1, 0, 500, 0, 3, 6, 1, 0, 500, 1E3, 500, 1, 100, 0, 0, 0, 0, 0, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8E3, 6E3, 0, 5, 0, 0, 467, 10],
        [77, 17, 17, 1, 43520, 4469538, 15E3, 3, 1, 12, 4278233600, 2, 16, 16, 8, 8, 0, 0, 200, 10, 0, 100, 1, 0, 0, 0, 6, 9, 1, 10, 50, 20, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 800, 500, 455, 60, 0, 0, 0, 100
        ],
        [77, 17, 20, 1, 39355, 2245700, 15E3, 4, 1, 19, 4278229435, 2, 8, 8, 8, 8, 0, 0, 200, 10, 5, 100, 1, 0, 0, 0, 9, 12, 1, 120, 50, 20, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 800, 500, 457, 60, 0, 0, 0, 100],
        [79, 17, 11, 1, 13382400, 3355443, 15E3, 3, 0, 6, 4294926352, 2, 16, 16, 8, 8, 0, 0, 200, 10, 0, 98, 1, 0, 0, 0, 2, 3, 1, 20, 10, 200, 120, 1, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 800, 1500, 458, 40, 0, 0, 0, 20],
        [81, 5, 13, 3, 13408563, 4469538, 2E5, 4, 1, 17, 4291598643, 2, 16, 16, 8, 8,
            10, 0, 1E3, 10, 1, 100, 0, 0, 0, 0, 9, 12, 30, 200, 100, 50, 500, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8E3, 7E3, 456, 5, 0, 0, 468, 10
        ],
        [79, 4, 12, 2, 4473924, 5592405, 9E4, 4, 1, 17, 4284900966, 1, 80, 64, 16, 16, 0, 0, 200, 10, 4, 100, 0, 0, 0, 0, 100, 200, 1, 100, 200, 20, 100, 0, 0, 0, 100, 100, 100, 100, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 800, 9999, 2, 2, 471, 20, 0, 100],
        [79, 4, 12, 2, 4473924, 4473924, 9E4, 6, 1, 3, 4288243251, 1, 16, 16, 8, 8, 0, 0, 200, 10, 4, 100, 0, 0, 0, 0, 60, 90, 10, 30, 200, 20, 200, 0, 0, 0, 100, 100, 100, 100, 100, 0, 0, 0, 4278190080,
            1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 800, 9999, 2, 2, 472, 20, 0, 100
        ],
        [79, 4, 12, 2, 4473924, 3355443, 9E4, 1, 1, 1, 4291559526, 2, 24, 24, 12, 12, 0, 170, 200, 20, 0, 100, 1, 0, 200, 0, 100, 200, 1, 0, 200, 20, 200, 0, 0, 0, 100, 100, 100, 100, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 800, 9999, 2, 2, 477, 20, 0, 20],
        [82, 4, 11, 1, 10066329, 10066329, 5E4, 1604, 1, 17, 4288269567, 2, 16, 16, 8, 8, 10, 100, 1E3, 10, 1, 100, 0, 0, 0, 0, 10, 20, 6, 250, 200, 20, 100, 5, 250, 0, 0, 100, 0, 0, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2E3, 9999, 476, 10, 0, 0, 466, 25],
        [80, 2, 20, 1,
            16777011, 10053171, 12E3, 6403, 1, 20, 4294967091, 2, 16, 16, 8, 8, 0, 0, 200, 10, 0, 100, 0, 0, 0, 0, 1, 9, 2, 30, 50, 50, 80, 3, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 900, 500, 478, 100, 0, 0, 0, 100
        ],
        [80, 16, 18, 1, 39168, 10053171, 12E3, 5603, 0, 13, 4278229248, 1, 16, 16, 4, 4, 0, 0, 500, 10, 0, 100, 0, 0, 0, 0, 1, 1, 9, 5, 300, 1, 300, 4, 66, 0, 0, 0, 0, 75, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 900, 500, 475, 90, 0, 0, 0, 100],
        [81, 3, 19, 1, 16736272, 10053171, 15E3, 3, 1, 22, 4294926352, 2, 16, 16, 12, 12, 0, 0, 200, 20, 0, 98, 1, 0, 0, 0, 8, 8, 1, 20, 10, 50, 200,
            1, 50, 0, 75, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 900, 1500, 473, 20, 0, 0, 0, 20
        ],
        [83, 8, 8, 2, 26316, 26316, 2E5, 403, 1, 22, 4281571839, 2, 16, 16, 8, 8, 25, 0, 1E3, 10, 0, 100, 0, 0, 0, 0, 2, 4, 8, 10, 25, 1E3, 1E3, 5, 500, 0, 0, 100, 0, 0, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9E3, 3E3, 474, 2, 0, 0, 469, 10],
        [81, 4, 19, 1, 16764108, 10040166, 2E4, 2, 1, 1, 4288230246, 1, 16, 16, 8, 8, 0, 0, 10, 20, 0, 100, 0, 0, 0, 0, 15, 30, 1, 20, 50, 50, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 900, 400, 483, 100, 0, 0, 0, 100],
        [81, 4, 19,
            1, 13421823, 6697881, 2E4, 3, 1, 9, 4284887961, 1, 16, 16, 8, 8, 0, 0, 150, 10, 0, 100, 0, 0, 0, 0, 4, 6, 1, 8, 50, 50, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 900, 400, 486, 100, 0, 0, 0, 100
        ],
        [82, 0, 20, 3, 16764108, 10040166, 1E5, 104, 1, 3, 4294927974, 1, 16, 16, 8, 8, 100, 10, 1E3, 10, 5, 100, 0, 0, 50, 0, 10, 20, 50, 150, 300, 50, 300, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 900, 4E3, 481, 5, 0, 0, 0, 20],
        [84, 0, 20, 5, 13421823, 6697881, 2E5, 104, 1, 3, 4291585791, 1, 16, 16, 8, 8, 100, 10, 160, 10, 5, 100, 0, 2, 100, 0, 10, 20, 50, 150, 300,
            50, 1E3, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9E3, 4E3, 484, 3, 0, 0, 470, 10
        ],
        [82, 5, 20, 1, 13408563, 10053171, 2E4, 4, 1, 20, 4291598643, 1, 16, 16, 8, 8, 0, 10, 1E3, 10, 3, 100, 0, 0, 0, 0, 10, 30, 1, 200, 150, 1E3, 1E3, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 900, 900, 480, 100, 0, 0, 0, 100],
        [82, 5, 20, 1, 3394764, 10053171, 2E4, 4, 1, 19, 4281584844, 1, 8, 8, 8, 8, 0, 10, 1E3, 10, 3, 100, 0, 0, 0, 0, 10, 30, 1, 200, 150, 50, 1E3, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 900, 900, 479, 100, 0,
            0, 0, 100
        ],
        [82, 11, 20, 1, 13395660, 6710886, 2E4, 4, 1, 9, 4291585740, 1, 16, 16, 8, 8, 0, 10, 1E3, 10, 3, 100, 0, 0, 0, 0, 10, 30, 1, 200, 50, 1E3, 1E3, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 900, 900, 482, 100, 0, 0, 0, 100],
        [85, 0, 18, 2, 16763904, 13408563, 2E5, 2, 1, 18, 4294914833, 2, 16, 16, 8, 8, 0, 0, 500, 10, 0, 100, 1, 0, 0, 0, 20, 30, 1, 10, 10, 20, 300, 1, 50, 0, 0, 0, 0, 0, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9E3, 9E3, 485, 3, 541, 10, 543, 10],
        [83, 10, 18, 1, 13382400, 3355443, 2E4, 2, 1, 20, 4294926352, 2, 16, 16, 8, 8, 0, 0, 200, 20, 0, 99, 0,
            0, 20, 0, 2, 3, 1, 1, 10, 100, 500, 1, 50, 0, 100, 0, 0, -200, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 900, 1500, 0, 100, 0, 0, 492, 160
        ],
        [83, 10, 18, 1, 13408512, 3355443, 2E4, 2, 1, 20, 4294967091, 2, 16, 16, 8, 8, 0, 0, 200, 20, 0, 100, 0, 0, 0, 0, 1, 30, 1, 1, 10, 100, 500, 3, 0, 0, 0, 0, 100, -200, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 900, 1500, 0, 100, 0, 0, 491, 160],
        [83, 10, 18, 1, 26316, 3355443, 2E4, 2, 1, 20, 4281558732, 2, 16, 16, 8, 8, 0, 0, 200, 20, 0, 100, 0, 0, 0, 0, 5, 5, 1, 1, 10, 100, 500, 5, 50, 0, 0, 100, 0, -200, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 900, 1500, 0, 100, 0, 0, 494, 160
        ],
        [86, 10, 18, 2, 52224, 3355443, 2E5, 603, 1, 20, 4281584691, 2, 16, 16, 8, 8, 20, 0, 250, 10, 0, 100, 0, 0, 0, 0, 1, 1, 40, 10, 300, 20, 200, 4, 666, 0, 0, 0, 0, 100, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9E3, 9999, 493, 3, 495, 6, 544, 10],
        [84, 7, 21, 1, 13382400, 13395507, 22E3, 3, 1, 9, 4294941030, 1, 16, 16, 8, 8, 0, 0, 200, 10, 0, 100, 0, 0, 0, 0, 5, 15, 1, 10, 50, 50, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 3333, 487, 50, 0, 0, 0, 100],
        [84, 5, 21, 1, 2254370, 4491332, 22E3, 6406, 0, 13, 4286028151, 1, 16,
            16, 8, 8, 0, 0, 200, 10, 0, 100, 0, 0, 0, 0, 5, 5, 5, 5, 50, 50, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 3333, 488, 25, 0, 0, 0, 100
        ],
        [84, 14, 21, 1, 3368652, 10066380, 22E3, 1, 1, 17, 4291611903, 1, 16, 16, 8, 8, 0, 0, 200, 10, 3, 100, 0, 0, 0, 0, 5, 5, 1, 0, 50, 50, 200, 5, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 3333, 490, 200, 0, 0, 0, 100],
        [87, 16, 21, 3, 10053120, 16763904, 25E4, 6403, 0, 13, 4294953984, 1, 16, 16, 8, 8, 0, 0, 250, 10, 0, 100, 0, 0, 0, 0, 5, 15, 7, 10, 10, 1E3, 400, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 9999, 489, 3, 547, 10, 548, 10
        ],
        [85, 5, 8, 1, 3394815, 13158, 24E3, 3, 0, 12, 4281584895, 2, 16, 16, 8, 8, 0, 0, 200, 10, 0, 100, 0, 0, 0, 0, 6, 8, 1, 6, 50, 50, 200, 0, 0, 0, -100, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 900, 300, 497, 80, 0, 0, 0, 100],
        [85, 18, 8, 1, 13382655, 3342438, 24E3, 4, 0, 12, 4291572735, 2, 16, 16, 8, 8, 0, 0, 200, 10, 2, 100, 0, 0, 0, 0, 6, 8, 1, 100, 50, 50, 200, 0, 0, 0, -100, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 900, 300, 503, 80, 0, 0, 0, 100],
        [86, 2, 13, 1, 13382400, 10053171, 3E4, 104, 1, 22, 2164219920,
            2, 12, 12, 6, 6, 30, 0, 100, 10, -1, 99, 1, 0, 0, 0, 4, 6, 30, 80, 200, 100, 30, 1, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 900, 900, 498, 10, 0, 0, 528, 30
        ],
        [88, 5, 6, 3, 13434675, 10066227, 24E4, 104, 0, 12, 4294967091, 2, 16, 16, 8, 8, 90, 0, 300, 10, 3, 100, 0, 2, 0, 0, 8, 9, 30, 150, 100, 50, 500, 3, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9E3, 5E3, 499, 3, 502, 3, 529, 5],
        [86, 16, 21, 1, 15658496, 3355443, 15E4, 6403, 1, 20, 4294967091, 2, 12, 12, 6, 6, 0, 0, 150, 10, 0, 100, 0, 2, 0, 0, 3, 3, 3, 10, 10, 250, 200, 3, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 4278190080,
            1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 900, 5E3, 496, 10, 500, 10, 501, 10
        ],
        [86, 5, 6, 1, 13408512, 10053120, 24E3, 4, 0, 12, 4294954035, 2, 16, 16, 8, 8, 0, 0, 200, 10, 3, 100, 0, 0, 0, 0, 6, 8, 1, 100, 50, 50, 200, 0, 0, 0, -100, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 900, 400, 505, 100, 0, 0, 0, 100],
        [86, 18, 6, 1, 10066380, 6710937, 24E3, 1, 0, 7, 4288269567, 2, 12, 12, 8, 8, 0, 0, 200, 10, 2, 100, 0, 0, 0, 0, 1, 5, 1, 0, 100, 50, 200, 5, 500, 0, -100, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 900, 400, 504, 100, 507, 100, 510, 100],
        [87, 1, 13, 1, 16724736, 16750848,
            3E4, 3, 1, 18, 4294926352, 2, 16, 16, 8, 8, 0, 0, 1E3, 10, 0, 100, 1, 0, 0, 0, 10, 20, 1, 5, 50, 50, 500, 1, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 900, 1E3, 509, 10, 0, 0, 530, 20
        ],
        [89, 5, 8, 3, 16724736, 16750848, 24E4, 2406, 1, 20, 4294926352, 2, 16, 16, 8, 8, 0, 0, 1500, 10, 0, 100, 0, 2, 0, 0, 30, 50, 7, 5, 100, 50, 500, 1, 50, 0, 0, 0, 0, 0, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9E3, 6E3, 508, 3, 511, 3, 531, 5],
        [87, 16, 21, 1, 16763904, 3355443, 15E4, 12806, 1, 20, 4294967091, 2, 12, 12, 6, 6, 0, 0, 150, 10, 0, 100, 0, 2, 0, 0, 4, 4, 4, 10, 10, 250, 200, 3, 0, 0, 0,
            0, 0, 0, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 900, 6E3, 506, 10, 532, 20, 545, 40
        ],
        [87, 6, 21, 1, 39168, 13395456, 2E4, 1, 0, 21, 4291624908, 1, 16, 16, 8, 8, 0, 0, 30, 30, 0, 100, 0, 0, 0, 0, 4, 6, 1, 0, 50, 50, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 300, 519, 150, 515, 150, 538, 400],
        [87, 6, 21, 2, 8930304, 13395456, 26E3, 104, 1, 3, 4284887808, 1, 16, 16, 8, 8, 20, 0, 500, 10, 3, 100, 0, 0, 0, 0, 5, 5, 2, 150, 5, 250, 500, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 400, 512, 15, 518, 15, 539, 30],
        [88, 6, 21,
            3, 13421619, 13395456, 32E3, 1, 1, 18, 4294967091, 2, 8, 32, 8, 32, 0, 0, 40, 10, 50, 100, 0, 1, 0, 0, 1, 55, 1, 0, 5, 250, 250, 3, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 500, 513, 15, 514, 15, 537, 30
        ],
        [90, 6, 21, 4, 16724736, 16750848, 25E4, 104, 1, 21, 4294926352, 2, 32, 32, 24, 24, 60, 0, 900, 10, 3, 99, 0, 2, 0, 0, 12, 16, 15, 100, 100, 50, 500, 1, 50, 0, 100, 0, 0, 0, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E4, 600, 516, 3, 517, 3, 540, 5],
        [88, 1, 20, 1, 13434879, 16764006, 5E3, 3, 1, 4, 4291624959, 1, 32, 32, 16, 16, 0, 0, 30, 30, 0, 100, 0, 0, 0, 0, 10,
            20, 1, 20, 100, 50, 50, 0, 0, 1E3, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 500, 522, 200, 526, 200, 535, 500
        ],
        [89, 16, 13, 5, 4473907, 15658496, 7E4, 3, 1, 20, 4294967091, 2, 32, 16, 4, 4, 0, 0, 200, 10, 0, 100, 0, 0, 0, 0, 1, 30, 1, 30, 5, 1E3, 300, 3, 0, 0, 0, 0, 100, 0, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 700, 520, 5, 533, 10, 534, 10],
        [89, 13, 10, 3, 4469555, 16728080, 8E4, 3, 1, 6, 4294926352, 2, 32, 40, 32, 32, 0, 0, 100, 10, -1, 98, 0, 1, 0, 0, 12, 15, 2, 20, 5, 250, 300, 1, 50, 0, 100, 0, 0, 0, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 1E3, 600, 521, 5, 523, 5, 524, 5
        ],
        [91, 1, 20, 1, 16737996, 16764006, 25E4, 2, 1, 19, 3439290060, 2, 32, 32, 32, 32, 0, 0, 1E3, 10, 0, 100, 1, 0, 0, 0, 500, 600, 1, 5, 600, 50, 500, 0, 0, 1E3, 0, 0, 0, 0, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E4, 1E3, 525, 3, 527, 3, 536, 5],
        [89, 4, 4, 1, 13421772, 3355494, 3E4, 2, 1, 1, 4294914867, 1, 16, 16, 8, 8, 0, 0, 10, 10, 0, 100, 0, 0, 0, 0, 60, 80, 1, 1, 50, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 1E3, 549, 200, 0, 0, 550, 200],
        [90, 4, 4, 1, 13369344, 3355494, 5E4, 4, 0, 2, 4284900966, 1, 8, 8, 8, 8, 0, 0, 300,
            10, 3, 100, 0, 0, 0, 0, 10, 30, 4, 150, 50, 15, 150, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 24, 4294926352, 1, 16, 48, 12, 36, 100, 20, 0, 100, 0, 0, 0, 10, 20, 1, 0, 1E3, 3E3, 553, 40, 555, 40, 556, 40
        ],
        [90, 0, 3, 1, 13369344, 13421772, 5E4, 104, 1, 17, 4284901068, 1, 16, 16, 8, 8, 50, 20, 300, 10, 5, 100, 0, 0, 50, 0, 5, 5, 10, 100, 50, 15, 300, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 3E3, 551, 25, 552, 25, 554, 25],
        [92, 4, 4, 2, 13421772, 3355494, 3E5, 5, 1, 1, 4294914867, 1, 32, 16, 32, 8, 0, 0, 200, 20, 5, 99, 0, 0, 0, 0, 300, 500, 5, 0, 150, 100, 250, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 4278190080, 1, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E4, 9999, 542, 10, 0, 0, 546, 10
        ],
        [99, 4, 4, 3, 12303291, 8934690, 999999, 3, 0, 2, 4294926352, 2, 16, 16, 16, 16, 0, 0, 100, 20, 0, 98, 1, 0, 0, 0, 6, 7, 24, 15, 60, 300, 100, 1, 100, 0, 0, 100, 0, 0, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 99999, 9999, 557, 2, 0, 0, 0, 10],
        [0, 0, 0, 0, 0, 0, 0, 5, 1, 20, 4284914175, 2, 8, 8, 4, 4, 0, 0, 300, 10, 3, 100, 0, 0, 0, 0, 5, 5, 10, 0, 60, 300, 300, 2, 20, 0, 0, 0, 0, 0, 0, 2, 0, 15, 4288269567, 2, 8, 8, 4, 4, 50, 20, 0, 98, 0, 0, 0, 5, 5, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 9, 1, 18, 4294967091, 2, 8, 16, 16, 16, 30, 0, 100, 10, 0, 100,
            0, 0, 0, 0, 1, 33, 6, 50, 60, 300, 500, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        ],
        [0, 0, 0, 0, 0, 0, 0, 4, 1, 3, 4284887808, 1, 16, 16, 16, 16, 50, 50, 400, 10, 2, 100, 0, 0, 0, 0, 1, 1, 20, 300, 60, 300, 500, 4, 66, 0, 0, 0, 0, 0, 0, 1, 0, 6, 4284913920, 1, 32, 32, 24, 24, 50, 50, 0, 100, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 3, 1, 17, 4288269567, 2, 16, 16, 4, 4, 0, 0, 100, 10, 0, 100, 0, 2, 0, 0, 8, 8, 1, 75, 60, 300, 500, 5, 1800, 0, 0, 0, 0, 0, 0, 1, 0, 7, 4288269567, 2, 48, 48, 16, 16, 10, 6, 0, 100, 0, 0, 0, 5, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 8, 0, 25,
            4288217088, 1, 64, 64, 40, 48, 0, 90, 100, 20, 0, 100, 0, 0, 0, 1, 9999, 9999, 1, 0, 60, 300, 500, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        ],
        [95, 13, 21, 1, 16766720, 10040064, 99999, 1, 1, 17, 4294914816, 2, 8, 8, 4, 4, 0, 0, 300, 10, 3, 99, 0, 0, 0, 0, 10, 20, 1, 0, 60, 50, 500, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E4, 9999, 561, 100, 0, 0, 0, 5],
        []
    ],
    Hitboxvar1 = [20, 20, 20, 20, 18, 8, 20, 20, 8, 20, 16, 16, 20, 20, 16, 16, 16, 14, 8],
    Hitboxvar2 = [20, 20, 20, 20, 24, 40, 20, 20, 20, 20, 16, 24, 20, 20, 16, 16, 16, 14, 40],
    Text_Spacing = [1, .2, 1, .2, 2, .5,
        1, .1, 1, .1, 1, 1, .1, .1, 1, 1, .2, 1, .5
    ],
    Enemies = new SR_Enemy;

function SR_Enemy() {
    var a, b;
    this.a = Array(300);
    for (a = 0; 300 > a; a++) this.a[a] = Array(21);
    this.c = Array(300);
    for (a = 0; 300 > a; a++) this.c[a] = Array(21);
    this.f = new Int32Array(300);
    this.v = new Int32Array(300);
    this.b = new Int32Array(300);
    this.h = new Int32Array(300);
    this.g = new Int32Array(300);
    this.j = new Int32Array(300);
    this.s = new Int32Array(300);
    this.D = new Int32Array(300);
    this.u = new Int32Array(300);
    this.A = new Int32Array(300);
    this.F = new Int32Array(300);
    this.B = new Int32Array(300);
    this.C = new Int32Array(300);
    this.w = new Int32Array(300);
    for (a = this.I = this.i = 0; 300 > a; a++)
        for (b = 0; 21 > b; b++) this.a[a][b] = new Vector2D;
    for (a = 0; 300 > a; a++)
        for (b = 0; 21 > b; b++) this.c[a][b] = new Vector2D
}
SR_Enemy.prototype.o = function() {
    this.I = this.i = 0
};
SR_Enemy.prototype.add = function(a, b, c) {
    var d;
    d = floor(100 * Enemy_Spawn_Scale / 100);
    if (this.i != d && this.I != d) {
        a *= 8;
        b *= 8;
        for (d = 0; 21 > d; d++) assignVector2D(this.a[this.i][d], a + random(1), b + random(1)), this.c[this.i][d].set(this.a[this.i][d]);
        this.f[this.i] = c;
        this.v[this.i] = EN_Info[c][EN_Species];
        this.b[this.i] = 0;
        this.h[this.i] = 0;
        this.g[this.i] = 0;
        this.j[this.i] = EN_Info[c][EN_LP];
        this.s[this.i] = 0;
        this.D[this.i] = 0;
        this.u[this.i] = 0;
        this.A[this.i] = 0;
        this.F[this.i] = 0;
        this.B[this.i] = 0;
        this.C[this.i] = 0;
        this.w[this.i] = 0;
        this.i++;
        this.I++
    }
};
SR_Enemy.prototype.sub = function(a) {
    for (var b = 0; 21 > b; b++) this.a[a][b].set(this.a[this.i - 1][b]), this.c[a][b].set(this.c[this.i - 1][b]);
    this.f[a] = this.f[this.i - 1];
    this.v[a] = this.v[this.i - 1];
    this.b[a] = this.b[this.i - 1];
    this.h[a] = this.h[this.i - 1];
    this.g[a] = this.g[this.i - 1];
    this.j[a] = this.j[this.i - 1];
    this.s[a] = this.s[this.i - 1];
    this.D[a] = this.D[this.i - 1];
    this.u[a] = this.u[this.i - 1];
    this.A[a] = this.A[this.i - 1];
    this.F[a] = this.F[this.i - 1];
    this.B[a] = this.B[this.i - 1];
    this.C[a] = this.C[this.i - 1];
    this.w[a] = this.w[this.i - 1];
    this.i--
};

function ENgroundCollision(a, b, c, d) {
    var e = new Vector2D;
    Vdistance(e, a.a[b][c], a.c[b][c]);
    a.a[b][c].set(a.c[b][c]);
    var g = (magnitudeOf(e) >> 2) + 1;
    scaleVector2D(e, 1 / g);
    for (var h, q, m, l = 0; l < g; l++) h = a.a[b][c].y + e.y, q = clamp(a.a[b][c].x, 0, 511) >> 3, m = clamp(h, 0, 255) >> 3, q = Terrain.a[m][q], 0 > h || 256 <= h || (0 <= q && 8 >= q ? (0 < e.y && (a.g[b] |= 2), e.x *= d, e.y = -e.y) : a.a[b][c].y = h), h = a.a[b][c].x + e.x, q = clamp(h, 0, 511) >> 3, m = clamp(a.a[b][c].y, 0, 255) >> 3, q = Terrain.a[m][q], 0 > h || 512 <= h || (0 <= q && 8 >= q ? (e.y *= d, e.x = -e.x, a.g[b] |= 1) : a.a[b][c].x = h)
}

function ENfindEnemy(a, b, c, d) {
    for (var e = Enemies, g = .5 * (a + c), h = 1E3, q = -1, m, l, A, z = 0; z < e.i; z++) m = EN_Info[e.f[z]][EN_Size], l = EN_Info[e.f[z]][EN_Species], A = (Hitboxvar1[l] >> 1) * ((m >> 1) + 1), m = (Hitboxvar2[l] >> 1) * m, e.D[z] = 0, l = e.a[z][20], !e.j[z] || l.x - A > c || l.x + A < a || l.y - m > d || l.y + m < b || (e.D[z] = 1, absVal(l.x - g) < h && (h = absVal(l.x - g), q = z));
    return q
}

function ENtakeDamage(a, b, c, d, e, g, h, q, m) {
    var l = Enemies,
        A = -1,
        z, Z, B;
    Players.j = 0;
    q *= .5;
    m *= .5;
    for (var S = 0; S < l.i && (z = EN_Info[l.f[S]][EN_Size], Z = EN_Info[l.f[S]][EN_Species], B = floor(Hitboxvar1[Z] / 2) * floor(z / 2 + 1), z = floor(Hitboxvar2[Z] / 2) * z, !l.j[S] || l.a[S][20].x - B > g + q || l.a[S][20].x + B < g - q || l.a[S][20].y - z > h + m || l.a[S][20].y + z < h - m || (B = d + floor(random(e - d + 1)), 4 == b ? (l.B[S] = c - floor(c * EN_Info[l.f[S]][Po_Resist] / 100), l.C[S] = B, 0 > EN_Info[l.f[S]][Po_Resist] && (l.C[S] = maxOf(1, B - floor(B * EN_Info[l.f[S]][Po_Resist] / 100)))) : (0 == b ? B = maxOf(1, B - EN_Info[l.f[S]][Ph_Resist]) : 1 == b ? B = maxOf(1, B - floor(B * EN_Info[l.f[S]][Fi_Resist] / 100)) : 2 == b ? B = maxOf(1, B - floor(B * EN_Info[l.f[S]][Ic_Resist] / 100)) : 3 == b && (B = maxOf(1, B - floor(B * EN_Info[l.f[S]][Th_Resist] / 100))), l.j[S] = maxOf(l.j[S] - B, 0), Sett_Dmg_Indicators & 1 || Indicators.add(l.a[S][20].x, l.a[S][20].y - z, 1, B, 12632256), l.u[S] = B), 2 == b ? (l.A[S] = 500 - floor(500 * EN_Info[l.f[S]][Ic_Resist] / 100), l.F[S] = c) : 5 == b && (l.w[S] = c - floor(c * EN_Info[l.f[S]][Fr_Resist] / 100)), A = S, Players.j += B, Target_HP_Current = l.j[S], Target_HP_Max = EN_Info[l.f[S]][EN_LP], En_Count_From_Max = 100, Target_Array_ID = l.f[S], 0 != a)); S++);
    return A
}

function ENattack(a, b, c) {
    var d = new Vector2D,
        e = a.f[b] + c,
        en = EN_Info[e],
        h2 = en[7] % 100,
        q = floor(en[7] / 100);
    c = en[8];
    var m = en[9],
        l = en[10],
        A = en[11],
        z = en[12],
        Z = en[13],
        B = en[14],
        S = en[15],
        ia = en[16],
        za = en[17],
        ta = en[18],
        X = en[19],
        T = en[20],
        Y = en[21],
        Ua = en[22],
        eb = en[23],
        Va = en[24],
        ua = en[25],
        pa = en[26],
        Ha = en[27],
        rb = en[28],
        Aa = en[29],
        ka = en[30],
        ab = en[31],
        Pa = en[32],
        Wa = en[33],
        Ca = en[34],
        yb = en[41],
        Hb = en[42],
        Ib = en[43],
        Jb = en[44],
        Kb = en[45],
        Lb = en[46],
        Mb = en[47],
        Nb = en[48],
        Ob = en[49],
        Pb = en[50],
        Qb = en[51],
        sb = en[52],
        Rb = en[53],
        Sb = en[54],
        Tb = en[55],
        Ub = en[56],
        Vb = en[57],
        $b = en[58],
        g = en[59];
    if (0 < a.s[b]) a.s[b]--;
    else if (!(random(1E3) > ab) && (ab = PLfindPlayer(a.a[b][0].x - Pa, a.a[b][0].y - Pa, a.a[b][0].x + Pa, a.a[b][0].y + Pa, 0), -1 != ab && (a.s[b] = ka, h)))
        if (1 == h2) {
            var h = a.a[b][0].x + 10 * d.x,
                ca = a.a[b][0].y + 10 * d.y;
            Projectiles.add(1, h, ca, 0, 0, c, m, l, A, z, Z, B, S, ia, za, ta, X, T, Y, Ua, eb, Va, 0, ua, pa, Ha, Wa, Ca, yb, Hb, Ib, Jb, Kb, Lb, Mb, Nb, Ob, 0, 0, Pb, Qb, sb, Rb, Sb, Tb, Ub, Vb, $b, g, Wa, Ca)
        } else if (2 == h2) d = Players.a[ab][2].x - a.a[b][0].x, d /= absVal(d), h = a.a[b][0].x + 10 * d, ca = a.a[b][0].y, Projectiles.add(1, h, ca, d * Aa * .1, 0, c, m, l, A, z, Z, B, S, ia, za, ta, X, T, Y, Ua, eb, Va, 0, ua, pa, Ha, Wa, Ca, yb, Hb, Ib, Jb, Kb, Lb, Mb, Nb, Ob, 0, 0, Pb, Qb, sb, Rb, Sb, Tb, Ub, Vb, $b, g, Wa, Ca);
    else if (3 == h2 || 6 == h2)
        for (3 == h2 ? assignVector2D(d, Players.a[ab][2].x - a.a[b][0].x, Players.a[ab][2].y - a.a[b][0].y) : 6 == h && assignVector2D(d, 0, -1), e = 0 < q ? q : 16, q = floor(512 * angleToXAxis(d) / TwoPi), q -= floor((rb - 1) * e / 2), ka = 0; ka < rb; ka++) {
            d.x = Xe_arr[q & 511][0];
            d.y = -Xe_arr[q & 511][1];
            var h = a.a[b][0].x + 10 * d.x,
                ca = a.a[b][0].y + 10 * d.y,
                Pa = d.x * Aa * .1,
                Ba = d.y * Aa * .1;
            Projectiles.add(1, h, ca, Pa, Ba, c, m, l, A, z, Z, B, S, ia, za, ta, X, T, Y, Ua, eb, Va, 0, ua, pa, Ha, Wa, Ca, yb, Hb, Ib, Jb, Kb, Lb, Mb, Nb, Ob, 0, 0, Pb, Qb, sb, Rb, Sb, Tb, Ub, Vb, $b, g, Wa, Ca);
            q += e
        } else if (4 == h2)
            for (ka = 0; ka < rb; ka++) assignVector2D(d, Players.a[ab][2].x - a.a[b][0].x, Players.a[ab][2].y - a.a[b][0].y), e = 0 < q ? q : rb, 0 < rb && (ca = floor(random(512)), h = random(10) * e, d.x += Xe_arr[ca][0] * h, d.y += Xe_arr[ca][1] * h), h = a.a[b][0].x, ca = a.a[b][0].y, Pa = d.x / Aa, Ba = (d.y - .5 * Aa * Aa * T * .01) / Aa, Projectiles.add(1, h, ca, Pa, Ba, c, m, l, A, z, Z, B, S, ia, za, ta, X, T, Y, Ua, eb, Va, 0, ua, pa, Ha, Wa, Ca, yb, Hb, Ib, Jb, Kb, Lb, Mb, Nb, Ob, 0, 0, Pb, Qb, sb, Rb, Sb, Tb, Ub, Vb, $b, g, Wa, Ca);
        else if (5 == h2)
        for (ka = 0; ka < rb; ka++) h = a.a[b][0].x + randomRange(-Pa, Pa), ca = a.a[b][0].y + randomRange(-Pa, 0), Projectiles.add(1, h, ca, 0, 0, c, m, l, A, z, Z, B, S, ia, za, ta, X, T, Y, Ua, eb, Va, 0, ua, pa, Ha, Wa, Ca, yb, Hb, Ib, Jb, Kb, Lb, Mb, Nb, Ob, 0, 0, Pb, Qb, sb, Rb, Sb, Tb, Ub, Vb, $b, g, Wa, Ca);
    else if (7 == h2)
        for (ka = 0; ka < rb; ka++) h = floor(a.a[b][0].x / 8), ca = floor(a.a[b][0].y / 8), a.add(h, ca, e + pa);
    else if (8 == h2)
        for (ka = 0; ka < rb; ka++) ca = randInt(4), h = Players.a[ca][2].x, ca = Players.a[ca][2].y, Projectiles.add(1, h, ca, 0, 0, c, m, l, A, z, Z, B, S, ia, za, ta, X, T, Y, Ua, eb, Va, 0, ua, pa, Ha, Wa, Ca, yb, Hb, Ib, Jb, Kb, Lb, Mb, Nb, Ob, 0, 0, Pb, Qb, sb, Rb, Sb, Tb, Ub, Vb, $b, g, Wa, Ca);
    else if (9 == h2)
        for (ka = 0; ka < rb; ka++) ca = randInt(4), assignVector2D(d, Players.a[ca][0].x - a.a[b][0].x, Players.a[ca][0].y - a.a[b][0].y), normalize(d), h = a.a[b][0].x + 10 * d.x, ca = a.a[b][0].y + 10 * d.y, Pa = d.x * Aa * .1, Ba = d.y * Aa * .1, Projectiles.add(1, h, ca, Pa, Ba, c, m, l, A, z, Z, B, S, ia, za, ta, X, T, Y, Ua, eb, Va, 0, ua, pa, Ha, Wa, Ca, yb, Hb, Ib, Jb, Kb, Lb, Mb, Nb, Ob, 0, 0, Pb, Qb, sb, Rb, Sb, Tb, Ub, Vb, $b, g, Wa, Ca)
}

function enemyDeath(a, b, c) {
    for (var d, e = 0, g = 0; g < Stage_Count; g++)
        if (Stage_Status[g] & Unlocked) {
            var h = Book_Indexer[g + 1] - Book_Indexer[g];
            for (d = 0; d < h; d++) e < EN_Info[Book_Indexer[g] + d][EN_Lvl] && (e = EN_Info[Book_Indexer[g] + d][EN_Lvl]), d += EN_Info[Book_Indexer[g] + d][En_2nd_Att]
        }
    d = 1 == c ? b : a.f[b];
    h = absVal(LV[0] - EN_Info[d][EN_Lvl]);
    g = 0;
    10 > h ? g = floor(EN_Info[d][EN_EXP] * (10 - h) / 10) : g = e + 10 <= LV[0] ? 0 : 1;
    e = 100;
    for (d = 0; 4 > d; d++) checkEff(4 + d, 36) && (e += getEff(4 + d, 8));
    g = floor(g * e / 100);
    if (1 == c) return g;
    antiCheatCheck();
    Team_EXP = clamp(Team_EXP + g, 0, 9999999);
    d = 9999999;
    if (98 > LV[0]) {
        c = 0;
        for (d = 1; d < LV[0]; d++) c += 1E3 * d;
        d = c + 1E3 * d
    }
    if (d <= Team_EXP && 99 > LV[0]) {
        LV[0]++;
        for (d = 0; 4 > d; d++) SP[d] += 2;
        c = 0;
        for (d = 4; 40 > d; d++) 49 == getVal(Item_Inv[d], 7) && (c = 1),
            49 == getVal(Comp1_Inv[d], 7) && (c = 1), 49 == getVal(Comp2_Inv[d], 7) && (c = 1);
        if (1 == c)
            for (Anger_Crown_Lightning = 480, b = 0; 4 > b; b++) PLprojectileAttack(Players, 562, Players.a[b][0].x, Players.a[b][0].y, 0), LP_Current[b] != LP_Max[b] && Indicators.add(Players.a[b][0].x, Players.a[b][0].y, 0, LP_Max[b] - LP_Current[b], 65280), LP_Current[b] = LP_Max[b]
    }
    antiCheatSet();
    c = EN_Info[a.f[b]][En_Gold];
    h = g = e = 100;
    for (d = 0; 4 > d; d++) checkEff(4 + d, 33) && (e += getEff(4 + d, 8)), checkEff(4 + d, 34) && (g += getEff(4 + d, 8)), checkEff(4 + d, 35) && (h += getEff(4 + d, 8));
    for (d = 0; 4 > d; d++)
        if (checkEff(4 + d, 41) && random(100) < getEff(4 + d, 8)) {
            var q = ENfindEnemy(a.a[b][0].x - 600, a.a[b][0].y - 300, a.a[b][0].x + 600, a.a[b][0].y + 300); - 1 != q && PLprojectileAttack(Players, getEff(4 + d, 9), a.a[b][0].x, a.a[b][0].y, q)
        }
    q = 0;
    17 == a.v[b] && (q = a.b[b] - 1);
    for (d = En_Drop1; d < En_Drop1 + 6; d += 2) 0 != EN_Info[a.f[b]][d] && Math.random() * EN_Info[a.f[b]][d + 1] * 100 < e && Drops.add(a.a[b][q].x, a.a[b][q].y, EN_Info[a.f[b]][d], 0, 0);
    1 > 3 * Math.random() && Drops.add(a.a[b][q].x, a.a[b][q].y, 1, floor(c * h / 100), 0);
    500 * Math.random() < g && Drops.add(a.a[b][q].x, a.a[b][q].y, 2, 0, 0);
    return 0
}
WIN.fff = SR_Enemy.prototype.L;
SR_Enemy.prototype.L = function() {
    var a;
    for (a = 0; a < this.i; a++) {
        var b = this.v[a];
        0 < this.B[a] && 0 < this.j[a] && (this.B[a]--, this.j[a] = maxOf(this.j[a] - this.C[a], 0), Target_HP_Current = this.j[a], Target_HP_Max = EN_Info[this.f[a]][EN_LP], En_Count_From_Max = 100, Target_Array_ID = this.f[a]);
        if (0 < this.w[a] && 0 < this.j[a]) this.w[a]--;
        else {
            if (0 < this.A[a] && 0 < this.j[a] && (this.A[a]--, random(100) < this.F[a])) continue;
            b ? 1 == b ? a = this.M(a) : 2 == b ? a = this.N(a) : 3 == b ? a = this.O(a) : 4 == b ? a = this.G(a, b) : 5 == b ? a = this.H(a, b) : 6 == b ? a = this.P(a) : 7 == b ? a = this.R(a) : 8 == b ? a = this.S(a) : 9 == b ? a = this.J(a, b) : 10 == b ? a = this.U(a) : 11 == b ? a = this.V(a) : 12 == b ? a = this.G(a, b) : 13 == b ? a = this.J(a, b) : 14 == b ? a = this.W(a) : 15 == b ? a = this.X(a) : 16 == b ? a = this.Y(a) : 17 == b ? a = this.Z(a) : 18 == b && (a = this.H(a, b)) : a = this.T(a)
        }
    }
};
WIN.fff = SR_Enemy.prototype.T;
SR_Enemy.prototype.T = function(a) {
    var b;
    b = EN_Info[this.f[a]][EN_Size];
    if (this.b[a])
        if (1 == this.b[a] || 2 == this.b[a]) {
            moveJoint(this.a[a][0], this.c[a][0], -.05, .99);
            moveJoint(this.a[a][1], this.c[a][1], .05, .99);
            moveJoint(this.a[a][2], this.c[a][2], .05, .99);
            if (0 < (this.g[a] & 3)) {
                var c = -.1;
                2 == this.b[a] && (c *= -1);
                this.a[a][1].x += random(c);
                this.a[a][2].x += random(c);
                1 > random(100) && (this.b[a] = cycle(this.b[a] + 1, 1, 2))
            }
            pullJoints(this.a[a][0], this.a[a][1], 9 * b, .2, .2);
            pullJoints(this.a[a][0], this.a[a][2], 9 * b, .2, .2);
            pullJoints(this.a[a][1], this.a[a][2], 11 * b, .2, .2);
            ENattack(this, a, 0);
            for (b = this.g[a] = 0; 3 > b; b++) ENgroundCollision(this, a, b, .5);
            this.a[a][20].set(this.a[a][0]);
            if (0 >= this.j[a]) {
                this.b[a] = 3;
                for (b = 0; 3 > b; b++) this.a[a][b].x += randomRange(-.5, .5), this.a[a][b].y -= randomRange(2, 3);
                enemyDeath(this, a, 0)
            }
        } else {
            for (b = 0; 3 > b; b++) moveJoint(this.a[a][b], this.c[a][b], .05, .99);
            for (b = this.g[a] = 0; 3 > b; b++) ENgroundCollision(this, a, b, .5);
            150 < this.h[a]++ && this.sub(a--)
        }
    else {
        this.a[a][0].x += 1;
        this.a[a][0].y += 0 - 4 * (b - 1);
        this.a[a][1].x += 0;
        this.a[a][1].y += 2 - 4 * (b - 1);
        this.a[a][2].x += 2;
        this.a[a][2].y += 2 - 4 * (b - 1);
        for (b = 0; 3 > b; b++) this.c[a][b].set(this.a[a][b]);
        this.b[a] = 1
    }
    return a
};
WIN.fff = SR_Enemy.prototype.M;
SR_Enemy.prototype.M = function(a) {
    var b;
    if (this.b[a])
        if (1 == this.b[a] || 2 == this.b[a]) {
            moveJoint(this.a[a][0], this.c[a][0], .05, .99);
            moveJoint(this.a[a][1], this.c[a][1], .05, .9);
            moveJoint(this.a[a][2], this.c[a][2], .05, .9);
            b = PLfindPlayer(this.a[a][0].x - 200, this.a[a][0].y - 50, this.a[a][0].x + 200, this.a[a][0].y + 50, 0); - 1 != b && (this.a[a][0].x += Players.a[b][2].x < this.a[a][0].x ? -.001 : .001);
            if (0 < (this.g[a] & 2)) {
                var c = 0; - 1 != b ? c = Players.a[b][2].x < this.a[a][0].x ? -1 : 1 : c = fiftyfifty(-1, 1);
                10 > random(100) && (this.a[a][0].x += randomRange(.4, .6) * c, this.a[a][0].y += randomRange(-1.5, -2))
            }
            pullJoints(this.a[a][0], this.a[a][1], 0, 0, .01);
            pullJoints(this.a[a][1], this.a[a][2], 0, 0, .01);
            ENattack(this, a, 0);
            this.g[a] = 0;
            ENgroundCollision(this, a, 0, .5);
            b = this.g[a];
            ENgroundCollision(this, a, 1, .5);
            ENgroundCollision(this, a, 2, .5);
            this.g[a] = b;
            this.a[a][20].set(this.a[a][0]);
            if (0 >= this.j[a]) {
                this.b[a] = 3;
                for (b = 0; 3 > b; b++) this.a[a][b].x += randomRange(-.5, .5), this.a[a][b].y -= randomRange(2, 3);
                enemyDeath(this, a, 0)
            }
        } else {
            for (b = 0; 3 > b; b++) moveJoint(this.a[a][b], this.c[a][b], .05, .99);
            for (b = this.g[a] = 0; 3 > b; b++) ENgroundCollision(this, a, b, .5);
            150 < this.h[a]++ && this.sub(a--)
        }
    else {
        this.a[a][0].x += 0;
        this.a[a][1].x += 1;
        this.a[a][2].x += 2;
        for (b = 0; 3 > b; b++) this.c[a][b].set(this.a[a][b]);
        this.b[a] = 1
    }
    return a
};
WIN.fff = SR_Enemy.prototype.N;
SR_Enemy.prototype.N = function(a) {
    var b, c = new Vector2D;
    b = EN_Info[this.f[a]][EN_Size];
    if (this.b[a])
        if (1 == this.b[a] || 2 == this.b[a]) {
            moveJoint(this.a[a][0], this.c[a][0], 0, .99);
            moveJoint(this.a[a][1], this.c[a][1], 0, .99);
            moveJoint(this.a[a][2], this.c[a][2], 0, .99);
            moveJoint(this.a[a][3], this.c[a][3], 0, .99);
            moveJoint(this.a[a][4], this.c[a][4], 0, .99);
            moveJoint(this.a[a][5], this.c[a][5], 0, .99);
            moveJoint(this.a[a][6], this.c[a][6], 0, .99);
            assignVector2D(c, 0, 0);
            var d = PLfindPlayer(this.a[a][0].x - 150, this.a[a][0].y - 150, this.a[a][0].x + 150, this.a[a][0].y + 150, 0); - 1 != d && (Vdistance(c, Players.a[d][2], this.a[a][0]), d = normalize(c), d -= EN_Info[this.f[a]][32] - 10, 0 > d ? scaleVector2D(c, -.05) : scaleVector2D(c, .05));
            this.a[a][0].add(c);
            10 > random(100) && (this.a[a][0].x += randomRange(-1, 1), this.a[a][0].y += randomRange(-1, 1));
            this.a[a][2].x += randomRange(0, -.1);
            this.a[a][3].x += randomRange(0, -.1);
            this.a[a][5].x += randomRange(0, .1);
            this.a[a][6].x += randomRange(0, .1);
            c = .5;
            d = 6 * b;
            pullJoints(this.a[a][0], this.a[a][1], 3 * b, c, c);
            pullJoints(this.a[a][0], this.a[a][4], 3 * b, c, c);
            pullJoints(this.a[a][1], this.a[a][2], d, c, c);
            pullJoints(this.a[a][1], this.a[a][3], d, c, c);
            pullJoints(this.a[a][2], this.a[a][3], d, c, c);
            pullJoints(this.a[a][4], this.a[a][5], d, c, c);
            pullJoints(this.a[a][4], this.a[a][6], d, c, c);
            pullJoints(this.a[a][5], this.a[a][6], d, c, c);
            ENattack(this, a, 0);
            for (b = this.g[a] = 0; 7 > b; b++) ENgroundCollision(this, a, b, 1);
            this.a[a][20].set(this.a[a][0]);
            if (0 >= this.j[a]) {
                this.b[a] = 3;
                for (b = 0; 7 > b; b++) this.a[a][b].x += randomRange(-1, 1), this.a[a][b].y -= randomRange(1, 2);
                enemyDeath(this, a, 0)
            }
        } else {
            for (b = 0; 8 > b; b++) moveJoint(this.a[a][b], this.c[a][b], .05, .99);
            c = .5;
            d = 6 * (150 - this.h[a]) / 150;
            pullJoints(this.a[a][1], this.a[a][2], d, c, c);
            pullJoints(this.a[a][1], this.a[a][3], d, c, c);
            pullJoints(this.a[a][2], this.a[a][3], d, c, c);
            pullJoints(this.a[a][4], this.a[a][5], d, c, c);
            pullJoints(this.a[a][4], this.a[a][6], d, c, c);
            pullJoints(this.a[a][5], this.a[a][6], d, c, c);
            for (b = this.g[a] = 0; 7 > b; b++) ENgroundCollision(this, a, b, .5);
            150 < this.h[a]++ && this.sub(a--)
        }
    else {
        this.a[a][0].x += 1;
        this.a[a][0].y += 1;
        this.a[a][1].x += 1;
        this.a[a][1].y += 1;
        this.a[a][2].x += 0;
        this.a[a][2].y += 0;
        this.a[a][3].x += 0;
        this.a[a][3].y += 2;
        this.a[a][4].x += 1;
        this.a[a][4].y += 1;
        this.a[a][5].x += 2;
        this.a[a][5].y += 0;
        this.a[a][6].x += 2;
        this.a[a][6].y += 2;
        for (b = 0; 7 > b; b++) this.c[a][b].set(this.a[a][b]);
        this.b[a] = 1
    }
    return a
};
WIN.fff = SR_Enemy.prototype.O;
SR_Enemy.prototype.O = function(a) {
    var b, c = new Vector2D,
        d = EN_Info[this.f[a]][EN_Size];
    if (this.b[a])
        if (1 == this.b[a] || 2 == this.b[a]) {
            moveJoint(this.a[a][0], this.c[a][0], 0, .99);
            for (b = 1; 6 > b; b++) moveJoint(this.a[a][b], this.c[a][b], 0, .9);
            assignVector2D(c, 0, 0);
            b = PLfindPlayer(this.a[a][0].x - 200, this.a[a][0].y - 200, this.a[a][0].x + 200, this.a[a][0].y + 200, 0); - 1 != b && (Vdistance(c, Players.a[b][2], this.a[a][0]), b = normalize(c), b -= EN_Info[this.f[a]][32] / 2 - 10, 0 > b ? scaleVector2D(c, -.01) : scaleVector2D(c, .01));
            b = Terrain.a[floor(clamp(this.a[a][0].y + 24, 0, 255) / 8)][floor(clamp(this.a[a][0].x, 0, 511) / 8)];
            0 <= b && 8 >= b && (c.y -= .02);
            2 > random(100) && (c.x += randomRange(-.5, .5), c.y += randomRange(-.5, .5));
            this.a[a][0].add(c);
            c = .02;
            d = 5 * d;
            for (b = 0; 5 > b; b++) pullJoints(this.a[a][b], this.a[a][b + 1], d, 0, c);
            ENattack(this, a, 0);
            for (b = this.g[a] = 0; 6 > b; b++) ENgroundCollision(this, a, b, .5);
            this.a[a][20].set(this.a[a][0]);
            if (0 >= this.j[a]) {
                this.b[a] = 3;
                for (b = this.h[a] = 0; 6 > b; b++) this.a[a][b].x += randomRange(-1, 1), this.a[a][b].y -= randomRange(1, 2);
                enemyDeath(this, a, 0)
            }
        } else {
            for (b = 0; 6 > b; b++) moveJoint(this.a[a][b], this.c[a][b], .05, .99);
            c = .5;
            d = 10 * (150 - this.h[a]) / 150;
            pullJoints(this.a[a][1], this.a[a][2], d, c, c);
            pullJoints(this.a[a][2], this.a[a][3], d, c, c);
            pullJoints(this.a[a][3], this.a[a][4], d, c, c);
            for (b = this.g[a] = 0; 6 > b; b++) ENgroundCollision(this, a, b, .5);
            150 < this.h[a]++ && this.sub(a--)
        }
    else this.b[a] = 1;
    return a
};
WIN.fff = SR_Enemy.prototype.G;
SR_Enemy.prototype.G = function(a, b) {
    var c;
    c = EN_Info[this.f[a]][EN_Size];
    if (this.b[a])
        if (1 == this.b[a] || 2 == this.b[a]) {
            4 == b ? (moveJoint(this.a[a][0], this.c[a][0], -.2, .99), moveJoint(this.a[a][1], this.c[a][1], 0, .99), moveJoint(this.a[a][2], this.c[a][2], -.1, .99), moveJoint(this.a[a][3], this.c[a][3], 0, .99), moveJoint(this.a[a][4], this.c[a][4], 0, .99), moveJoint(this.a[a][5], this.c[a][5], 0, .99), moveJoint(this.a[a][6], this.c[a][6], 0, .99), moveJoint(this.a[a][7], this.c[a][7], 0, .99), moveJoint(this.a[a][8], this.c[a][8], 0, .99), moveJoint(this.a[a][9], this.c[a][9], .3, .99), moveJoint(this.a[a][10], this.c[a][10], .3, .99)) : 12 == b && (moveJoint(this.a[a][0], this.c[a][0], -.02, .99), moveJoint(this.a[a][1], this.c[a][1], 0, .99), moveJoint(this.a[a][2], this.c[a][2], -.01, .99), moveJoint(this.a[a][3], this.c[a][3], 0, .99), moveJoint(this.a[a][4], this.c[a][4], 0, .99), moveJoint(this.a[a][5], this.c[a][5], 0, .99), moveJoint(this.a[a][6], this.c[a][6], 0, .99), moveJoint(this.a[a][7], this.c[a][7], 0, .99), moveJoint(this.a[a][8], this.c[a][8], 0, .99), moveJoint(this.a[a][9], this.c[a][9], .1, .99), moveJoint(this.a[a][10], this.c[a][10], .1, .99));
            if (50 > random(100) && 0 < (this.g[a] & 3)) {
                var d = PLfindPlayer(this.a[a][0].x - 200, this.a[a][0].y - 50, this.a[a][0].x + 200, this.a[a][0].y + 50, 0); - 1 != d ? this.b[a] = Players.a[d][2].x < this.a[a][0].x ? 1 : 2 : 10 > random(100) && (this.b[a] = fiftyfifty(1, 2));
                var e = d = 1,
                    g = 0;
                12 == b && (d = .25, e = .3, g = .25);
                1 == this.b[a] ? (this.a[a][9].x < this.a[a][10].x ? (this.a[a][10].x += random(-d), this.a[a][10].y += -e) : (this.a[a][9].x += random(-d), this.a[a][9].y += -e), this.a[a][5].x += random(-g), this.a[a][6].x += random(-g)) : (this.a[a][9].x < this.a[a][10].x ? (this.a[a][9].x += random(d), this.a[a][9].y += -e) : (this.a[a][10].x += random(d), this.a[a][10].y += -e), this.a[a][5].x += random(g), this.a[a][6].x += random(g))
            }
            d = .5;
            e = 1.2 * c;
            12 == b && (d = .02, e = 1 * c);
            pullJoints(this.a[a][0], this.a[a][1], 3 * e, d, d);
            pullJoints(this.a[a][1], this.a[a][2], 3 * e, d, d);
            pullJoints(this.a[a][1], this.a[a][3], 4 * e, d, d);
            pullJoints(this.a[a][1], this.a[a][4], 4 * e, d, d);
            pullJoints(this.a[a][3], this.a[a][5], 4 * e, d, d);
            pullJoints(this.a[a][4], this.a[a][6], 4 * e, d, d);
            pullJoints(this.a[a][2], this.a[a][7], 4 * e, d, d);
            pullJoints(this.a[a][2], this.a[a][8], 4 * e, d, d);
            pullJoints(this.a[a][7], this.a[a][9], 4 * e, d, d);
            pullJoints(this.a[a][8], this.a[a][10], 4 * e, d, d);
            pullJoints(this.a[a][7], this.a[a][8], 5 * e, d, d);
            332 == this.f[a] ? ENattack(this, a, randInt(6)) : (ENattack(this, a, 0), 0 != EN_Info[this.f[a]][En_2nd_Att] && ENattack(this, a, 1));
            for (c = this.g[a] = 0; 11 > c; c++) ENgroundCollision(this, a, c, .5);
            this.a[a][20].set(this.a[a][1]);
            if (0 >= this.j[a]) {
                this.b[a] = 3;
                for (c = this.h[a] = 0; 11 > c; c++) this.a[a][c].x += randomRange(-1, 1), this.a[a][c].y -= randomRange(1, 2);
                enemyDeath(this, a, 0)
            }
        } else {
            for (c = 0; 11 > c; c++) moveJoint(this.a[a][c], this.c[a][c], .05, .99);
            d = .5;
            e = 1.2 * (150 - this.h[a]) / 150;
            pullJoints(this.a[a][1], this.a[a][2], 3 * e, d, d);
            pullJoints(this.a[a][3], this.a[a][5], 4 * e, d, d);
            pullJoints(this.a[a][4], this.a[a][6], 4 * e, d, d);
            pullJoints(this.a[a][7], this.a[a][9], 4 * e, d, d);
            pullJoints(this.a[a][8], this.a[a][10], 4 * e, d, d);
            for (c = this.g[a] = 0; 11 > c; c++) ENgroundCollision(this, a, c, .5);
            150 < this.h[a]++ && this.sub(a--)
        }
    else this.b[a] = 1;
    return a
};
WIN.fff = SR_Enemy.prototype.H;
SR_Enemy.prototype.H = function(a, b) {
    var c, d = EN_Info[this.f[a]][EN_Size];
    if (this.b[a])
        if (10 > this.b[a]) {
            if (5 == b) {
                for (c = 0; c < this.b[a] - 1; c++) moveJoint(this.a[a][c], this.c[a][c], -.04, .99);
                moveJoint(this.a[a][c], this.c[a][c], 1, .99)
            } else {
                for (c = 0; c < this.b[a] - 1; c++) moveJoint(this.a[a][c], this.c[a][c], .04, .99);
                moveJoint(this.a[a][c], this.c[a][c], -1, .99)
            }
            10 > random(100) && (c = floor(random(4)), this.a[a][c].x += randomRange(-.5, .5));
            pullJoints(this.a[a][0], this.a[a][1], 8 * d, .2, .2);
            for (c = 1; c < this.b[a] - 2; c++) pullJoints(this.a[a][c], this.a[a][c + 1], 6 * d, .2, .2);
            pullJoints(this.a[a][c], this.a[a][c + 1], 6 * d, .2, 0);
            ENattack(this, a, 0);
            for (c = this.g[a] = 0; c < this.b[a]; c++) ENgroundCollision(this, a, c, .5);
            this.a[a][20].x = .5 * (this.a[a][0].x + this.a[a][this.b[a] - 1].x);
            this.a[a][20].y = .5 * (this.a[a][0].y + this.a[a][this.b[a] - 1].y);
            if (0 >= this.j[a]) {
                for (c = 0; c < this.b[a]; c++) this.a[a][c].x += randomRange(-.5, .5), this.a[a][c].y -= randomRange(2, 3);
                this.b[a] += 10;
                enemyDeath(this, a, 0)
            }
        } else {
            for (c = 0; c < this.b[a] - 10; c++) moveJoint(this.a[a][c], this.c[a][c], .05, .99);
            for (c = this.g[a] = 0; c < this.b[a] - 10; c++) ENgroundCollision(this, a, c, .5);
            150 < this.h[a]++ && this.sub(a--)
        }
    else this.b[a] = floor(randomRange(4, 8));
    return a
};
WIN.fff = SR_Enemy.prototype.P;
SR_Enemy.prototype.P = function(a) {
    var b, c = EN_Info[this.f[a]][EN_Size];
    if (this.b[a])
        if (1 == this.b[a] || 2 == this.b[a]) {
            moveJoint(this.a[a][0], this.c[a][0], .5, .99);
            for (b = 1; 7 > b; b++) moveJoint(this.a[a][b], this.c[a][b], 0, .99);
            b = PLfindPlayer(this.a[a][0].x - 200, this.a[a][0].y - 50, this.a[a][0].x + 200, this.a[a][0].y + 50, 0); - 1 != b && 40 > random(100) && 0 < (this.g[a] & 2) && (this.a[a][0].x += Players.a[b][2].x < this.a[a][0].x ? -2 : 2);
            var d = .1,
                c = 1.2 * c;
            for (b = 1; 4 > b; b++) pullJoints(this.a[a][b], this.a[a][b + 3], 20 * c, d, d);
            for (b = 1; 5 > b; b++) pullJoints(this.a[a][b], this.a[a][b + 2], 17 * c, d, d);
            pullJoints(this.a[a][b + 0], this.a[a][1], 17 * c, d, d);
            pullJoints(this.a[a][b + 1], this.a[a][2], 17 * c, d, d);
            for (b = 1; 6 > b; b++) pullJoints(this.a[a][b], this.a[a][b + 1], 10 * c, d, d);
            pullJoints(this.a[a][b], this.a[a][1], 10 * c, d, d);
            for (b = 1; 7 > b; b++) pullJoints(this.a[a][0], this.a[a][b], 10 * c, .2, .2);
            ENattack(this, a, 0);
            for (b = this.g[a] = 0; 7 > b; b++) ENgroundCollision(this, a, b, .5);
            this.a[a][20].set(this.a[a][0]);
            if (0 >= this.j[a]) {
                this.b[a] = 3;
                for (b = this.h[a] = 0; 7 > b; b++) this.a[a][b].x += randomRange(-.5, .5), this.a[a][b].y -= randomRange(2, 3);
                enemyDeath(this, a, 0)
            }
        } else {
            for (b = 0; 7 > b; b++) moveJoint(this.a[a][b], this.c[a][b], .05, .99);
            d = .5;
            c = 1.2 * c * (150 - this.h[a]) / 150;
            for (b = 1; 6 > b; b++) pullJoints(this.a[a][b], this.a[a][b + 1], 10 * c, d, d);
            for (b = this.g[a] = 0; 7 > b; b++) ENgroundCollision(this, a, b, .5);
            150 < this.h[a]++ && this.sub(a--)
        }
    else {
        this.a[a][0].x += 1;
        this.a[a][0].y += 1;
        this.a[a][1].x += 1;
        this.a[a][1].y += 0;
        this.a[a][2].x += 1.85;
        this.a[a][2].y += .5;
        this.a[a][3].x += 1.85;
        this.a[a][3].y += 1.5;
        this.a[a][4].x += 1;
        this.a[a][4].y += 2;
        this.a[a][5].x += 1 - .85;
        this.a[a][5].y += 1.5;
        this.a[a][6].x += 1 - .85;
        this.a[a][6].y += .5;
        for (b = 0; 7 > b; b++) this.c[a][b].set(this.a[a][b]);
        this.b[a] = 1
    }
    return a
};
WIN.fff = SR_Enemy.prototype.R;
SR_Enemy.prototype.R = function(a) {
    var b, c = new Vector2D,
        d = EN_Info[this.f[a]][EN_Size];
    if (this.b[a])
        if (1 == this.b[a] || 2 == this.b[a]) {
            moveJoint(this.a[a][0], this.c[a][0], 0, .99);
            for (b = 1; 5 > b; b++) moveJoint(this.a[a][b], this.c[a][b], 0, .9);
            assignVector2D(c, 0, 0);
            b = PLfindPlayer(this.a[a][0].x - 150, this.a[a][0].y - 50, this.a[a][0].x + 150, this.a[a][0].y + 50, 0); - 1 != b && (Vdistance(c, Players.a[b][2], this.a[a][0]), b = normalize(c), b -= EN_Info[this.f[a]][32] / 2 - 10, 0 > b ? scaleVector2D(c, -.01) : scaleVector2D(c, .01));
            0 > Terrain.a[floor(clamp(this.a[a][0].y - 7, 0, 255) / 8)][floor(clamp(this.a[a][0].x, 0, 511) / 8)] && (c.y += .03);
            2 > random(100) && (c.x += randomRange(-.5, .5), c.y += randomRange(-.5, .5));
            this.a[a][0].add(c);
            c = .1;
            pullJoints(this.a[a][0], this.a[a][1], 9 * d, 0, c);
            pullJoints(this.a[a][1], this.a[a][2], 5 * d, 0, c);
            pullJoints(this.a[a][2], this.a[a][3], 6 * d, 0, c);
            pullJoints(this.a[a][2], this.a[a][4], 6 * d, 0, c);
            pullJoints(this.a[a][3], this.a[a][4], 8 * d, c, c);
            ENattack(this, a, 0);
            for (b = this.g[a] = 0; 5 > b; b++) ENgroundCollision(this, a, b, .5);
            this.a[a][20].set(this.a[a][1]);
            if (0 >= this.j[a]) {
                this.b[a] = 3;
                for (b = this.h[a] = 0; 5 > b; b++) this.a[a][b].x += randomRange(-2, 2), this.a[a][b].y -= randomRange(2, 4);
                enemyDeath(this, a, 0)
            }
        } else {
            for (b = 0; 5 > b; b++) moveJoint(this.a[a][b], this.c[a][b], .05, .99);
            c = .5;
            d = 7 * d * (150 - this.h[a]) / 150;
            pullJoints(this.a[a][2], this.a[a][3], d, c, c);
            pullJoints(this.a[a][2], this.a[a][4], d, c, c);
            pullJoints(this.a[a][3], this.a[a][4], d, c, c);
            for (b = this.g[a] = 0; 5 > b; b++) ENgroundCollision(this, a, b, .5);
            150 < this.h[a]++ && this.sub(a--)
        }
    else this.b[a] = 1;
    return a
};
WIN.fff = SR_Enemy.prototype.S;
SR_Enemy.prototype.S = function(a) {
    var b, c = EN_Info[this.f[a]][EN_Size];
    if (this.b[a])
        if (1 == this.b[a]) {
            for (b = 0; 2 > b; b++) moveJoint(this.a[a][b], this.c[a][b], -.04, .99);
            moveJoint(this.a[a][b], this.c[a][b], 1, .99);
            pullJoints(this.a[a][0], this.a[a][1], 7 * c, .2, .2);
            pullJoints(this.a[a][1], this.a[a][2], 5 * c, .2, 0);
            this.a[a][0].x = this.a[a][1].x = this.a[a][2].x;
            0 < this.s[a] ? this.s[a]-- : 0 < this.u[a] && (this.a[a][0].y += randomRange(0, 1), ENattack(this, a, 0));
            this.u[a] = 0;
            for (b = this.g[a] = 0; 3 > b; b++) ENgroundCollision(this, a, b, .5);
            this.a[a][20].x = this.a[a][0].x;
            this.a[a][20].y = .5 * (this.a[a][0].y + this.a[a][1].y);
            if (0 >= this.j[a]) {
                this.b[a]++;
                for (b = 0; 3 > b; b++) this.a[a][b].x += randomRange(-.5, .5), this.a[a][b].y -= randomRange(2, 3);
                enemyDeath(this, a, 0)
            }
        } else {
            for (b = 0; 3 > b; b++) moveJoint(this.a[a][b], this.c[a][b], .05, .99);
            for (b = this.g[a] = 0; 3 > b; b++) ENgroundCollision(this, a, b, .5);
            150 < this.h[a]++ && this.sub(a--)
        }
    else this.a[a][0].x += 0, this.a[a][0].y += 0, this.a[a][1].x += 0, this.a[a][1].y += 1, this.a[a][2].x += 0, this.a[a][2].y += 3, this.b[a]++;
    return a
};
WIN.fff = SR_Enemy.prototype.J;
SR_Enemy.prototype.J = function(a, b) {
    var c, d = new Vector2D,
        e = EN_Info[this.f[a]][EN_Size];
    if (this.b[a])
        if (1 == this.b[a] || 2 == this.b[a]) {
            moveJoint(this.a[a][0], this.c[a][0], 0, .98);
            for (c = 1; 6 > c; c++) moveJoint(this.a[a][c], this.c[a][c], 0, .9);
            if (9 == b) {
                assignVector2D(d, 0, 0);
                c = PLfindPlayer(this.a[a][0].x - 150, this.a[a][0].y - 50, this.a[a][0].x + 150, this.a[a][0].y + 50, 0); - 1 != c && (Vdistance(d, Players.a[c][2], this.a[a][0]), c = normalize(d), c -= EN_Info[this.f[a]][32] / 2 - 10, 0 > c ? (scaleVector2D(d, -.05), 384 < this.a[a][0].x && setPerpendicular(d), 128 > this.a[a][0].x && (setPerpendicular(d), scaleVector2D(d, -1))) : scaleVector2D(d, .01));
                c = floor(clamp(this.a[a][0].x, 0, 511) / 8);
                var g = floor(clamp(this.a[a][0].y - 7, 0, 255) / 8);
                c = Terrain.a[g][c];
                0 > c && (d.y += .05);
                c = floor(clamp(this.a[a][0].x + d.x, 0, 511) / 8);
                g = floor(clamp(this.a[a][0].y + d.y, 0, 255) / 8);
                c = Terrain.a[g][c];
                0 <= c && 8 >= c && setPerpendicular(d)
            } else assignVector2D(d, 0, 0), c = PLfindPlayer(this.a[a][0].x - 500, this.a[a][0].y - 500, this.a[a][0].x + 500, this.a[a][0].y + 500, 0), -1 != c && (Vdistance(d, Players.a[c][2], this.a[a][0]), c = normalize(d), c -= EN_Info[this.f[a]][32] / 2 - 10, 0 > c ? (1 == this.b[a] ? scaleVector2D(d, -.05) : scaleVector2D(d, .05), setPerpendicular(d)) : scaleVector2D(d, .02)), c = floor(clamp(this.a[a][0].x + d.x, 0, 511) / 8), g = floor(clamp(this.a[a][0].y + d.y, 0, 255) / 8), c = Terrain.a[g][c], 0 <= c && 8 >= c && (setPerpendicular(d), 2 == this.b[a] && scaleVector2D(d, -1)), c = floor(clamp(this.a[a][0].x + d.x, 0, 511) / 8), g = floor(clamp(this.a[a][0].y + d.y, 0, 255) / 8), c = Terrain.a[g][c], 0 <= c && 8 >= c && (setPerpendicular(d), 2 == this.b[a] && scaleVector2D(d, -1));
            2 > random(100) && (d.x += randomRange(-.5, .5), d.y += randomRange(-.5, .5));
            this.a[a][0].add(d);
            for (c = 0; 6 > c; c++) pullJoints(this.a[a][c], this.a[a][c + 1], 6 * e, 0, .5);
            0 == EN_Info[this.f[a]][En_2nd_Att] ? ENattack(this, a, 0) : ENattack(this, a, 50 > random(100) ? 0 : 1);
            for (c = this.g[a] = 0; 6 > c; c++) ENgroundCollision(this, a, c, .5);
            this.a[a][20].set(this.a[a][0]);
            if (0 >= this.j[a]) {
                this.b[a] = 3;
                for (c = this.h[a] = 0; 6 > c; c++) this.a[a][c].x += randomRange(-2, 2), this.a[a][c].y -= randomRange(2, 4);
                enemyDeath(this, a, 0)
            }
        } else {
            for (c = 0; 6 > c; c++) moveJoint(this.a[a][c], this.c[a][c], .05, .99);
            d = 6 * (150 - this.h[a]) / 150;
            for (c = 1; 5 > c; c++) pullJoints(this.a[a][c], this.a[a][c + 1], d * e, 0, .5);
            for (c = this.g[a] = 0; 6 > c; c++) ENgroundCollision(this, a, c, .5);
            150 < this.h[a]++ && this.sub(a--)
        }
    else 50 > random(100) ? this.b[a] = 1 : this.b[a] = 2;
    return a
};
WIN.fff = SR_Enemy.prototype.U;
SR_Enemy.prototype.U = function(a) {
    var b;
    b = EN_Info[this.f[a]][EN_Size];
    if (this.b[a])
        if (1 == this.b[a] || 2 == this.b[a]) {
            moveJoint(this.a[a][0], this.c[a][0], -.05, .99);
            moveJoint(this.a[a][1], this.c[a][1], -.1, .99);
            moveJoint(this.a[a][2], this.c[a][2], .8, .99);
            moveJoint(this.a[a][3], this.c[a][3], -.1, .99);
            moveJoint(this.a[a][4], this.c[a][4], .8, .99);
            moveJoint(this.a[a][5], this.c[a][5], -.1, .99);
            moveJoint(this.a[a][6], this.c[a][6], .8, .99);
            moveJoint(this.a[a][7], this.c[a][7], -.1, .99);
            moveJoint(this.a[a][8], this.c[a][8], .8, .99);
            if (50 > random(100) && 0 < (this.g[a] & 3)) {
                var c = PLfindPlayer(this.a[a][0].x - 500, this.a[a][0].y - 25, this.a[a][0].x + 500, this.a[a][0].y + 25, 0); - 1 != c ? this.b[a] = Players.a[c][2].x < this.a[a][0].x ? 1 : 2 : 10 > random(100) && (this.b[a] = fiftyfifty(1, 2));
                1 == this.b[a] ? (this.a[a][2].x < this.a[a][6].x ? (this.a[a][6].x += random(-1), this.a[a][6].y += randomRange(-1, -1)) : (this.a[a][2].x += random(-1), this.a[a][2].y += randomRange(-1, -1)), this.a[a][4].x < this.a[a][8].x ? (this.a[a][8].x += random(-1), this.a[a][8].y += randomRange(-1, -1)) : (this.a[a][4].x += random(-1), this.a[a][4].y += randomRange(-1, -1)), 1 > random(100) && (--this.a[a][0].x, this.a[a][0].y -= 3)) : (this.a[a][2].x < this.a[a][6].x ? (this.a[a][2].x += random(1), this.a[a][2].y += randomRange(-1, -1)) : (this.a[a][6].x += random(1), this.a[a][6].y += randomRange(-1, -1)), this.a[a][4].x < this.a[a][8].x ? (this.a[a][4].x += random(1), this.a[a][4].y += randomRange(-1, -1)) : (this.a[a][8].x += random(1), this.a[a][8].y += randomRange(-1, -1)), 1 > random(100) && (this.a[a][0].x += 1, this.a[a][0].y -= 3))
            }
            c = .3;
            b = 2.2 * b;
            pullJoints(this.a[a][0], this.a[a][5], 3 * b, .1 * c, c);
            pullJoints(this.a[a][0], this.a[a][7], 3 * b, .1 * c, c);
            pullJoints(this.a[a][0], this.a[a][6], 3 * b, .1 * c, c);
            pullJoints(this.a[a][5], this.a[a][6], 2 * b, .2 * c, .2 * c);
            pullJoints(this.a[a][0], this.a[a][8], 3 * b, .1 * c, c);
            pullJoints(this.a[a][7], this.a[a][8], 2 * b, .2 * c, .2 * c);
            pullJoints(this.a[a][0], this.a[a][1], 4 * b, .1 * c, c);
            pullJoints(this.a[a][0], this.a[a][3], 4 * b, .1 * c, c);
            pullJoints(this.a[a][0], this.a[a][2], 4 * b, .1 * c, c);
            pullJoints(this.a[a][1], this.a[a][2], 3 * b, .2 * c, .2 * c);
            pullJoints(this.a[a][0], this.a[a][4], 4 * b, .1 * c, c);
            pullJoints(this.a[a][3], this.a[a][4], 3 * b, .2 * c, .2 * c);
            pullJoints(this.a[a][2], this.a[a][4], 8 * b, .1 * c, .1 * c);
            pullJoints(this.a[a][5], this.a[a][7], 7 * b, .1 * c, .1 * c);
            ENattack(this, a, 0);
            0 != EN_Info[this.f[a]][En_2nd_Att] && ENattack(this, a, 1);
            for (b = this.g[a] = 0; 9 > b; b++) ENgroundCollision(this, a, b, .5);
            this.a[a][20].set(this.a[a][0]);
            if (0 >= this.j[a]) {
                this.b[a] = 3;
                this.h[a] = 0;
                for (b = 1; 9 > b; b++) this.a[a][b].x += randomRange(-1, 1), this.a[a][b].y -= randomRange(1, 2);
                enemyDeath(this, a, 0)
            }
        } else {
            for (b = 0; 9 > b; b++) moveJoint(this.a[a][b], this.c[a][b], .05, .99);
            c = .5;
            b = 1.2 * (150 - this.h[a]) / 150;
            pullJoints(this.a[a][1], this.a[a][2], 4 * b, c, c);
            pullJoints(this.a[a][3], this.a[a][4], 4 * b, c, c);
            pullJoints(this.a[a][5], this.a[a][6], 3 * b, c, c);
            pullJoints(this.a[a][7], this.a[a][8], 3 * b, c, c);
            for (b = this.g[a] = 0; 9 > b; b++) ENgroundCollision(this, a, b, .5);
            150 < this.h[a]++ && this.sub(a--)
        }
    else {
        this.a[a][0].x += 4;
        this.a[a][0].y += 0;
        this.a[a][1].x += 0;
        this.a[a][1].y += 0;
        this.a[a][2].x += 0;
        this.a[a][2].y += 7.99;
        this.a[a][3].x += 7.99;
        this.a[a][3].y += 0;
        this.a[a][4].x += 7.99;
        this.a[a][4].y += 7.99;
        this.a[a][5].x += 0;
        this.a[a][5].y += 0;
        this.a[a][6].x += 0;
        this.a[a][6].y += 7.99;
        this.a[a][7].x += 7.99;
        this.a[a][7].y += 0;
        this.a[a][8].x += 7.99;
        this.a[a][8].y += 7.99;
        for (b = 0; 9 > b; b++) this.c[a][b].set(this.a[a][b]);
        this.b[a] = 1
    }
    return a
};
WIN.fff = SR_Enemy.prototype.V;
SR_Enemy.prototype.V = function(a) {
    var b, c = EN_Info[this.f[a]][EN_Size];
    if (this.b[a])
        if (1 == this.b[a]) {
            for (b = 0; 3 > b; b++) moveJoint(this.a[a][b], this.c[a][b], -.04, .99);
            moveJoint(this.a[a][b], this.c[a][b], 1, .99);
            pullJoints(this.a[a][0], this.a[a][3], 20 * c, .2, 0);
            pullJoints(this.a[a][1], this.a[a][3], 15 * c, .2, 0);
            pullJoints(this.a[a][2], this.a[a][3], 20 * c, .2, 0);
            this.a[a][0].x = this.a[a][3].x;
            this.a[a][1].x = this.a[a][3].x - 8 * c;
            this.a[a][2].x = this.a[a][3].x + 8 * c;
            0 < this.s[a] ? this.s[a]-- : 0 < this.u[a] && (this.a[a][0].y += randomRange(0, 1), this.a[a][1].y += randomRange(0, 1), this.a[a][2].y += randomRange(0, 1), ENattack(this, a, 0));
            this.u[a] = 0;
            for (b = this.g[a] = 0; 4 > b; b++) ENgroundCollision(this, a, b, .5);
            this.a[a][20].x = this.a[a][0].x;
            this.a[a][20].y = .5 * (this.a[a][0].y + this.a[a][1].y);
            if (0 >= this.j[a]) {
                this.b[a]++;
                for (b = 0; 4 > b; b++) this.a[a][b].x += randomRange(-.5, .5), this.a[a][b].y -= randomRange(2, 3);
                enemyDeath(this, a, 0)
            }
        } else {
            for (b = 0; 4 > b; b++) moveJoint(this.a[a][b], this.c[a][b], .05, .99);
            for (b = this.g[a] = 0; 4 > b; b++) ENgroundCollision(this, a, b, .5);
            150 < this.h[a]++ && this.sub(a--)
        }
    else this.a[a][0].x += 1, this.a[a][0].y += 0, this.a[a][1].x += 0, this.a[a][1].y += 1, this.a[a][2].x += 2, this.a[a][2].y += 1, this.a[a][3].x += 1, this.a[a][3].y += 2, this.b[a]++;
    return a
};
WIN.fff = SR_Enemy.prototype.W;
SR_Enemy.prototype.W = function(a) {
    var b, c = new Vector2D;
    b = EN_Info[this.f[a]][EN_Size];
    if (this.b[a])
        if (1 == this.b[a] || 2 == this.b[a]) {
            moveJoint(this.a[a][0], this.c[a][0], .1, .99);
            moveJoint(this.a[a][1], this.c[a][1], .1, .99);
            moveJoint(this.a[a][2], this.c[a][2], -.1, .99);
            moveJoint(this.a[a][3], this.c[a][3], -.1, .99);
            assignVector2D(c, 0, 0);
            var d = PLfindPlayer(this.a[a][0].x - 150, this.a[a][0].y - 250, this.a[a][0].x + 150, this.a[a][0].y + 250, 0); - 1 != d && (c.x = Players.a[d][2].x - this.a[a][0].x, c.y = Players.a[d][2].y - 10 - this.a[a][0].y, -10 > c.x ? c.x = -.02 : 10 < c.x ? c.x = .02 : c.x = randomRange(-.02, .02), d = EN_Info[this.f[a]][32] / 2, c.y < -d ? c.y = -.02 : c.y > d ? c.y = .02 : c.y = randomRange(-.1, .1));
            this.a[a][0].add(c);
            this.a[a][2].x -= random(.8);
            this.a[a][3].x += random(.8);
            c = .3;
            pullJoints(this.a[a][1], this.a[a][2], 8 * b, c, c);
            pullJoints(this.a[a][1], this.a[a][3], 8 * b, c, c);
            pullJoints(this.a[a][2], this.a[a][3], 16 * b, c, c);
            pullJoints(this.a[a][0], this.a[a][2], 12 * b, c, c);
            pullJoints(this.a[a][0], this.a[a][3], 12 * b, c, c);
            ENattack(this, a, 0);
            for (b = this.g[a] = 0; 4 > b; b++) ENgroundCollision(this, a, b, 1);
            this.a[a][20].set(this.a[a][0]);
            if (0 >= this.j[a]) {
                this.b[a] = 3;
                for (b = 0; 4 > b; b++) this.a[a][b].x += randomRange(-1, 1), this.a[a][b].y -= randomRange(1, 2);
                enemyDeath(this, a, 0)
            }
        } else {
            for (b = 0; 4 > b; b++) moveJoint(this.a[a][b], this.c[a][b], .05, .99);
            c = .3;
            b = (150 - this.h[a]) / 150;
            pullJoints(this.a[a][1], this.a[a][2], 8 * b, c, c);
            pullJoints(this.a[a][1], this.a[a][3], 8 * b, c, c);
            pullJoints(this.a[a][2], this.a[a][3], 16 * b, c, c);
            for (b = this.g[a] = 0; 4 > b; b++) ENgroundCollision(this, a, b, .5);
            150 < this.h[a]++ && this.sub(a--)
        }
    else {
        this.a[a][0].x += 2;
        this.a[a][0].y += 4;
        this.a[a][1].x += 2;
        this.a[a][1].y += 2;
        this.a[a][2].x += 0;
        this.a[a][2].y += 0;
        this.a[a][3].x += 4;
        this.a[a][3].y += 0;
        for (b = 0; 4 > b; b++) this.c[a][b].set(this.a[a][b]);
        this.b[a] = 1
    }
    return a
};
WIN.fff = SR_Enemy.prototype.X;
SR_Enemy.prototype.X = function(a) {
    var b;
    b = EN_Info[this.f[a]][EN_Size];
    if (this.b[a])
        if (1 == this.b[a]) {
            moveJoint(this.a[a][0], this.c[a][0], -.15, .99);
            moveJoint(this.a[a][1], this.c[a][1], .1, .99);
            moveJoint(this.a[a][2], this.c[a][2], .1, .99);
            var c = PLfindPlayer(this.a[a][0].x - 200, this.a[a][0].y - 50, this.a[a][0].x + 200, this.a[a][0].y + 50, 0);
            if (0 < (this.g[a] & 2) && 5 > random(100)) {
                var d = 0; - 1 != c ? d = Players.a[c][2].x < this.a[a][0].x ? -1 : 1 : d = fiftyfifty(-1, 1);
                this.a[a][0].x += randomRange(.4, .6) * d;
                this.a[a][0].y += randomRange(-1.5, -2)
            }
            c = .01;
            pullJoints(this.a[a][0], this.a[a][1], 5 * b, c, c);
            pullJoints(this.a[a][0], this.a[a][2], 5 * b, c, c);
            pullJoints(this.a[a][1], this.a[a][2], 6 * b, c, c);
            1 < b && 0 < this.u[a] && 10 > random(100) && this.add(floor(this.a[a][0].x / 8), floor(this.a[a][0].y / 8), this.f[a] - 1);
            this.u[a] = 0;
            ENattack(this, a, 0);
            for (b = this.g[a] = 0; 3 > b; b++) ENgroundCollision(this, a, b, .9);
            this.a[a][20].set(this.a[a][0]);
            if (0 >= this.j[a]) {
                this.b[a]++;
                this.a[a][3].set(this.a[a][0]);
                this.c[a][3].set(this.a[a][0]);
                for (b = 0; 4 > b; b++) this.a[a][b].x += randomRange(-.5, .5), this.a[a][b].y -= randomRange(2, 3);
                enemyDeath(this, a, 0)
            }
        } else {
            for (b = 0; 4 > b; b++) moveJoint(this.a[a][b], this.c[a][b], .05, .99);
            c = .01;
            b = (150 - this.h[a]) / 150;
            pullJoints(this.a[a][0], this.a[a][1], 5 * b, c, c);
            pullJoints(this.a[a][0], this.a[a][2], 5 * b, c, c);
            pullJoints(this.a[a][1], this.a[a][2], 6 * b, c, c);
            for (b = this.g[a] = 0; 4 > b; b++) ENgroundCollision(this, a, b, .5);
            150 < this.h[a]++ && this.sub(a--)
        }
    else {
        this.a[a][0].x += 1;
        this.a[a][0].y += 0;
        this.a[a][1].x += 0;
        this.a[a][1].y += 1;
        this.a[a][2].x += 2;
        this.a[a][2].y += 1;
        for (b = 0; 3 > b; b++) this.c[a][b].set(this.a[a][b]);
        this.b[a]++
    }
    return a
};
WIN.fff = SR_Enemy.prototype.Y;
SR_Enemy.prototype.Y = function(a) {
    var b, c = new Vector2D,
        d = EN_Info[this.f[a]][EN_Size];
    if (this.b[a])
        if (1 == this.b[a]) {
            for (b = 0; 10 > b; b++) moveJoint(this.a[a][b], this.c[a][b], 0, .98);
            0 >= this.h[a] && 5 > random(100) && (b = floor(random(3)), 0 == b ? (c.x = (this.a[a][8].x + this.a[a][9].x) / 2 - this.a[a][7].x, c.y = (this.a[a][8].y + this.a[a][9].y) / 2 - this.a[a][7].y, normalize(c), scaleVector2D(c, d), this.a[a][7].add(c)) : 1 == b ? (c.x = (this.a[a][9].x + this.a[a][7].x) / 2 - this.a[a][8].x, c.y = (this.a[a][9].y + this.a[a][7].y) / 2 - this.a[a][8].y, normalize(c), scaleVector2D(c, d), this.a[a][8].add(c)) : 2 == b && (c.x = (this.a[a][7].x + this.a[a][8].x) / 2 - this.a[a][9].x, c.y = (this.a[a][7].y + this.a[a][8].y) / 2 - this.a[a][9].y, normalize(c), scaleVector2D(c, d), this.a[a][9].add(c)), this.h[a] = 25 * d);
            assignVector2D(c, 0, 0);
            b = PLfindPlayer(this.a[a][0].x - 200, this.a[a][0].y - 200, this.a[a][0].x + 200, this.a[a][0].y + 200, 0);
            if (-1 != b)
                for (Vdistance(c, Players.a[b][2], this.a[a][0]), normalize(c), b = 4; 7 > b; b++) this.a[a][b].x += .02 * c.x, this.a[a][b].y += .02 * c.y;
            c = .05;
            for (b = 1; 4 > b; b++) pullJoints(this.a[a][0], this.a[a][b], 3 * d, c, c);
            for (b = 1; 4 > b; b++) pullJoints(this.a[a][b], this.a[a][b + 3], 3 * d, c, c);
            for (b = 4; 7 > b; b++) pullJoints(this.a[a][b], this.a[a][b + 3], 3 * d, c, .01);
            5 > this.h[a]-- && (c = .01 / d, pullJoints(this.a[a][7], this.a[a][8], 20 * d, c, c), pullJoints(this.a[a][8], this.a[a][9], 20 * d, c, c), pullJoints(this.a[a][9], this.a[a][7], 20 * d, c, c));
            ENattack(this, a, 0);
            for (b = this.g[a] = 0; 10 > b; b++) ENgroundCollision(this, a, b, .9);
            this.a[a][20].set(this.a[a][0]);
            if (0 >= this.j[a]) {
                this.b[a]++;
                for (b = this.h[a] = 0; 4 > b; b++) this.a[a][b].x += randomRange(-.5, .5), this.a[a][b].y -= randomRange(2, 3);
                enemyDeath(this, a, 0)
            }
        } else {
            for (b = 0; 10 > b; b++) moveJoint(this.a[a][b], this.c[a][b], .05, .98);
            var c2 = .05,
                e = (150 - this.h[a]) / 150;
            for (b = 1; 4 > b; b++) pullJoints(this.a[a][b], this.a[a][b + 3], 3 * d * e, c2, c2);
            for (b = 4; 7 > b; b++) pullJoints(this.a[a][b], this.a[a][b + 3], 3 * d * e, c2, c2);
            for (b = this.g[a] = 0; 10 > b; b++) ENgroundCollision(this, a, b, .5);
            150 < this.h[a]++ && this.sub(a--)
        }
    else this.b[a]++;
    return a
};
WIN.fff = SR_Enemy.prototype.Z;
SR_Enemy.prototype.Z = function(a) {
    var b, c = EN_Info[this.f[a]][EN_Size];
    if (this.b[a])
        if (10 > this.b[a]) {
            500 > this.h[a] ? moveJoint(this.a[a][0], this.c[a][0], .1, .99) : moveJoint(this.a[a][0], this.c[a][0], -.1, .99);
            for (b = 1; b < this.b[a] - 1; b++) moveJoint(this.a[a][b], this.c[a][b], 0, .99);
            moveJoint(this.a[a][b], this.c[a][b], 1, .99);
            10 > random(100) && (b = floor(random(4)), this.a[a][b].x += randomRange(-.5, .5));
            this.h[a]++;
            600 < this.h[a] && (this.h[a] = floor(random(400)));
            pullJoints(this.a[a][0], this.a[a][1], 8 * c, .2, .2);
            for (b = 1; b < this.b[a] - 2; b++) pullJoints(this.a[a][b], this.a[a][b + 1], 6 * c, .2, .2);
            pullJoints(this.a[a][b], this.a[a][b + 1], 6 * c, .2, 0);
            ENattack(this, a, 0);
            this.g[a] = 0;
            for (b = this.b[a] - 1; b < this.b[a]; b++) ENgroundCollision(this, a, b, .5);
            this.a[a][20].set(this.a[a][0]);
            if (0 >= this.j[a]) {
                for (b = 0; b < this.b[a]; b++) this.a[a][b].x += randomRange(-.5, .5), this.a[a][b].y -= randomRange(2, 3);
                this.h[a] = 0;
                enemyDeath(this, a, 0);
                this.b[a] += 10
            }
        } else {
            for (b = 0; b < this.b[a] - 10; b++) moveJoint(this.a[a][b], this.c[a][b], .05, .99);
            this.g[a] = 0;
            150 < this.h[a]++ && this.sub(a--)
        }
    else this.b[a] = floor(randomRange(4, 7)), this.h[a] = floor(random(400));
    return a
};
WIN.fff = SR_Enemy.prototype.K;
SR_Enemy.prototype.K = function() {
    var a, b;
    for (a = 0; a < this.i; a++) {
        var c = EN_Info[this.f[a]][2],
            d = EN_Info[this.f[a]][4],
            e = EN_Info[this.f[a]][5],
            g = EN_Info[this.f[a]][EN_Size];
        0 < this.w[a] ? (d = 5934817, e = 1989840) : 0 < this.A[a] ? (d = 1989840, e = 9840) : 0 < this.B[a] && (d = 3407616, e = 3381504);
        var h = (150 - this.h[a]) / 150 * g;
        switch (this.v[a]) {
            case 0:
                outlineRectCentered(floor(this.a[a][1].x - .5), floor(this.a[a][1].y) - 2 * g, floor(4 * h) + 1, floor(4 * h) + 1, e);
                outlineRectCentered(floor(this.a[a][2].x - .5), floor(this.a[a][2].y) - 2 * g, floor(4 * h) + 1, floor(4 * h) + 1, e);
                dispItemCentered(Enemy_Head_Img, floor(this.a[a][0].x), floor(this.a[a][0].y), floor(16 * h), floor(16 * h), 16 * c, 0, 16, 16, d);
                break;
            case 1:
                dispItemCentered(Enemy_Head_Img, floor(this.a[a][2].x), floor(this.a[a][2].y - 2 * h), floor(8 * h), floor(8 * h), 16 * c, 0, 16, 16, e);
                dispItemCentered(Enemy_Head_Img, floor(this.a[a][1].x), floor(this.a[a][1].y - 3 * h), floor(12 * h), floor(12 * h), 16 * c, 0, 16, 16, e);
                dispItemCentered(Enemy_Head_Img, floor(this.a[a][0].x), floor(this.a[a][0].y - 4 * h), floor(16 * h), floor(16 * h), 16 * c, 0, 16, 16, d);
                break;
            case 2:
                drawLine(this.a[a][1].x, this.a[a][1].y, this.a[a][2].x, this.a[a][2].y, e);
                drawLine(this.a[a][2].x, this.a[a][2].y, this.a[a][3].x, this.a[a][3].y, e);
                drawLine(this.a[a][3].x, this.a[a][3].y, this.a[a][1].x, this.a[a][1].y, e);
                drawLine(this.a[a][4].x, this.a[a][4].y, this.a[a][5].x, this.a[a][5].y, e);
                drawLine(this.a[a][5].x, this.a[a][5].y, this.a[a][6].x, this.a[a][6].y, e);
                drawLine(this.a[a][6].x, this.a[a][6].y, this.a[a][4].x, this.a[a][4].y, e);
                dispItemCentered(Enemy_Head_Img, floor(this.a[a][0].x), floor(this.a[a][0].y), floor(16 * h), floor(16 * h), 16 * c, 0, 16, 16, d);
                break;
            case 3:
                3 > this.b[a] && (drawLine(this.a[a][0].x, this.a[a][0].y, this.a[a][1].x, this.a[a][1].y, e), drawLine(this.a[a][4].x, this.a[a][4].y, this.a[a][5].x, this.a[a][5].y, e));
                drawLine(this.a[a][1].x, this.a[a][1].y, this.a[a][2].x, this.a[a][2].y, e);
                drawLine(this.a[a][2].x, this.a[a][2].y, this.a[a][3].x, this.a[a][3].y, e);
                drawLine(this.a[a][3].x, this.a[a][3].y, this.a[a][4].x, this.a[a][4].y, e);
                filledRectCentered(floor(this.a[a][5].x), floor(this.a[a][5].y), floor(2 * h), floor(2 * h), d);
                dispItemCentered(Enemy_Head_Img, floor(this.a[a][0].x), floor(this.a[a][0].y), floor(16 * h), floor(16 * h), 16 * c, 0, 16, 16, d);
                break;
            case 4:
            case 12:
                drawLine(this.a[a][1].x, this.a[a][1].y, this.a[a][2].x, this.a[a][2].y, e);
                3 > this.b[a] && (drawLine(this.a[a][1].x, this.a[a][1].y, this.a[a][3].x, this.a[a][3].y, e), drawLine(this.a[a][1].x, this.a[a][1].y, this.a[a][4].x, this.a[a][4].y, e));
                drawLine(this.a[a][3].x, this.a[a][3].y, this.a[a][5].x, this.a[a][5].y, e);
                drawLine(this.a[a][4].x, this.a[a][4].y, this.a[a][6].x, this.a[a][6].y, e);
                3 > this.b[a] && (drawLine(this.a[a][2].x, this.a[a][2].y, this.a[a][7].x, this.a[a][7].y, e), drawLine(this.a[a][2].x, this.a[a][2].y, this.a[a][8].x, this.a[a][8].y, e));
                drawLine(this.a[a][7].x, this.a[a][7].y, this.a[a][9].x, this.a[a][9].y, e);
                drawLine(this.a[a][8].x, this.a[a][8].y, this.a[a][10].x, this.a[a][10].y, e);
                dispItemCentered(Enemy_Head_Img, floor(this.a[a][0].x), floor(this.a[a][0].y), floor(16 * h), floor(16 * h), 16 * c, 0, 16, 16, d);
                332 == this.f[a] && dispItemCentered(Enemy_Head_Img, floor(this.a[a][0].x), floor(this.a[a][0].y - 3 * h), floor(16 * h), floor(16 * h), 352, 0, 16, 16, 16777215);
                break;
            case 5:
            case 18:
                var q = 5 == this.v[a] ? -2 : 2;
                for (b = 10 > this.b[a] ? this.b[a] - 1 : this.b[a] - 11; 0 < b; b--) outlineRectCentered(floor(this.a[a][b].x), floor(this.a[a][b].y + q * h), floor(4 * h) + 1, floor(4 * h) + 1, e);
                5 == this.v[a] ? dispItemCentered(Enemy_Head_Img, floor(this.a[a][0].x), floor(this.a[a][0].y), floor(16 * h), floor(16 * h), 16 * c, 0, 16, 16, d) : dispItemCentered(Enemy_Head_Img, floor(this.a[a][0].x), floor(this.a[a][0].y), floor(16 * h), floor(16 * h), 16 * c, 15, 16, -16, d);
                break;
            case 6:
                for (b = 1; 6 > b; b++) drawLine(this.a[a][b].x, this.a[a][b].y, this.a[a][b + 1].x, this.a[a][b + 1].y, e);
                3 > this.b[a] && drawLine(this.a[a][b].x, this.a[a][b].y, this.a[a][1].x, this.a[a][1].y, e);
                dispItemCentered(Enemy_Head_Img, floor(this.a[a][0].x), floor(this.a[a][0].y), floor(16 * h), floor(16 * h), 16 * c, 0, 16, 16, d);
                break;
            case 7:
                drawLine(this.a[a][2].x, this.a[a][2].y, this.a[a][3].x, this.a[a][3].y, e);
                drawLine(this.a[a][2].x, this.a[a][2].y, this.a[a][4].x, this.a[a][4].y, e);
                drawLine(this.a[a][3].x, this.a[a][3].y, this.a[a][4].x, this.a[a][4].y, e);
                outlineRectCentered(floor(this.a[a][1].x), floor(this.a[a][1].y), floor(6 * h) + 1, floor(6 * h) + 1, e);
                dispItemCentered(Enemy_Head_Img, floor(this.a[a][0].x), floor(this.a[a][0].y), floor(16 * h), floor(16 * h), 16 * c, 0, 16, 16, d);
                break;
            case 8:
                outlineRectCentered(floor(this.a[a][2].x) + floor(1 * h), floor(this.a[a][2].y - 2 * h), floor(8 * h) + 1, floor(4 * h) + 1, e);
                outlineRectCentered(floor(this.a[a][1].x), floor(this.a[a][1].y - 2 * h), floor(4 * h) + 1, floor(4 * h) + 1, e);
                dispItemCentered(Enemy_Head_Img, floor(this.a[a][0].x), floor(this.a[a][0].y), floor(16 * h), floor(16 * h), 16 * c, 0, 16, 16, d);
                break;
            case 9:
            case 13:
                filledRectCentered(floor(this.a[a][5].x), floor(this.a[a][5].y), floor(2 * h), floor(2 * h), d);
                dispItemCentered(Enemy_Head_Img, floor(this.a[a][4].x), floor(this.a[a][4].y), floor(8 * h), floor(8 * h), 16 * c, 0, 16, 16, e);
                dispItemCentered(Enemy_Head_Img, floor(this.a[a][3].x), floor(this.a[a][3].y), floor(10 * h), floor(10 * h), 16 * c, 0, 16, 16, e);
                dispItemCentered(Enemy_Head_Img, floor(this.a[a][2].x), floor(this.a[a][2].y), floor(12 * h), floor(12 * h), 16 * c, 0, 16, 16, e);
                dispItemCentered(Enemy_Head_Img, floor(this.a[a][1].x), floor(this.a[a][1].y), floor(14 * h), floor(14 * h), 16 * c, 0, 16, 16, e);
                dispItemCentered(Enemy_Head_Img, floor(this.a[a][0].x), floor(this.a[a][0].y), floor(16 * h), floor(16 * h), 16 * c, 0, 16, 16, d);
                break;
            case 10:
                drawLine(this.a[a][1].x, this.a[a][1].y, this.a[a][2].x, this.a[a][2].y, e);
                3 > this.b[a] && (drawLine(this.a[a][0].x, this.a[a][0].y, this.a[a][1].x, this.a[a][1].y, e), drawLine(this.a[a][0].x, this.a[a][0].y, this.a[a][3].x, this.a[a][3].y, e));
                drawLine(this.a[a][1].x, this.a[a][1].y, this.a[a][2].x, this.a[a][2].y, e);
                drawLine(this.a[a][3].x, this.a[a][3].y, this.a[a][4].x, this.a[a][4].y, e);
                3 > this.b[a] && (drawLine(this.a[a][0].x, this.a[a][0].y, this.a[a][5].x, this.a[a][5].y, e), drawLine(this.a[a][0].x, this.a[a][0].y, this.a[a][7].x, this.a[a][7].y, e));
                drawLine(this.a[a][5].x, this.a[a][5].y, this.a[a][6].x, this.a[a][6].y, e);
                drawLine(this.a[a][7].x, this.a[a][7].y, this.a[a][8].x, this.a[a][8].y, e);
                dispItemCentered(Enemy_Head_Img, floor(this.a[a][0].x), floor(this.a[a][0].y), floor(16 * h), floor(16 * h), 16 * c, 0, 16, 16, d);
                break;
            case 11:
                outlineRectCentered(floor(this.a[a][3].x), floor(this.a[a][3].y - 7 * h), floor(4 * h) + 1, floor(14 * h) + 1, e);
                outlineRectCentered(floor(this.a[a][2].x) + 0, floor(this.a[a][2].y), floor(4 * h) + 1, floor(9 * h) + 1, e);
                outlineRectCentered(floor(this.a[a][1].x) + 1, floor(this.a[a][1].y), floor(4 * h) + 1, floor(8 * h) + 1, e);
                dispItemCentered(Enemy_Head_Img, floor(this.a[a][0].x) + 1, floor(this.a[a][0].y), floor(16 * h), floor(16 * h), 16 * c, 0, 16, 16, d);
                break;
            case 14:
                drawLine(this.a[a][1].x, this.a[a][1].y, this.a[a][2].x, this.a[a][2].y, e);
                drawLine(this.a[a][2].x, this.a[a][2].y, this.a[a][3].x, this.a[a][3].y, e);
                drawLine(this.a[a][3].x, this.a[a][3].y, this.a[a][1].x, this.a[a][1].y, e);
                dispItemCentered(Enemy_Head_Img, floor(this.a[a][0].x), floor(this.a[a][0].y), floor(16 * h), floor(16 * h), 16 * c, 0, 16, 16, d);
                break;
            case 15:
                drawLine(this.a[a][0].x, this.a[a][0].y, this.a[a][1].x, this.a[a][1].y, e);
                drawLine(this.a[a][0].x, this.a[a][0].y, this.a[a][2].x, this.a[a][2].y, e);
                drawLine(this.a[a][1].x, this.a[a][1].y, this.a[a][2].x, this.a[a][2].y, e);
                2 > this.b[a] ? dispItemCentered(Enemy_Head_Img, floor(this.a[a][0].x), floor(this.a[a][0].y), floor(16 * h), floor(16 * h), 16 * c, 0, 16, 16, d) : dispItemCentered(Enemy_Head_Img, floor(this.a[a][3].x), floor(this.a[a][3].y), floor(16 * h), floor(16 * h), 16 * c, 0, 16, 16, d);
                break;
            case 16:
                if (2 > this.b[a])
                    for (b = 1; 4 > b; b++) drawLine(this.a[a][0].x, this.a[a][0].y, this.a[a][b].x, this.a[a][b].y, e);
                for (b = 4; 10 > b; b++) drawLine(this.a[a][b - 3].x, this.a[a][b - 3].y, this.a[a][b].x, this.a[a][b].y, e);
                if (2 > this.b[a])
                    for (b = 7; 10 > b; b++) filledRectCentered(floor(this.a[a][b].x), floor(this.a[a][b].y), floor(2 * g), floor(2 * g), d);
                else
                    for (b = 7; 10 > b; b++) filledRectCentered(floor(this.a[a][b].x) + 1, floor(this.a[a][b].y) + 1, floor(2 * h), floor(2 * h), d);
                2 > this.b[a] ? dispItemCentered(Enemy_Head_Img, floor(this.a[a][0].x), floor(this.a[a][0].y), floor(16 * g), floor(16 * g), 16 * c, 0, 16, 16, d) : dispItemCentered(Enemy_Head_Img, floor(this.a[a][0].x), floor(this.a[a][0].y), floor(16 * h), floor(16 * h), 16 * c, 0, 16, 16, d);
                break;
            case 17:
                if (10 > this.b[a]) {
                    for (b = this.b[a] - 1; 0 < b; b--) filledRectCentered(floor(this.a[a][b].x), floor(this.a[a][b].y - 2 * g), floor(4 * g), floor(4 * g), e);
                    dispItemCentered(Enemy_Head_Img, floor(this.a[a][0].x), floor(this.a[a][0].y), floor(16 * g), floor(16 * g), 16 * c, 0, 16, 16, d)
                } else {
                    for (b = this.b[a] - 11; 0 < b; b--) outlineRectCentered(floor(this.a[a][b].x), floor(this.a[a][b].y - 2 * h), floor(4 * h) + 1, floor(4 * h) + 1, e);
                    dispItemCentered(Enemy_Head_Img, floor(this.a[a][0].x), floor(this.a[a][0].y), floor(16 * h), floor(16 * h), 16 * c, 0, 16, 16, d)
                }
        }
        0 < (Sett_LP_Bar_Disp & 2) && 0 < this.j[a] && (filledRect(floor(this.a[a][0].x) - 6 * g, floor(this.a[a][0].y) - 10 * g, 12 * g, 1, 10027008), filledRect(floor(this.a[a][0].x) - 6 * g, floor(this.a[a][0].y) - 10 * g, floor(12 * g * this.j[a] / EN_Info[this.f[a]][EN_LP]), 1, 52224))
    }
};

function ENdrawIcon(a, b, c, d) {
    var e = EN_Info[a][2],
        g = EN_Info[a][4],
        h = EN_Info[a][5],
        q = clamp(EN_Info[a][EN_Size], 1, 4);
    1 == d && (q = 1);
    d = q;
    var joint_Xpos = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        joint_Ypos = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    switch (EN_Info[a][EN_Species]) {
        case 0:
            joint_Xpos[0] = b + 0 * d;
            joint_Ypos[0] = c - 7 * d;
            joint_Xpos[1] = b - 5.5 * d;
            joint_Ypos[1] = c - 0 * d;
            joint_Xpos[2] = b + 6 * d;
            joint_Ypos[2] = c - 0 * d;
            break;
        case 1:
            joint_Xpos[0] = b - 3 * d;
            joint_Ypos[0] = c - 8 * d;
            joint_Xpos[1] = b + 1 * d;
            joint_Ypos[1] = c - 7 * d;
            joint_Xpos[2] = b + 4 * d;
            joint_Ypos[2] = c - 1 * d;
            break;
        case 2:
            joint_Xpos[0] = b + 0 * d;
            joint_Ypos[0] = c - 8 * d;
            joint_Xpos[1] = b - 4 * d;
            joint_Ypos[1] = c - 8 * d;
            joint_Xpos[2] = b - 9 * d;
            joint_Ypos[2] = c - 9 * d;
            joint_Xpos[3] = b - 7 * d;
            joint_Ypos[3] = c - 4 * d;
            joint_Xpos[4] = b + 3 * d;
            joint_Ypos[4] = c - 8 * d;
            joint_Xpos[5] = b + 9 * d;
            joint_Ypos[5] = c - 10 * d;
            joint_Xpos[6] = b + 7 * d;
            joint_Ypos[6] = c - 4 * d;
            break;
        case 3:
            joint_Xpos[0] = b - 3 * d;
            joint_Ypos[0] = c - 10 * d;
            joint_Xpos[1] = b + 1 * d;
            joint_Ypos[1] = c - 10 * d;
            joint_Xpos[2] = b + 4 * d;
            joint_Ypos[2] = c - 8 * d;
            joint_Xpos[3] = b + 5 * d;
            joint_Ypos[3] = c - 6 * d;
            joint_Xpos[4] = b + 5 * d;
            joint_Ypos[4] = c - 4 * d;
            joint_Xpos[5] = b + 3 * d;
            joint_Ypos[5] = c - 1 * d;
            break;
        case 4:
            joint_Xpos[0] = b + 0 * d;
            joint_Ypos[0] = c - 15 * d;
            joint_Xpos[1] = b + 0 * d;
            joint_Ypos[1] = c - 10 * d;
            joint_Xpos[2] = b + 0 * d;
            joint_Ypos[2] = c - 7 * d;
            joint_Xpos[3] = b - 2 * d;
            joint_Ypos[3] = c - 8 * d;
            joint_Xpos[4] = b + 3 * d;
            joint_Ypos[4] = c - 11 * d;
            joint_Xpos[5] = b - 5 * d;
            joint_Ypos[5] = c - 7 * d;
            joint_Xpos[6] = b + 5 * d;
            joint_Ypos[6] = c - 8 * d;
            joint_Xpos[7] = b - 3 * d;
            joint_Ypos[7] = c - 3 * d;
            joint_Xpos[8] = b + 3 * d;
            joint_Ypos[8] = c - 5 * d;
            joint_Xpos[9] = b - 1 * d;
            joint_Ypos[9] = c - 1 * d;
            joint_Xpos[10] = b + 2 * d;
            joint_Ypos[10] = c - 0 * d;
            break;
        case 5:
            joint_Xpos[0] = b + 0 * d;
            joint_Ypos[0] = c - 20 * d;
            joint_Xpos[1] = b + 0 * d;
            joint_Ypos[1] = c - 12 * d;
            joint_Xpos[2] = b - 1 * d;
            joint_Ypos[2] = c - 6 * d;
            joint_Xpos[3] = b + 0 * d;
            joint_Ypos[3] = c - 0 * d;
            break;
        case 18:
            d = clamp(d, 1, 2);
            joint_Xpos[0] = b + 0 * d;
            joint_Ypos[0] = c + 20 * d - 40;
            joint_Xpos[1] = b + 0 * d;
            joint_Ypos[1] = c + 12 * d - 40;
            joint_Xpos[2] = b - 1 * d;
            joint_Ypos[2] = c + 6 * d - 40;
            joint_Xpos[3] = b + 0 * d;
            joint_Ypos[3] = c + 0 * d - 40;
            break;
        case 6:
            joint_Xpos[0] = b + 0 * d;
            joint_Ypos[0] = c - 10 * d;
            joint_Xpos[1] = b - 7 * d;
            joint_Ypos[1] = c - 19 * d;
            joint_Xpos[2] = b + 5 * d;
            joint_Ypos[2] = c - 21 * d;
            joint_Xpos[3] = b + 12 * d;
            joint_Ypos[3] = c - 12 * d;
            joint_Xpos[4] = b + 7 * d;
            joint_Ypos[4] = c - 2 * d;
            joint_Xpos[5] = b - 5 * d;
            joint_Ypos[5] = c - 0 * d;
            joint_Xpos[6] = b - 12 * d;
            joint_Ypos[6] = c - 10 * d;
            break;
        case 7:
            joint_Xpos[0] = b - 5 * d;
            joint_Ypos[0] = c - 13 * d;
            joint_Xpos[1] = b + 0 * d;
            joint_Ypos[1] = c - 9 * d;
            joint_Xpos[2] = b + 5 * d;
            joint_Ypos[2] = c - 6 * d;
            joint_Xpos[3] = b + 8 * d;
            joint_Ypos[3] = c - 11 * d;
            joint_Xpos[4] = b + 10 * d;
            joint_Ypos[4] = c - 3 * d;
            break;
        case 8:
            joint_Xpos[0] = b + 0 * d;
            joint_Ypos[0] = c - 12 * d;
            joint_Xpos[1] = b + 0 * d;
            joint_Ypos[1] = c - 5 * d;
            joint_Xpos[2] = b + 0 * d;
            joint_Ypos[2] = c - 0 * d;
            break;
        case 9:
        case 13:
            joint_Xpos[0] = b - 4 * d;
            joint_Ypos[0] = c - 20 * d;
            joint_Xpos[1] = b + 2 * d;
            joint_Ypos[1] = c - 16 * d;
            joint_Xpos[2] = b + 4 * d;
            joint_Ypos[2] = c - 11 * d;
            joint_Xpos[3] = b + 2 * d;
            joint_Ypos[3] = c - 6 * d;
            joint_Xpos[4] = b - 1 * d;
            joint_Ypos[4] = c - 3 * d;
            joint_Xpos[5] = b - 5 * d;
            joint_Ypos[5] = c - 2 * d;
            break;
        case 10:
            joint_Xpos[0] = b + 0 * d;
            joint_Ypos[0] = c - 6 * d;
            joint_Xpos[1] = b - 9 * d;
            joint_Ypos[1] = c - 9 * d;
            joint_Xpos[2] = b - 7 * d;
            joint_Ypos[2] = c - 0 * d;
            joint_Xpos[3] = b + 9 * d;
            joint_Ypos[3] = c - 9 * d;
            joint_Xpos[4] = b + 7 * d;
            joint_Ypos[4] = c - 0 * d;
            joint_Xpos[5] = b - 7 * d;
            joint_Ypos[5] = c - 5 * d;
            joint_Xpos[6] = b - 5 * d;
            joint_Ypos[6] = c - 0 * d;
            joint_Xpos[7] = b + 7 * d;
            joint_Ypos[7] = c - 5 * d;
            joint_Xpos[8] = b + 5 * d;
            joint_Ypos[8] = c - 0 * d;
            break;
        case 11:
            joint_Xpos[0] = b + 0 * d;
            joint_Ypos[0] = c - 19 * d;
            joint_Xpos[1] = b - 8 * d;
            joint_Ypos[1] = c - 13 * d;
            joint_Xpos[2] = b + 8 * d;
            joint_Ypos[2] = c - 18 * d;
            joint_Xpos[3] = b + 0 * d;
            joint_Ypos[3] = c - 0 * d;
            break;
        case 12:
            joint_Xpos[0] = b + 0 * d;
            joint_Ypos[0] = c - 16 * d;
            joint_Xpos[1] = b + 0 * d;
            joint_Ypos[1] = c - 10 * d;
            joint_Xpos[2] = b + 2 * d;
            joint_Ypos[2] = c - 7 * d;
            joint_Xpos[3] = b - 2 * d;
            joint_Ypos[3] = c - 8 * d;
            joint_Xpos[4] = b - 3 * d;
            joint_Ypos[4] = c - 11 * d;
            joint_Xpos[5] = b - 5 * d;
            joint_Ypos[5] = c - 7 * d;
            joint_Xpos[6] = b - 8 * d;
            joint_Ypos[6] = c - 10 * d;
            joint_Xpos[7] = b - 1 * d;
            joint_Ypos[7] = c - 4 * d;
            joint_Xpos[8] = b + 2 * d;
            joint_Ypos[8] = c - 5 * d;
            joint_Xpos[9] = b - 0 * d;
            joint_Ypos[9] = c - 1 * d;
            joint_Xpos[10] = b + 4 * d;
            joint_Ypos[10] = c - 0 * d;
            break;
        case 14:
            joint_Xpos[0] = b + 0 * d;
            joint_Ypos[0] = c - 8 * d;
            joint_Xpos[1] = b - 0 * d;
            joint_Ypos[1] = c - 14 * d;
            joint_Xpos[2] = b - 8 * d;
            joint_Ypos[2] = c - 16 * d;
            joint_Xpos[3] = b + 8 * d;
            joint_Ypos[3] = c - 16 * d;
            break;
        case 15:
            joint_Xpos[0] = b - 1 * d;
            joint_Ypos[0] = c - 12 * d;
            joint_Xpos[1] = b - 3 * d;
            joint_Ypos[1] = c - 0 * d;
            joint_Xpos[2] = b + 3 * d;
            joint_Ypos[2] = c - 0 * d;
            break;
        case 16:
            joint_Xpos[0] = b - 0 * d;
            joint_Ypos[0] = c - 10 * d;
            joint_Xpos[1] = b - 3 * d;
            joint_Ypos[1] = c - 11 * d;
            joint_Xpos[4] = b - 6 * d;
            joint_Ypos[4] = c - 12 * d;
            joint_Xpos[7] = b - 9 * d;
            joint_Ypos[7] = c - 13 * d;
            joint_Xpos[2] = b + 3 * d;
            joint_Ypos[2] = c - 11 * d;
            joint_Xpos[5] = b + 6 * d;
            joint_Ypos[5] = c - 12 * d;
            joint_Xpos[8] = b + 8 * d;
            joint_Ypos[8] = c - 14 * d;
            joint_Xpos[3] = b + 1 * d;
            joint_Ypos[3] = c - 7 * d;
            joint_Xpos[6] = b + 2 * d;
            joint_Ypos[6] = c - 4 * d;
            joint_Xpos[9] = b + 1 * d;
            joint_Ypos[9] = c - 1 * d;
            break;
        case 17:
            joint_Xpos[0] = b + 2 * d, joint_Ypos[0] = c - 16 * d, joint_Xpos[1] = b + 2 * d, joint_Ypos[1] = c - 6 * d, joint_Xpos[2] = b - 3 * d, joint_Ypos[2] = c - 5 * d, joint_Xpos[3] = b - 2 * d, joint_Ypos[3] = c - 0 * d
    }
    switch (EN_Info[a][EN_Species]) {
        case 0:
            outlineRectCentered(floor(joint_Xpos[1] - .5), floor(joint_Ypos[1]) - 2 * q, floor(4 * d) + 1, floor(4 * d) + 1, h);
            outlineRectCentered(floor(joint_Xpos[2] - .5), floor(joint_Ypos[2]) - 2 * q, floor(4 * d) + 1, floor(4 * d) + 1, h);
            dispItemCentered(Enemy_Head_Img, floor(joint_Xpos[0]), floor(joint_Ypos[0]), floor(16 * d), floor(16 * d), 16 * e, 0, 16, 16, g);
            break;
        case 1:
            dispItemCentered(Enemy_Head_Img, floor(joint_Xpos[2]), floor(joint_Ypos[2] - 2 * d), floor(8 * d), floor(8 * d), 16 * e, 0, 16, 16, h);
            dispItemCentered(Enemy_Head_Img, floor(joint_Xpos[1]), floor(joint_Ypos[1] - 3 * d), floor(12 * d), floor(12 * d), 16 * e, 0, 16, 16, h);
            dispItemCentered(Enemy_Head_Img, floor(joint_Xpos[0]), floor(joint_Ypos[0] - 4 * d), floor(16 * d), floor(16 * d), 16 * e, 0, 16, 16, g);
            break;
        case 2:
            drawLine(joint_Xpos[1], joint_Ypos[1], joint_Xpos[2], joint_Ypos[2], h);
            drawLine(joint_Xpos[2], joint_Ypos[2], joint_Xpos[3], joint_Ypos[3], h);
            drawLine(joint_Xpos[3], joint_Ypos[3], joint_Xpos[1], joint_Ypos[1], h);
            drawLine(joint_Xpos[4], joint_Ypos[4], joint_Xpos[5], joint_Ypos[5], h);
            drawLine(joint_Xpos[5], joint_Ypos[5], joint_Xpos[6], joint_Ypos[6], h);
            drawLine(joint_Xpos[6], joint_Ypos[6], joint_Xpos[4], joint_Ypos[4], h);
            dispItemCentered(Enemy_Head_Img, floor(joint_Xpos[0]), floor(joint_Ypos[0]), floor(16 * d), floor(16 * d), 16 * e, 0, 16, 16, g);
            break;
        case 3:
            drawLine(joint_Xpos[0], joint_Ypos[0], joint_Xpos[1], joint_Ypos[1], h);
            drawLine(joint_Xpos[4], joint_Ypos[4], joint_Xpos[5], joint_Ypos[5], h);
            drawLine(joint_Xpos[1], joint_Ypos[1], joint_Xpos[2], joint_Ypos[2], h);
            drawLine(joint_Xpos[2], joint_Ypos[2], joint_Xpos[3], joint_Ypos[3], h);
            drawLine(joint_Xpos[3], joint_Ypos[3], joint_Xpos[4], joint_Ypos[4], h);
            filledRectCentered(floor(joint_Xpos[5]), floor(joint_Ypos[5]), floor(2 * d), floor(2 * d), g);
            dispItemCentered(Enemy_Head_Img, floor(joint_Xpos[0]), floor(joint_Ypos[0]), floor(16 * d), floor(16 * d), 16 * e, 0, 16, 16, g);
            break;
        case 4:
        case 12:
            drawLine(joint_Xpos[1], joint_Ypos[1], joint_Xpos[2], joint_Ypos[2], h);
            drawLine(joint_Xpos[1], joint_Ypos[1], joint_Xpos[3], joint_Ypos[3], h);
            drawLine(joint_Xpos[1], joint_Ypos[1], joint_Xpos[4], joint_Ypos[4], h);
            drawLine(joint_Xpos[3], joint_Ypos[3], joint_Xpos[5], joint_Ypos[5], h);
            drawLine(joint_Xpos[4], joint_Ypos[4], joint_Xpos[6], joint_Ypos[6], h);
            drawLine(joint_Xpos[2], joint_Ypos[2], joint_Xpos[7], joint_Ypos[7], h);
            drawLine(joint_Xpos[2], joint_Ypos[2], joint_Xpos[8], joint_Ypos[8], h);
            drawLine(joint_Xpos[7], joint_Ypos[7], joint_Xpos[9], joint_Ypos[9], h);
            drawLine(joint_Xpos[8], joint_Ypos[8], joint_Xpos[10], joint_Ypos[10], h);
            dispItemCentered(Enemy_Head_Img, floor(joint_Xpos[0]), floor(joint_Ypos[0]), floor(16 * d), floor(16 * d), 16 * e, 0, 16, 16, g);
            332 == a && dispItemCentered(Enemy_Head_Img, floor(joint_Xpos[0]), floor(joint_Ypos[0] - 3 * d), floor(16 * d), floor(16 * d), 352, 0, 16, 16, 16766720);
            break;
        case 5:
            for (a = 3; 0 < a; a--) outlineRectCentered(floor(joint_Xpos[a]), floor(joint_Ypos[a] - 2 * d), floor(4 * d) + 1, floor(4 * d) + 1, h);
            dispItemCentered(Enemy_Head_Img, floor(joint_Xpos[0]), floor(joint_Ypos[0]), floor(16 * d), floor(16 * d), 16 * e, 0, 16, 16, g);
            break;
        case 18:
            d = clamp(d, 1, 2);
            for (a = 3; 0 < a; a--) outlineRectCentered(floor(joint_Xpos[a]), floor(joint_Ypos[a] + 2 * d), floor(4 * d) + 1, floor(4 * d) + 1, h);
            dispItemCentered(Enemy_Head_Img, floor(joint_Xpos[0]), floor(joint_Ypos[0]), floor(16 * d), floor(16 * d), 16 * e, 15, 16, -16, g);
            break;
        case 6:
            for (a = 1; 6 > a; a++) drawLine(joint_Xpos[a], joint_Ypos[a], joint_Xpos[a + 1], joint_Ypos[a + 1], h);
            drawLine(joint_Xpos[a], joint_Ypos[a], joint_Xpos[1], joint_Ypos[1], h);
            dispItemCentered(Enemy_Head_Img, floor(joint_Xpos[0]), floor(joint_Ypos[0]), floor(16 * d), floor(16 * d), 16 * e, 0, 16, 16, g);
            break;
        case 7:
            drawLine(joint_Xpos[2], joint_Ypos[2], joint_Xpos[3], joint_Ypos[3], h);
            drawLine(joint_Xpos[2], joint_Ypos[2], joint_Xpos[4], joint_Ypos[4], h);
            drawLine(joint_Xpos[3], joint_Ypos[3], joint_Xpos[4], joint_Ypos[4], h);
            outlineRectCentered(floor(joint_Xpos[1]), floor(joint_Ypos[1]), floor(6 * d) + 1, floor(6 * d) + 1, h);
            dispItemCentered(Enemy_Head_Img, floor(joint_Xpos[0]), floor(joint_Ypos[0]), floor(16 * d), floor(16 * d), 16 * e, 0, 16, 16, g);
            break;
        case 8:
            outlineRectCentered(floor(joint_Xpos[2]) + floor(1 * d), floor(joint_Ypos[2] - 2 * d), floor(8 * d) + 1, floor(4 * d) + 1, h);
            outlineRectCentered(floor(joint_Xpos[1]), floor(joint_Ypos[1] - 2 * d), floor(4 * d) + 1, floor(4 * d) + 1, h);
            dispItemCentered(Enemy_Head_Img, floor(joint_Xpos[0]), floor(joint_Ypos[0]), floor(16 * d), floor(16 * d), 16 * e, 0, 16, 16, g);
            break;
        case 9:
        case 13:
            filledRectCentered(floor(joint_Xpos[5]), floor(joint_Ypos[5]), floor(2 * d), floor(2 * d), g);
            dispItemCentered(Enemy_Head_Img, floor(joint_Xpos[4]), floor(joint_Ypos[4]), floor(8 * d), floor(8 * d), 16 * e, 0, 16, 16, h);
            dispItemCentered(Enemy_Head_Img, floor(joint_Xpos[3]), floor(joint_Ypos[3]), floor(10 * d), floor(10 * d), 16 * e, 0, 16, 16, h);
            dispItemCentered(Enemy_Head_Img, floor(joint_Xpos[2]), floor(joint_Ypos[2]), floor(12 * d), floor(12 * d), 16 * e, 0, 16, 16, h);
            dispItemCentered(Enemy_Head_Img, floor(joint_Xpos[1]), floor(joint_Ypos[1]), floor(14 * d), floor(14 * d), 16 * e, 0, 16, 16, h);
            dispItemCentered(Enemy_Head_Img, floor(joint_Xpos[0]), floor(joint_Ypos[0]), floor(16 * d), floor(16 * d), 16 * e, 0, 16, 16, g);
            break;
        case 10:
            drawLine(floor(joint_Xpos[0]), floor(joint_Ypos[0]), floor(joint_Xpos[1]), floor(joint_Ypos[1]), h);
            drawLine(floor(joint_Xpos[0]), floor(joint_Ypos[0]), floor(joint_Xpos[3]), floor(joint_Ypos[3]), h);
            drawLine(floor(joint_Xpos[1]), floor(joint_Ypos[1]), floor(joint_Xpos[2]), floor(joint_Ypos[2]), h);
            drawLine(floor(joint_Xpos[3]), floor(joint_Ypos[3]), floor(joint_Xpos[4]), floor(joint_Ypos[4]), h);
            drawLine(floor(joint_Xpos[0]), floor(joint_Ypos[0]), floor(joint_Xpos[5]), floor(joint_Ypos[5]), h);
            drawLine(floor(joint_Xpos[0]), floor(joint_Ypos[0]), floor(joint_Xpos[7]), floor(joint_Ypos[7]), h);
            drawLine(floor(joint_Xpos[5]), floor(joint_Ypos[5]), floor(joint_Xpos[6]), floor(joint_Ypos[6]), h);
            drawLine(floor(joint_Xpos[7]), floor(joint_Ypos[7]), floor(joint_Xpos[8]), floor(joint_Ypos[8]), h);
            dispItemCentered(Enemy_Head_Img, floor(joint_Xpos[0]), floor(joint_Ypos[0]), floor(16 * d), floor(16 * d), 16 * e, 0, 16, 16, g);
            break;
        case 11:
            outlineRectCentered(floor(joint_Xpos[3]), floor(joint_Ypos[3] - 7 * d), floor(4 * d) + 1, floor(14 * d) + 1, h);
            outlineRectCentered(floor(joint_Xpos[2]) + 0, floor(joint_Ypos[2]), floor(4 * d) + 1, floor(9 * d) + 1, h);
            outlineRectCentered(floor(joint_Xpos[1]) + 1, floor(joint_Ypos[1]), floor(4 * d) + 1, floor(8 * d) + 1, h);
            dispItemCentered(Enemy_Head_Img, floor(joint_Xpos[0]) + 1, floor(joint_Ypos[0]), floor(16 * d), floor(16 * d), 16 * e, 0, 16, 16, g);
            break;
        case 14:
            drawLine(floor(joint_Xpos[1]), floor(joint_Ypos[1]), floor(joint_Xpos[2]), floor(joint_Ypos[2]), h);
            drawLine(floor(joint_Xpos[1]), floor(joint_Ypos[1]), floor(joint_Xpos[3]), floor(joint_Ypos[3]), h);
            drawLine(floor(joint_Xpos[2]), floor(joint_Ypos[2]), floor(joint_Xpos[3]), floor(joint_Ypos[3]), h);
            dispItemCentered(Enemy_Head_Img, floor(joint_Xpos[0]), floor(joint_Ypos[0]), floor(16 * d), floor(16 * d), 16 * e, 0, 16, 16, g);
            break;
        case 15:
            drawLine(floor(joint_Xpos[0]), floor(joint_Ypos[0]), floor(joint_Xpos[1]), floor(joint_Ypos[1]), h);
            drawLine(floor(joint_Xpos[0]), floor(joint_Ypos[0]), floor(joint_Xpos[2]), floor(joint_Ypos[2]), h);
            drawLine(floor(joint_Xpos[1]), floor(joint_Ypos[1]), floor(joint_Xpos[2]), floor(joint_Ypos[2]), h);
            dispItemCentered(Enemy_Head_Img, floor(joint_Xpos[0]), floor(joint_Ypos[0]), floor(16 * d), floor(16 * d), 16 * e, 0, 16, 16, g);
            break;
        case 16:
            for (a = 1; 4 > a; a++) drawLine(floor(joint_Xpos[0]), floor(joint_Ypos[0]), floor(joint_Xpos[a]), floor(joint_Ypos[a]), h);
            for (a = 4; 10 > a; a++) drawLine(floor(joint_Xpos[a - 3]), floor(joint_Ypos[a - 3]), floor(joint_Xpos[a]), floor(joint_Ypos[a]), h);
            for (a = 7; 10 > a; a++) filledRectCentered(floor(joint_Xpos[a]), floor(joint_Ypos[a]), floor(2 * d), floor(2 * d), g);
            dispItemCentered(Enemy_Head_Img, floor(joint_Xpos[0]), floor(joint_Ypos[0]), floor(16 * d), floor(16 * d), 16 * e, 0, 16, 16, g);
            break;
        case 17:
            for (a = 3; 0 < a; a--) filledRectCentered(floor(joint_Xpos[a]), floor(joint_Ypos[a] - 2 * d), floor(4 * d), floor(4 * d), h);
            dispItemCentered(Enemy_Head_Img, floor(joint_Xpos[0]), floor(joint_Ypos[0]), floor(16 * d), floor(16 * d), 16 * e, 0, 16, 16, g)
    }
}
var Stage_Count = 90,
    Stage_Status = [3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    Unlocked = 1,
    Beaten = 2,
    Bookede = 4,
    Stage_In_Book = [1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 9, 10, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 0, 0, 0, 0, 0],
    Shop_Reqs = [1, 2, 3, 4, 5, 5, 6, 6, 7, 7, 9, 5, 6,
        7, 1, 8, 8, 9, 9, 9, 1, 10, 11, 11, 12, 12, 13, 13, 14, 14, 12, 13, 14, 1, 15, 15, 15, 16, 16, 1, 17, 17, 18, 17, 18, 18, 18, 1, 19, 19, 19, 20, 20, 20, 21, 23, 20, 21, 21, 22, 22, 23, 22, 23, 24, 24, 24, 24, 24, 25, 1, 1, 24, 25, 26, 26, 26, 1, 27, 27, 28, 28, 1, 29, 30, 31, 32, 33, 1, 1
    ],
    Stage_Names = "Town;Opening Street;Grassland 1;Grassland 2;Grassland 3;Grassland 4;Grassland 5;Grassland 6;Grassland 7;Castle Gate;Castle;Hill Country 1;Hill Country 2;Hill Country 3;Lake;Forest 1;Forest 2;Cavern 1;Cavern 2;Cavern 3;Village;Seaside 1;Seaside 2;Seaside 3;Seaside 4;Submarine 1;Submarine 2;Submarine 3;Submarine 4;Submarine Shrine;Mist Grove 1;Mist Grove 2;Mist Grove 3;???;Desert 1;Desert 2;Desert 3;Desert 4;Desert 5;Oasis;Desert 6;Desert 7;Pyramid;Desert 8;Beach 1;Beach 2;Beach 3;Resort;Cavern 4;Cavern 5;Cavern 6;Snowfield 1;Snowfield 2;Mountain 1;Mountain 2;Mountaintop;Snowfield 3;Snowfield 4;Snowfield 5;Snowfield 6;Snowfield 7;Snowfield 8;Frozen Lake;Ice Castle;Snowfield 9;Beach 4;Forest 3;Forest 4;Forest 5;Forest 6;Forget Tree;!!!;Hell 1;Hell 2;Hell 3;Hell 4;Hell 5;Island;Hell 6;Inferno 1;Inferno 2;Inferno 3;Blood Lake;Cavern 7;Cavern 8;Hell 7;Hell 8;Hell Gate;Hell Castle;Volcano".split(";"),
    Dot_Locations = [
        [6, 28, 0, 1, 0],
        [10, 28, 0, 2, 0],
        [11, 24, 0, 3, 11],
        [10, 20, 0, 4, 5],
        [8, 16, 0, 6, 0],
        [12, 17, 0, 6, 14],
        [11, 12, 0, 7, 0],
        [15, 13, 0, 8, 0],
        [20, 13, 0, 9, 15],
        [24, 16, 0, 10, 0],
        [28, 16, 1, 21, 0],
        [15, 23, 0, 12, 0],
        [18, 20, 0, 13, 0],
        [22, 19, 0, 9, 0],
        [15, 17, 0, 0, 0],
        [20, 10, 0, 16, 0],
        [22, 7, 0, 17, 0],
        [22, 4, 1, 18, 0],
        [14, 3, 0, 19, 0],
        [6, 4, 1, 20, 0],
        [4, 7, 0, 0, 0],
        [33, 16, 0, 22, 30],
        [34, 12, 0, 23, 0],
        [37, 9, 0, 24, 0],
        [41, 10, 0, 25, 0],
        [42, 13, 0, 26, 28],
        [39, 16, 0, 27, 0],
        [43, 19, 0, 29, 0],
        [45, 14, 0, 29, 0],
        [48, 17, 2, 34, 0],
        [35, 20, 0, 31, 0],
        [38, 21, 0, 32, 0],
        [42, 24, 0, 33, 0],
        [46, 24, 0, 0, 0],
        [53, 17,
            0, 35, 36
        ],
        [57, 16, 0, 37, 0],
        [57, 20, 0, 38, 0],
        [60, 14, 0, 39, 0],
        [61, 19, 0, 39, 0],
        [63, 16, 1, 40, 41],
        [66, 14, 0, 42, 0],
        [66, 18, 0, 42, 43],
        [69, 16, 1, 48, 0],
        [70, 20, 0, 44, 0],
        [72, 24, 0, 45, 0],
        [76, 26, 0, 46, 0],
        [72, 30, 0, 47, 0],
        [65, 28, 0, 0, 0],
        [74, 14, 1, 49, 0],
        [78, 8, 0, 50, 0],
        [84, 10, 1, 51, 0],
        [87, 12, 0, 52, 56],
        [86, 16, 0, 53, 0],
        [81, 18, 0, 54, 0],
        [78, 14, 0, 55, 0],
        [79, 11, 0, 0, 0],
        [91, 11, 0, 57, 0],
        [93, 14, 0, 58, 59],
        [96, 16, 0, 62, 63],
        [94, 19, 0, 60, 0],
        [97, 21, 0, 61, 63],
        [96, 25, 0, 0, 0],
        [97, 13, 0, 0, 0],
        [101, 18, 1, 64, 65],
        [105, 16, 0, 72, 0],
        [106, 23, 0, 66, 0],
        [102, 28, 0, 67, 0],
        [110, 30,
            0, 68, 0
        ],
        [114, 29, 0, 69, 0],
        [115, 26, 0, 70, 0],
        [113, 22, 1, 71, 0],
        [109, 19, 0, 0, 0],
        [113, 16, 0, 73, 0],
        [117, 15, 0, 74, 0],
        [121, 18, 0, 75, 0],
        [126, 21, 0, 76, 79],
        [130, 18, 0, 77, 78],
        [126, 14, 0, 0, 0],
        [135, 17, 0, 83, 0],
        [125, 25, 0, 80, 0],
        [130, 27, 0, 81, 0],
        [135, 25, 0, 82, 0],
        [137, 21, 0, 0, 0],
        [136, 14, 1, 84, 0],
        [145, 12, 1, 85, 0],
        [143, 17, 0, 86, 0],
        [139, 15, 0, 87, 0],
        [140, 10, 0, 88, 0],
        [140, 7, 1, -1, 89],
        [130, 23, 1, 0, 0]
    ],
    Ground = 1,
    Ground_Left = 2,
    Ground_Middle = 3,
    Ground_Right = 4,
    Air_Water = 5,
    Water = 6,
    Ground_Left_Clump = 7,
    Ground_Middle_Clump = 8,
    Ground_Right_Clump = 9,
    Air = 10,
    Ceiling = 11,
    Ceiling_Left = 12,
    Ceiling_Middle = 13,
    Ceiling_Right = 14,
    Stage_Spawns = [
        [
            [0, 0, Ground, 0, 0, Ground, 0, 0, Ground, 0, 0, Ground, 0, 0],
            [0, 100, Ground, 0]
        ],
        [
            [0, 1, Ground, 0, 5, Ground_Middle, 1, 1],
            [0, 1, Ground,
                0, 6, Ground_Middle, 1, 3
            ],
            [0, 1, Ground, 0, 6, Ground_Left, 1, 2, Ground_Middle, 2, 1],
            [0, 1, Ground, 1, 5, Ground_Middle, 2, 3],
            [0, 1, Ground, 2, 5, Ground_Middle, 1, 2],
            [0, 1, Ground, 0, 20],
            [0, 1, Ground, 2, 8, Ground_Middle, 3, 1],
            [0, 1, Ground, 2, 8, Ground_Left, 0, 3, Ground_Middle, 3, 2],
            [0, 1, Ground, 2, 8, Ground_Left, 3, 1, Ground_Middle, 3, 2, Ground_Right, 3, 3],
            [0, 100, Ground_Left, 2, 2, Ground_Middle, 3, 2, Ground_Right, 4, 1]
        ],
        [
            [0, 2, Ground_Left, 5, 1, Ground_Middle, 5, 2, Ground_Right, 5, 3],
            [0, 2, Ground, 5, 6, Ground_Middle, 6, 2],
            [0, 2, Ground_Left, 5, 6, Ground_Middle, 6, 4],
            [0, 2, Ground_Left, 5, 12],
            [0, 2, Ground, 5, 6, Ground_Left, 6, 2, Ground_Middle, 6, 2, Ground_Right, 7, 1],
            [0, 2, Ground_Left, 6, 3, Ground_Middle, 7, 2, Ground_Right, 6, 3],
            [0, 2, Ground_Left, 7, 3, Ground_Middle, 6, 4],
            [0, 100, Ground_Left, 5, 1, Ground_Middle, 5, 6, Ground_Right, 8, 12]
        ],
        [
            [0, 2, Ground, 9, 2, Ground_Left, 10, 1, Ground_Middle, 10, 1, Ground_Right, 10, 1],
            [0, 2, Ground, 9, 3, Ground_Left, 10, 1, Ground_Middle, 10, 3, Ground_Right, 10, 2],
            [0, 2, Ground_Left, 10, 1, Ground_Middle, 10, 1, Ground_Right, 9, 5],
            [0, 2, Ground, 9, 3, Ground_Left, 10, 2, Ground_Middle, 10, 3, Ground_Right, 11, 2],
            [0, 2, Ground, 11, 3, Ground_Left, 10, 3,
                Ground_Middle, 10, 3, Ground_Right, 10, 3
            ],
            [0, 2, Ground, 10, 8, Ground_Left, 10, 4, Ground_Middle, 9, 3, Ground_Right, 12, 1],
            [0, 2, Ground, 10, 8, Ground_Left, 9, 3, Ground_Middle, 12, 1, Ground_Right, 11, 5],
            [0, 2, Ground, 9, 5, Ground_Left, 10, 3, Ground_Middle, 12, 3, Ground_Right, 11, 3],
            [0, 100, Ground_Left, 12, 2, Ground_Middle, 13, 1, Ground_Right, 11, 2]
        ],
        [
            [0, 2, Ground, 15, 3, Ground_Middle, 14, 1, Ground_Right, 14, 1],
            [0, 2, Ground, 15, 3, Ground_Left, 16, 1, Ground_Middle, 14, 1, Ground_Right, 14, 1],
            [0, 2, Ground_Left, 15, 3, Ground_Middle, 16, 3, Ground_Right, 14, 3],
            [0, 2, Ground, 16, 6, Ground_Left, 14, 1, Ground_Middle, 14, 1, Ground_Right, 14, 1],
            [0, 2, Ground, 15, 9, Ground_Right, 17, 1],
            [0, 2, Ground, 17, 1, Ground_Left, 15, 6, Ground_Middle, 16, 3, Ground_Right, 14, 3],
            [0, 2, Ground, 17, 2, Ground_Left, 14, 3, Ground_Middle, 14, 3, Ground_Right, 14, 3],
            [0, 2, Ground, 17, 3, Ground_Left, 15, 6, Ground_Middle, 16, 3, Ground_Right, 16, 3],
            [0, 100, Ground_Left, 15, 3, Ground_Middle, 18, 1, Ground_Right, 15, 3]
        ],
        [
            [0, 2, Ground, 19, 5],
            [0, 2, Ground, 19, 10],
            [0, 2, Ground, 19, 15],
            [0, 2, Ground_Left, 19, 5, Ground_Middle, 19, 5, Ground_Right, 21, 1],
            [0, 2, Ground, 19, 10,
                Ground_Middle, 20, 3
            ],
            [0, 2, Ground, 19, 10, Ground_Left, 21, 1, Ground_Middle, 20, 2, Ground_Right, 21, 1],
            [0, 2, Ground, 19, 5, Ground_Left, 19, 3, Ground_Middle, 20, 3, Ground_Right, 21, 3],
            [0, 100, Ground_Left, 19, 2, Ground_Middle, 19, 6, Ground_Right, 22, 12]
        ],
        [
            [0, 2, Ground, 23, 6],
            [0, 2, Ground, 23, 8, Ground_Middle, 24, 3],
            [0, 2, Ground, 24, 6, Ground_Left, 23, 2, Ground_Middle, 23, 2, Ground_Right, 23, 2],
            [0, 2, Ground_Middle, 24, 6, Ground_Right, 23, 6],
            [0, 2, Ground, 23, 9, Ground_Middle, 25, 1],
            [0, 2, Ground, 23, 9, Ground_Left, 25, 1, Ground_Middle, 25, 1, Ground_Right, 25, 1],
            [0, 2, Ground, 23, 12, Ground_Left, 24, 3, Ground_Middle, 25, 2, Ground_Right, 25, 2],
            [0, 2, Ground, 25, 6, Ground_Left, 24, 3, Ground_Middle, 24, 3, Ground_Right, 24, 3],
            [0, 100, Ground, 26, 3, Ground_Left, 23, 3, Ground_Middle, 25, 3, Ground_Right, 24, 3]
        ],
        [
            [0, 2, Ground_Middle, 27, 5, Ground_Right, 28, 1],
            [0, 2, Ground, 27, 5, Ground_Left, 28, 1, Ground_Middle, 28, 1, Ground_Right, 28, 1],
            [0, 2, Ground, 27, 5, Ground_Left, 29, 1, Ground_Middle, 29, 1, Ground_Right, 29, 1],
            [0, 2, Ground, 28, 5, Ground_Left, 29, 1, Ground_Middle, 29, 1, Ground_Right, 29, 1],
            [0, 2, Ground_Left, 27, 5, Ground_Middle, 28, 3, Ground_Right, 29,
                2
            ],
            [0, 2, Ground, 27, 9, Ground_Middle, 27, 9],
            [0, 2, Ground, 28, 5, Ground_Middle, 29, 5],
            [0, 100, Ground, 28, 5, Ground_Left, 29, 2, Ground_Middle, 30, 1, Ground_Right, 29, 2]
        ],
        [
            [0, 2, Ground_Middle, 32, 1, Ground_Right, 32, 2],
            [0, 2, Ground, 31, 3, Ground_Left, 32, 1, Ground_Middle, 32, 2, Ground_Right, 32, 2],
            [0, 2, Ground_Left, 31, 3, Ground_Middle, 32, 2, Ground_Right, 32, 3],
            [0, 2, Ground, 31, 5, Ground_Middle, 33, 2],
            [0, 2, Ground, 32, 8, Ground_Middle, 33, 1, Ground_Right, 33, 2],
            [0, 2, Ground_Left, 31, 5, Ground_Middle, 33, 4, Ground_Right, 33, 3],
            [0, 2, Ground, 31, 8, Ground_Left, 32, 2, Ground_Middle, 32, 3, Ground_Right, 33, 4],
            [0, 100, Ground_Left, 32, 3, Ground_Middle, 33, 3, Ground_Right, 34, 1]
        ],
        [
            [1, 1, Ground_Middle, 35, 10, Ground_Right, 36, 1],
            [1, 1, Ground_Left, 35, 1, Ground_Middle, 35, 15, Ground_Right, 36, 1],
            [1, 1, Ground, 35, 15, Ground_Left, 37, 1, Ground_Middle, 37, 1, Ground_Right, 37, 1],
            [1, 1, Ground, 35, 15, Ground_Left, 36, 1, Ground_Middle, 36, 1, Ground_Right, 36, 1],
            [1, 1, Ground, 37, 5, Ground_Left, 36, 2, Ground_Middle, 35, 10, Ground_Right, 36, 2],
            [1, 100, Ground, 36, 3, Ground_Middle, 38, 1]
        ],
        [
            [1, 100, Ground, 39, 0],
            [1, 100,
                Ground_Right, 39, 1
            ]
        ],
        [
            [2, 3, Ground_Middle, 41, 1, Ground, 42, 3],
            [2, 3, Ground_Middle, 41, 1, Ground_Middle, 42, 6],
            [2, 3, Ground_Middle, 41, 1, Ground_Right, 43, 6],
            [2, 3, Ground, 41, 2, Ground, 43, 5],
            [2, 3, Ground, 41, 3, Ground, 42, 9],
            [2, 3, Ground, 41, 3, Ground, 42, 9, Ground, 43, 6],
            [2, 100, Ground_Middle, 44, 1, Ground_Middle, 43, 6]
        ],
        [
            [2, 3, Ground_Middle, 45, 1, Ground, 46, 3],
            [2, 3, Ground_Middle, 45, 1, Air_Water, 46, 5],
            [2, 3, Ground_Middle, 45, 1, Ground, 47, 5],
            [2, 3, Ground, 45, 2, Ground, 47, 9],
            [2, 3, Air_Water, 45, 3, Air_Water, 46, 6],
            [2, 3, Air_Water, 45, 2, Air_Water, 46, 6, Ground, 47, 5],
            [2, 100, Ground_Right, 48, 1, Ground_Middle, 45, 2]
        ],
        [
            [2, 3, Ground, 49, 1, Ground, 50, 1],
            [2, 3, Ground, 49, 1, Ground, 51, 5],
            [2, 3, Ground, 50, 1, Ground, 51, 5],
            [2, 3, Ground, 49, 1, Ground, 50, 1, Ground, 51, 9],
            [2, 100, Ground_Middle, 52, 1, Ground_Middle, 49, 2, Ground_Middle, 50, 2]
        ],
        [
            [0, 4, Water, 53, 10, Water, 55, 5],
            [0, 4, Water, 53, 20, Water, 55, 5],
            [0, 4, Water, 53, 15, Ground, 54, 10],
            [0, 4, Water,
                55, 8, Ground, 54, 10
            ],
            [0, 4, Water, 53, 30, Water, 55, 5],
            [0, 4, Water, 53, 30, Ground, 54, 5],
            [0, 4, Water, 53, 20, Ground, 54, 5, Water, 55, 5],
            [0, 101, Water, 56, 1, Ground, 54, 5, Water, 55, 5]
        ],
        [
            [3, 1, Ground, 58, 3],
            [3, 1, Ground, 58, 4, Ground, 57, 5],
            [3, 1, Ground, 58, 5, Ground, 59, 5],
            [3, 1, Ground, 58, 5, Ground_Middle, 57, 5, Ground_Left, 59, 5],
            [3, 1, Ground_Middle, 57, 8, Ground_Right, 59, 8],
            [3, 1, Ground, 58, 15, Ground, 57, 1, Ground, 59, 1],
            [3, 1, Ground, 58, 6, Ground, 57, 6, Ground, 59, 6],
            [3, 100, Ground_Middle, 60, 3, Ground, 58, 10]
        ],
        [
            [3, 1, Ground, 62, 3, Ground, 61, 2],
            [3, 1, Ground, 62, 4, Ground, 63, 3],
            [3, 1, Ground, 62, 5, Air_Water, 61, 5],
            [3, 1, Ground, 62, 5, Air_Water, 63, 5],
            [3, 1, Air_Water, 61, 5, Air_Water, 63, 5],
            [3, 1, Ground, 62, 15, Air_Water, 61, 1, Air_Water, 63, 1],
            [3, 1, Ground, 62, 6, Air_Water, 61, 6, Air_Water, 63, 6],
            [3, 100, Ground_Middle, 64, 1, Ground, 62, 3, Air_Water, 61, 1, Air_Water, 63, 1]
        ],
        [
            [4, 5, Water, 69, 1, Ground,
                65, 5
            ],
            [4, 5, Water, 69, 1, Ground, 65, 5, Ground_Middle, 66, 5],
            [4, 5, Water, 69, 1, Ground, 65, 5, Ground_Right, 67, 5],
            [4, 5, Water, 69, 1, Ground_Middle, 66, 5, Ground_Middle, 65, 5],
            [4, 5, Water, 69, 1, Ground_Left, 66, 5, Ground_Middle, 65, 5, Ground_Right, 67, 5],
            [4, 5, Water, 69, 1, Ground, 66, 6, Ground, 65, 6, Ground, 67, 6],
            [4, 102, Ground_Middle, 68, 1]
        ],
        [
            [4, 5, Water, 74, 1, Ground, 70, 8],
            [4, 5, Water, 74, 1, Ground, 70, 8, Ground, 71, 5],
            [4, 5, Water, 74, 1, Ground, 70, 8, Ground, 72, 5],
            [4, 5, Water, 74, 1, Ground_Middle, 71, 8, Ground, 72, 5],
            [4, 5, Water, 74, 1, Ground_Left, 70, 6, Ground_Middle, 71, 6, Ground_Right, 72, 6],
            [4, 5, Water, 74, 1, Ground, 70, 8, Ground, 71, 8, Ground, 72, 8],
            [4, 102, Ground_Middle, 73, 1, Ground, 71, 8]
        ],
        [
            [4, 5, Water, 79, 1, Ground, 75, 5, Ground_Middle, 76, 1],
            [4, 5, Water, 79, 1, Ground, 75, 5, Ground, 77, 2],
            [4, 5, Water, 79, 1, Ground, 75, 5, Air_Water, 76, 5],
            [4, 5, Water, 79, 1, Ground_Middle, 75, 4, Ground_Middle, 76, 4, Ground_Middle, 77, 2],
            [4, 5, Water, 79, 1, Ground, 75, 5, Air_Water,
                76, 5, Ground, 77, 3
            ],
            [4, 102, Ground_Middle, 78, 2, Ground_Right, 78, 3, Ground_Middle, 77, 5, Ground_Right, 77, 10]
        ],
        [
            [0, 0, Ground, 80, 0],
            [0, 100, Ground, 80, 0]
        ],
        [
            [0, 6, Ground, 80, 10, Ground_Middle, 83, 2],
            [0, 6, Ground, 81, 10, Ground, 83, 5],
            [0, 6, Ground, 80, 12, Ground_Middle, 83, 3, Ground_Right, 82, 1],
            [0, 6, Ground, 83, 12, Ground, 81, 5, Ground_Middle, 82, 1],
            [0, 6, Ground_Left, 80, 8, Ground_Middle, 81, 8, Ground_Right, 83, 8, Ground, 82, 5],
            [0, 100, Ground_Right, 84, 1]
        ],
        [
            [0, 6, Ground, 85, 15, Ground_Middle, 86, 1],
            [0, 6, Ground, 85, 15, Ground_Middle, 86, 2, Air_Water, 87, 5, Air_Water, 88, 1],
            [0, 6, Air_Water, 87, 20, Air_Water, 88, 2],
            [0, 6, Ground, 85, 15, Ground_Middle, 86, 1, Air_Water, 87, 15, Air_Water, 88, 1],
            [0, 6, Ground, 85, 10, Ground_Middle, 86, 4, Air_Water, 87, 5, Air_Water, 88, 4],
            [0, 100, Ground_Right, 89, 1]
        ],
        [
            [0, 6, Ground_Middle, 92, 1, Ground_Middle, 92, 2],
            [0, 6, Ground_Middle, 90, 15, Ground_Middle, 92, 1],
            [0, 6, Ground, 91, 15, Ground_Middle, 91, 5, Ground_Middle, 92, 1],
            [0, 6, Air_Water, 91, 15, Ground_Middle, 92, 1],
            [0, 6, Ground_Middle, 90, 15, Air_Water,
                91, 10, Ground_Middle, 92, 1
            ],
            [0, 100, Ground_Right, 93, 1]
        ],
        [
            [0, 6, Ground_Middle, 94, 10, Ground_Right, 94, 10, Ground_Right, 96, 5],
            [0, 6, Air_Water, 95, 20, Ground, 96, 5],
            [0, 6, Ground, 94, 30, Air_Water, 95, 30, Ground, 96, 5],
            [0, 6, Ground_Middle, 94, 30, Air_Water, 95, 30, Ground_Middle, 96, 5],
            [0, 100, Ground_Middle, 97, 1, Ground_Middle, 96, 20]
        ],
        [
            [4, 4, Water, 99, 10, Water, 100, 1],
            [4, 4, Water, 98, 10, Water, 99, 10, Water, 100, 1],
            [4, 4, Ground_Left, 98, 10, Ground_Right, 98, 10, Water, 100, 1],
            [4, 4, Water, 99, 20, Water, 100, 5],
            [4, 4, Ground_Middle, 98, 10, Water, 98, 10, Water, 99, 5, Water, 100, 2],
            [4, 101, Water, 101, 1]
        ],
        [
            [4, 4, Ground, 102, 20, Water, 103, 3],
            [4, 4, Ground, 102, 30, Ground, 104, 3],
            [4, 4, Ground_Middle, 102, 20, Water, 103, 3, Ground_Right, 104, 3],
            [4, 4, Ground, 102, 20, Water, 103, 8, Ground_Right, 104, 5],
            [4, 101, Ground, 102, 50, Ground_Middle, 105, 1]
        ],
        [
            [4, 4, Water, 106, 10, Water, 107, 3],
            [4, 4, Water, 106, 20, Water, 108,
                2
            ],
            [4, 4, Water, 106, 20, Water, 107, 5, Water, 108, 1],
            [4, 4, Water, 106, 15, Water, 107, 10, Water, 108, 1],
            [4, 4, Water, 106, 35, Water, 108, 3],
            [4, 101, Water, 109, 5]
        ],
        [
            [4, 4, Water, 111, 10, Water, 112, 1],
            [4, 4, Water, 111, 20, Water, 112, 1],
            [4, 4, Water, 110, 30, Water, 112, 1],
            [4, 4, Water, 111, 20, Water, 112, 2],
            [4, 101, Water, 113, 1, Water, 112, 2, Water, 111, 10]
        ],
        [
            [1, 101, Water, 114, 0],
            [1, 101, Water, 114, 1]
        ],
        [
            [3, 2, Ground, 116, 5, Air_Water, 118, 3],
            [3, 2, Ground, 116, 12, Ground, 117, 12],
            [3, 2, Ground_Middle, 116, 10, Ground, 116, 5, Air_Water, 118, 5],
            [3, 2, Ground, 117, 12, Air_Water, 118, 8],
            [3, 2, Ground, 116, 10, Ground_Middle, 117, 10, Air_Water, 118, 5],
            [3, 100, Ground_Middle, 119, 1, Air_Water, 118, 3]
        ],
        [
            [3, 2, Ground_Right, 122, 1, Ground, 120, 5],
            [3, 2, Ground_Right, 122, 3, Ground, 120, 10],
            [3, 2, Ground_Right, 122, 5, Ground, 121, 10, Ground_Right, 120, 10],
            [3, 100, Ground_Middle, 123, 1, Ground, 120, 10]
        ],
        [
            [3, 3, Ground, 124, 20],
            [3, 3, Ground, 125, 20],
            [3, 3, Ground, 126, 20],
            [3, 2, Ground, 124, 10, Ground, 125, 5, Ground, 126, 5],
            [3, 2, Ground_Right, 124, 10, Ground, 125, 10, Ground_Middle, 126, 5],
            [3, 3, Ground_Middle, 124, 30],
            [3, 100, Ground_Middle, 127, 1]
        ],
        [
            [3, 1, Ground, 128, 10],
            [3, 1, Ground, 128, 50],
            [3, 100, Ground, 128, 99, Ground, 129, 1]
        ],
        [
            [5, 7, Ground, 130, 10, Ground, 132, 1],
            [5, 7, Ground, 130, 15, Ground, 131, 15, Ground_Right, 132, 2],
            [5, 7, Ground, 131, 30, Ground, 132, 2],
            [5, 7, Ground_Middle, 130, 30, Ground_Right, 132, 3],
            [5, 7, Ground, 130, 20, Ground_Middle, 131, 20, Ground, 132, 3],
            [5, 100, Ground_Middle, 133, 1, Ground_Right, 132, 5]
        ],
        [
            [5, 7, Ground, 134, 10, Air_Water, 135, 1],
            [5, 7, Ground, 134, 30, Ground_Middle, 136, 5, Air_Water, 135, 3],
            [5, 7, Air_Water, 134, 10, Ground, 136, 10, Air_Water, 135, 2],
            [5, 7, Ground_Middle, 134, 10, Ground_Middle, 136, 5, Air_Water, 135, 4],
            [5, 7, Air_Water, 134, 30, Ground_Middle, 136, 5, Air_Water, 135, 3],
            [5, 100, Ground_Middle, 137, 1, Ground_Middle, 135, 2]
        ],
        [
            [5, 7, Ground_Left, 138, 5, Ground_Middle, 139, 5, Ground_Right, 140, 1],
            [5, 7, Ground_Middle, 139, 10, Ground_Right, 138, 10, Ground, 140, 2],
            [5, 7, Ground, 138, 25, Ground_Middle, 140, 3],
            [5, 7, Ground, 139, 25, Ground_Middle, 140, 3],
            [5, 7, Ground_Left, 138, 15, Ground_Middle, 140, 3, Ground_Right, 139, 15],
            [5, 7, Ground_Middle, 139, 20, Ground, 140, 5],
            [5, 100, Ground, 141, 5, Ground, 138, 30]
        ],
        [
            [5, 7, Ground, 143, 10, Ground_Middle, 142, 3],
            [5, 7, Ground, 143, 15, Ground_Middle, 142, 3, Ground_Middle, 144, 3],
            [5, 7, Ground_Middle, 143, 1, Air_Water, 142, 20, Ground_Middle, 144, 5],
            [5, 7, Ground_Middle, 143, 1, Air_Water, 142, 10, Ground, 144, 15],
            [5, 7, Ground_Left, 143, 10, Air_Water, 142, 10, Ground_Middle, 144, 10],
            [5, 100, Ground_Middle, 145, 1, Ground, 143, 8]
        ],
        [
            [5, 7, Ground_Middle, 146, 1, Ground_Right, 147, 1, Water, 148, 1],
            [5, 7, Ground, 146, 3, Water, 148, 2],
            [5, 7, Ground, 147, 3, Water, 148, 3],
            [5, 7,
                Ground, 146, 2, Ground, 147, 2, Water, 148, 3
            ],
            [5, 7, Ground_Middle, 146, 1, Ground_Middle, 147, 1, Water, 148, 30],
            [5, 100, Ground_Middle, 149, 25, Ground_Right, 149, 25]
        ],
        [
            [5, 4, Water, 150, 10, Ground_Middle, 151, 10],
            [5, 4, Water, 151, 10, Ground_Middle, 152, 10],
            [5, 4, Water, 152, 10, Ground_Middle, 150, 10],
            [5, 4, Ground_Left, 150, 10, Ground_Middle, 151, 10, Ground_Right, 152, 10],
            [5, 4, Water, 150, 10, Water, 151, 10, Water, 152, 10],
            [5, 101, Water, 153, 1]
        ],
        [
            [5, 7, Ground, 154, 3, Air_Water, 155, 2, Ground_Right, 156, 1],
            [5, 7, Ground, 154, 15, Ground_Middle, 154, 10, Ground_Middle, 156, 1],
            [5, 7, Air_Water, 155, 20, Ground_Middle, 156, 1],
            [5, 7, Ground, 154, 15, Air_Water, 155, 15, Ground, 156, 2],
            [5, 7, Ground_Left, 154, 15, Air_Water, 155, 15, Ground, 156, 2],
            [5, 100, Ground_Middle, 157, 1]
        ],
        [
            [5, 7, Ground_Left, 158, 10, Ground_Middle, 160, 1, Ground_Right, 158, 10],
            [5, 7, Air_Water, 159, 20, Ground_Middle, 160, 2],
            [5, 7, Ground_Left, 158, 10, Air_Water, 159, 20, Ground, 160, 3],
            [5, 7, Ground_Middle,
                159, 20, Ground_Middle, 160, 5
            ],
            [5, 100, Ground_Middle, 161, 1, Ground, 160, 5]
        ],
        [
            [5, 102, Ground_Middle, 162, 0],
            [5, 102, Ground_Middle, 162, 1]
        ],
        [
            [5, 2, Ground_Left, 164, 10, Ground_Right, 165, 1],
            [5, 2, Ground, 165, 2],
            [5, 2, Ground, 164, 30, Ground, 166, 3],
            [5, 2, Ground_Left, 164, 10, Ground_Right, 165, 1, Ground, 166, 3],
            [5, 100, Ground_Middle, 167, 1, Ground_Right, 165, 1]
        ],
        [
            [5, 8, Ground, 168, 15, Air_Water, 169, 3],
            [5, 8, Ground, 168, 20, Water, 170, 1],
            [5, 8, Ground, 168, 20, Air_Water, 169, 5, Water, 170, 2],
            [5, 8, Air_Water, 169, 30, Water, 170, 2],
            [5, 8, Ground, 168, 10, Air_Water, 169, 5, Water, 170, 3],
            [5, 101, Ground_Middle, 171, 1, Water, 170, 3]
        ],
        [
            [5, 8, Air_Water, 172, 5, Air_Water, 173, 5, Air_Water, 174, 1],
            [5, 8, Air_Water, 172, 20, Air_Water, 174, 3],
            [5, 8, Air_Water, 173, 20, Air_Water, 174, 3],
            [5, 8, Air_Water, 172, 10, Air_Water, 173, 10, Air_Water, 174, 3],
            [5, 8, Air_Water, 173, 3, Air_Water, 173, 3, Air_Water, 174, 15],
            [5, 101, Air_Water, 175,
                10
            ]
        ],
        [
            [5, 8, Water, 177, 10, Ground, 178, 10],
            [5, 8, Ground_Middle, 176, 1, Water, 177, 10],
            [5, 8, Ground_Middle, 176, 1, Ground, 178, 10],
            [5, 8, Ground_Middle, 176, 1, Water, 177, 10, Ground, 178, 10],
            [5, 101, Ground_Middle, 176, 2, Water, 179, 1]
        ],
        [
            [0, 0, Ground, 180, 0],
            [0, 100, Ground, 180, 0]
        ],
        [
            [4, 9, Ground, 180, 20, Water, 184, 1],
            [4, 9, Ground, 180, 30, Ground, 181, 3, Water, 184, 2],
            [4, 9, Ground, 180, 40, Ground, 182, 3, Water, 184, 3],
            [4, 9, Ground, 180, 50, Ground, 181, 3, Ground, 182, 3],
            [4, 9, Ground, 180, 60, Water, 184, 10],
            [4, 103, Ground_Middle, 183, 1, Ground, 180, 20]
        ],
        [
            [4, 9, Ground, 185, 30, Ground_Middle, 186, 3],
            [4, 9, Ground, 185, 40, Ground, 186, 10, Ground_Right, 187, 1],
            [4, 9, Ground, 185, 40, Ground_Middle, 186, 20, Ground_Middle, 187, 1],
            [4, 9, Ground, 185, 70, Ground_Middle, 187, 1, Ground_Right, 187, 1],
            [4, 9, Ground, 185, 40, Water, 189, 1],
            [4, 103, Ground_Right, 188, 1, Ground, 186, 5]
        ],
        [
            [4,
                9, Ground, 190, 80, Water, 194, 1
            ],
            [4, 9, Ground, 191, 80, Water, 194, 1],
            [4, 9, Ground, 192, 80, Water, 194, 1],
            [4, 103, Ground_Middle, 193, 1]
        ],
        [
            [7, 3, Ground_Right, 195, 30, Ground_Middle, 196, 1],
            [7, 3, Ground_Right, 195, 30, Ground_Middle, 197, 3],
            [7, 3, Ground, 195, 50, Ground_Middle, 196, 3, Ground_Middle, 197, 3],
            [7, 3, Ground_Right, 195, 50, Ground_Middle, 196, 3, Ground_Middle, 197, 3],
            [7, 100, Ground_Middle, 198, 1, Ground_Middle, 197, 3]
        ],
        [
            [7, 3, Ground, 199, 30, Ground_Middle, 200, 2],
            [7, 3, Ground, 199, 40, Ground_Middle, 201, 2],
            [7, 3, Ground_Middle, 200, 20, Ground_Middle, 201, 2],
            [7, 3, Ground, 199, 20, Ground_Middle, 200, 10, Ground_Right, 201, 2],
            [7, 3, Ground, 201, 5],
            [7, 100, Ground_Middle, 202, 1, Ground, 199, 90]
        ],
        [
            [3, 10, Ground, 203, 30, Ground_Middle, 205, 1],
            [3, 10, Ground, 204, 30, Ground_Middle, 205, 1],
            [3, 10, Ground, 205, 5],
            [3, 10, Ground, 203, 20, Ground_Middle, 204, 20, Ground, 205, 1],
            [3, 100, Ground_Middle, 206, 1, Ground_Left, 203, 5, Ground_Right, 204, 5]
        ],
        [
            [4, 10, Air_Water, 207,
                30, Ground_Right, 208, 30
            ],
            [4, 10, Air_Water, 207, 50, Ground_Middle, 208, 10, Ground_Right, 209, 1],
            [4, 10, Air_Water, 207, 10, Ground, 208, 50, Ground_Right, 209, 1],
            [4, 10, Air_Water, 207, 10, Ground, 208, 10, Ground, 209, 3],
            [4, 100, Ground_Middle, 210, 1, Air_Water, 207, 10, Ground, 208, 10]
        ],
        [
            [0, 1, Ground_Middle, 4, 1, Ground_Left, 8, 1, Air_Water, 13, 1, Air_Water, 18, 1, Ground_Left, 22, 1, Ground_Middle, 26, 1, Ground_Middle, 30, 1, Ground_Right, 34, 1],
            [2, 10, Ground_Middle, 44, 1, Air_Water, 48, 1, Ground_Middle, 52, 1, Ground_Middle, 38, 1],
            [3, 10, Ground_Middle, 60, 1, Ground_Middle, 64, 1, Ground_Right, 68, 1, Air_Water, 73, 1, Ground_Left, 78, 1],
            [0, 8, Ground_Middle, 84, 1, Ground_Middle, 89, 1, Air_Water, 93, 1, Ground_Middle, 97, 1],
            [4, 101, Water, 56, 1, Water, 101, 1, Ground_Middle, 105, 1, Water, 109, 1, Water, 113, 1, Water, 153, 1],
            [3, 1, Ground_Left, 119, 1, Ground_Right, 123, 1, Ground_Middle, 127, 1],
            [5, 1, Ground_Middle, 133, 1, Ground_Middle, 137, 1, Ground, 141, 1, Ground_Right, 145, 1, Ground_Left, 149, 1, Ground_Right, 157, 1, Ground_Left, 161, 1, Ground_Middle, 167, 1],
            [5, 8, Ground_Middle, 171, 1, Air_Water, 175, 1, Water, 179,
                1
            ],
            [4, 103, Air_Water, 183, 1, Ground_Middle, 188, 1, Ground_Middle, 193, 1],
            [1, 100, Air_Water, 211, 1, Air_Water, 212, 1, Air_Water, 213, 1, Air_Water, 214, 1]
        ],
        [
            [7, 3, Ground_Left, 215, 3, Ground_Right, 216, 3, Ground_Middle, 217, 3],
            [7, 3, Air_Water, 215, 80, Ground, 217, 1],
            [7, 3, Ground, 216, 80, Ground, 217, 1],
            [7, 3, Air_Water, 215, 40, Ground, 216, 40, Ground, 217, 2],
            [7, 100, Ground_Middle, 218, 1, Ground_Right, 217, 1]
        ],
        [
            [7, 3, Ground_Left, 219, 1, Ground_Middle, 220, 1, Ground_Right, 219, 1],
            [7, 3, Ground_Left, 221, 1, Ground_Middle, 220, 1, Ground_Right, 221, 1],
            [7, 3, Ground, 221, 3, Ground_Middle, 219, 1],
            [7, 3, Ground_Middle, 219, 1, Ground, 220, 3, Ground_Middle, 221, 1],
            [7, 100, Ground_Left, 221, 1, Ground_Middle, 220, 1, Ground_Right, 219, 1, Ground_Middle, 222, 1]
        ],
        [
            [7, 1, Air_Water, 223, 50, Ground_Middle, 225, 1],
            [7, 1, Air_Water, 224, 50, Ground_Middle, 225, 1],
            [7, 1, Air_Water, 223, 20, Air_Water, 224, 20, Ground, 225, 2],
            [7, 100, Ground_Middle, 226, 1]
        ],
        [
            [7, 1, Ground_Middle, 227, 30],
            [7, 1, Ground_Middle, 229, 15, Ground_Right, 227, 30],
            [7,
                1, Ground, 228, 50
            ],
            [7, 1, Ground, 228, 30, Ground_Middle, 227, 30],
            [7, 1, Ground, 228, 10, Ground_Middle, 229, 30, Ground_Right, 227, 10],
            [7, 100, Ground_Right, 230, 30]
        ],
        [
            [7, 1, Ground_Middle, 232, 1, Ground, 231, 5],
            [7, 1, Ground_Middle, 232, 1, Ground, 231, 50],
            [7, 1, Ground_Middle, 232, 2, Ground, 231, 15],
            [7, 100, Ground_Middle, 234, 1, Ground, 233, 99]
        ],
        [
            [7, 1, Ground, 235, 50, Ground_Middle, 237, 1],
            [7, 1, Ground, 236, 50, Ground_Middle, 237, 1],
            [7, 1, Ground_Left, 237, 1, Ground_Middle, 237, 1, Ground_Right, 237, 1],
            [7, 1, Ground_Middle, 235, 30, Ground_Middle, 236, 30, Ground_Right, 237, 1],
            [7, 100, Ground_Left, 238, 1, Ground_Middle, 238, 1, Ground_Right, 238, 1]
        ],
        [
            [8, 100, Air_Water, 239, 5, Ground, 241, 3],
            [8, 100, Ground, 240, 2, Ground, 241, 5],
            [8, 100, Air_Water, 239, 5, Ground_Middle, 240, 5],
            [8, 100, Air_Water, 239, 5, Ground_Right, 240, 1, Ground, 241, 5],
            [8, 100, Ground_Middle, 242, 1]
        ],
        [
            [7, 102, Ground_Middle, 243, 0],
            [7, 102, Ground_Middle, 243, 1]
        ],
        [
            [7, 6, Ground, 247, 30],
            [7, 6,
                Ground_Left, 245, 20, Ground_Middle, 247, 20
            ],
            [7, 6, Ground, 245, 20, Air_Water, 246, 30],
            [7, 6, Ground, 245, 20, Air_Water, 246, 20, Ground_Right, 247, 20],
            [7, 100, Ground_Middle, 248, 1]
        ],
        [
            [7, 8, Water, 249, 30, Ground_Right, 251, 1],
            [7, 8, Water, 249, 50, Ground_Right, 251, 3],
            [7, 8, Ground, 250, 40, Ground_Right, 251, 1],
            [7, 8, Water, 249, 30, Ground_Middle, 250, 30, Ground_Right, 251, 2],
            [7, 101, Water, 252, 1, Water, 251, 3]
        ],
        [
            [9, 1, Ground_Middle, 253, 30, Air_Water, 255, 1],
            [9, 1, Ground, 254, 30, Air_Water, 255, 1],
            [9, 1, Ground_Middle, 253, 20, Ground, 254, 20, Air_Water, 255, 1],
            [9, 1, Ground_Left, 253, 10, Ground, 254, 10, Air_Water, 255, 3],
            [9, 100, Air_Water, 256, 1, Air_Water, 255, 1]
        ],
        [
            [9, 1, Ground_Middle, 258, 1],
            [9, 1, Ground, 258, 10],
            [9, 100, Ground_Middle, 259, 1]
        ],
        [
            [9, 1, Ground, 262, 30, Ground_Middle, 260, 30],
            [9, 1, Ground, 260, 30, Ground_Middle, 261, 30],
            [9, 1, Ground, 262, 30, Ground_Middle, 261, 30],
            [9, 100, Ground_Middle, 263, 1, Ground_Right, 260, 2, Ground_Right,
                261, 2, Ground_Right, 262, 2
            ]
        ],
        [
            [9, 1, Ground_Middle, 264, 1, Air_Water, 265, 80],
            [9, 1, Ground_Middle, 264, 1, Ground, 266, 80],
            [9, 1, Ground_Middle, 264, 1, Air_Water, 265, 40, Ground, 266, 40],
            [9, 100, Ground_Middle, 267, 1, Ground_Right, 264, 1]
        ],
        [
            [9, 0, Ground, 268, 0],
            [9, 100, Ground, 268, 0]
        ],
        [
            [4, 101, Air_Water, 268, 30],
            [4, 101, Air_Water, 268, 60],
            [4, 101, Air_Water, 268, 99, Air_Water, 269, 1]
        ],
        [
            [10, 1, Ground_Middle, 270, 20, Ground_Right, 271, 1],
            [10, 1, Ground, 270, 40, Ground_Middle, 271, 1, Ground_Right, 271, 1],
            [10, 1, Ground, 270, 40, Ground_Middle, 271, 1, Ground_Right, 272, 1],
            [10, 1, Ground, 270, 40, Ground_Middle, 272, 1, Ground_Right, 272, 1],
            [10, 1, Ground, 270, 10, Ground, 271, 3, Ground, 272, 3],
            [10, 1, Ground_Middle, 270, 60],
            [10, 100, Ground_Middle, 273, 1, Ground, 270, 30]
        ],
        [
            [10, 11, Air_Water, 274, 50, Ground_Middle, 276, 1],
            [10, 11, Air_Water, 274, 50, Ground_Middle, 275, 1],
            [10, 11, Ground, 274, 50, Ground_Right, 276, 1, Ground_Middle, 275, 1],
            [10, 11, Ground,
                274, 50, Ground, 275, 2
            ],
            [10, 11, Ground, 274, 50, Ground_Left, 276, 1, Ground_Right, 276, 1],
            [10, 100, Ground_Middle, 274, 50, Ground_Middle, 277, 1]
        ],
        [
            [10, 11, Ground_Middle, 279, 1, Ground_Left, 278, 10, Ground_Right, 280, 10],
            [10, 11, Ground, 279, 2, Ground, 278, 40],
            [10, 11, Ground, 279, 2, Ground, 280, 60],
            [10, 11, Ground, 279, 2, Ground, 278, 30, Ground, 280, 20],
            [10, 100, Ground_Left, 279, 1, Ground_Right, 279, 1, Ground_Middle, 281, 1]
        ],
        [
            [10, 10, Ground_Middle, 282, 10, Ground_Right, 282, 10],
            [10, 10, Ground, 283, 30, Ground_Middle, 282, 10],
            [10, 10, Ground, 282, 30, Ground, 284, 5],
            [10, 10, Ground, 283, 30, Ground, 284, 5],
            [10, 10, Ground, 284, 10, Ground_Middle, 282, 5, Ground_Right, 283, 5],
            [10, 100, Ground_Middle, 285, 1, Ground_Left, 282, 3, Ground_Middle, 284, 3, Ground_Right, 283, 3]
        ],
        [
            [10, 1, Ground_Left, 286, 1, Ground_Middle, 286, 1, Ground_Right, 286, 2],
            [10, 1, Ground_Left, 287, 1, Ground_Middle, 287, 1, Ground_Right, 287, 2],
            [10, 1, Ground_Left, 288, 1, Ground_Middle, 288, 1, Ground_Right, 288, 2],
            [10, 1, Ground, 286, 3, Ground, 287, 3],
            [10, 1, Ground, 287, 3, Ground, 288, 2],
            [10, 1, Ground, 288, 3, Ground, 286, 3],
            [10, 100, Ground_Left, 286, 1, Ground_Middle, 287, 1, Ground_Right, 288, 1, Ground, 289, 5]
        ],
        [
            [0, 0, Ground, 290, 0],
            [0, 100, Ground, 290, 0]
        ],
        [
            [10, 1, Air_Water, 290, 60, Ground_Middle, 291, 5],
            [10, 1, Air_Water, 290, 60, Ground_Middle, 292, 2],
            [10, 1, Air_Water, 291, 60, Ground_Middle, 292, 2],
            [10, 1, Air_Water, 292, 10, Air_Water, 290, 2, Air_Water, 291, 2],
            [10, 100, Ground_Middle, 293, 1, Air_Water, 290, 1, Air_Water, 291, 1, Air_Water, 292, 1]
        ],
        [
            [11, 10, Ground, 294, 30, Ground_Middle, 296, 1],
            [11, 10, Ground, 295, 30, Ground_Middle, 296, 1],
            [11, 10, Ground_Middle, 296, 1, Ground_Right, 296, 1],
            [11, 10, Ground_Middle, 294, 50, Ground_Right, 295, 50],
            [11, 10, Ground_Left, 294, 20, Ground_Middle, 295, 20, Ground_Right, 296, 1],
            [11, 100, Ground_Middle, 297, 1]
        ],
        [
            [11, 1, Ground_Middle_Clump, 298, 100],
            [11, 1, Ground_Middle_Clump, 299, 100],
            [11, 1, Ground_Middle_Clump, 300, 100],
            [11,
                100, Ground_Left_Clump, 298, 20, Ground_Middle_Clump, 300, 20, Ground_Right_Clump, 299, 20, Ground_Right, 301, 1
            ]
        ],
        [
            [11, 1, Ground_Right, 302, 20, Ground_Middle_Clump, 302, 20],
            [11, 1, Ground, 303, 40],
            [11, 1, Ground_Right, 304, 20, Ground_Middle_Clump, 304, 20],
            [11, 1, Ground_Left, 302, 15, Ground_Middle, 304, 15, Ground_Right, 303, 15],
            [11, 100, Ground_Middle, 305, 1]
        ],
        [
            [11, 4, Water, 306, 10, Ground_Middle, 307, 5],
            [11, 4, Water, 306, 30, Air, 308, 10],
            [11, 4, Ground, 307, 20, Air, 308, 10],
            [11, 4, Water, 306, 10, Ground_Middle, 307, 5, Air, 308, 40],
            [11, 4, Water, 306, 30, Ground_Middle, 307, 10, Air, 308, 5],
            [11, 101, Ground_Middle, 309, 1, Air, 308, 10]
        ],
        [
            [11, 9, Ground_Middle, 310, 10, Ceiling_Middle, 311, 10, Water, 314, 1],
            [11, 9, Ground, 310, 30, Ceiling_Middle, 311, 10, Ground_Middle, 312, 1, Water, 314, 1],
            [11, 9, Ground_Middle, 310, 10, Ceiling, 311, 30, Ground_Middle, 312, 1, Water, 314, 1],
            [11, 9, Ground, 310, 30, Ceiling, 311, 30, Ground, 312, 2, Water, 314, 1],
            [11,
                103, Ground, 312, 2, Ground_Middle, 313, 1
            ]
        ],
        [
            [11, 9, Ground_Middle, 315, 10, Ceiling_Middle, 316, 10, Water, 319, 1],
            [11, 9, Ground, 315, 30, Ceiling_Middle, 316, 10, Ground_Middle, 317, 1, Water, 319, 1],
            [11, 9, Ground_Middle, 315, 20, Ceiling, 316, 20, Ground_Middle, 317, 1, Water, 319, 1],
            [11, 9, Ground, 315, 40, Ceiling, 316, 15, Ground, 317, 2, Water, 319, 1],
            [11, 103, Ground_Middle, 318, 1]
        ],
        [
            [10, 1, Ground_Middle, 320, 50, Ground_Right, 320, 50],
            [10, 1, Ground_Right, 321, 5, Ground, 320, 20],
            [10, 1, Air_Water, 322, 3, Ground, 320, 20],
            [10, 1, Air_Water, 322, 2, Air_Water, 321, 3, Ground, 320, 20],
            [10, 100, Air_Water, 323, 1, Air_Water, 322, 1, Ground_Middle, 321, 1, Ground_Middle, 320, 1]
        ],
        [
            [10, 11, Ground, 324, 10],
            [10, 11, Ground, 324, 50, Air_Water, 325, 1],
            [10, 11, Ground, 324, 50, Air_Water, 326, 1],
            [10, 11, Ground, 324, 50, Air_Water, 325, 1, Air_Water, 326, 1],
            [10, 100, Ground, 324, 50, Ground_Right, 327, 1]
        ],
        [
            [1, 1, Ground_Middle, 328, 10, Ground_Right, 329, 1],
            [1, 1, Ground_Left, 328, 1, Ground_Middle, 328, 15, Ground_Right, 329, 1],
            [1, 1, Ground, 328, 15, Ground_Left, 330, 1, Ground_Middle, 330, 1, Ground_Right, 330, 1],
            [1, 1, Ground, 328, 15, Ground_Left, 329, 1, Ground_Middle, 329, 1, Ground_Right, 329, 1],
            [1, 1, Ground, 330, 5, Ground_Left, 329, 2, Ground_Middle, 328, 10, Ground_Right, 329, 2],
            [1, 100, Ground_Middle, 331, 1, Ground, 329, 3]
        ],
        [
            [12, 100, Ground_Middle, 332, 0],
            [12, 100, Ground_Middle, 332, 1]
        ],
        [
            [7, 100, Ground_Middle, 198, 1, Ground_Middle, 202, 1, Ground_Middle, 218, 1, Ground_Middle, 222, 1],
            [7, 100, Ground_Middle, 234, 1, Ground_Middle, 238, 1, Ground_Middle, 226, 1, Ground_Right, 230, 1],
            [4, 100, Ground_Middle, 206, 1, Air_Water, 210, 1],
            [8, 100, Ground_Middle, 242, 1, Ground_Middle, 248, 1],
            [9, 100, Ground_Middle, 267, 1, Air_Water, 256, 1],
            [9, 100, Ground_Middle, 259, 1, Ground_Middle, 263, 1],
            [10, 100, Ground_Middle, 273, 1, Ground_Right, 277, 1, Ground_Middle, 281, 1],
            [10, 100, Ground_Middle, 285, 1, Ground, 289, 1, Ground_Middle, 293, 1],
            [11, 100, Ground_Middle, 297, 1, Ground_Right, 301, 1, Ground_Middle, 305, 1],
            [11, 101, Water, 252, 1,
                Water, 309, 1
            ],
            [11, 103, Ground_Middle, 313, 1, Ground_Middle, 318, 1],
            [1, 100, Ground_Left, 323, 1, Ground_Middle, 327, 1, Ground_Right, 331, 1],
            [12, 100, Air_Water, 338, 100]
        ],
        []
    ],
    Projectiles = new SR_Projectile;

function SR_Projectile() {
    var a;
    this.g = new Int32Array(1E3);
    this.b = Array(1E3);
    this.c = Array(1E3);
    this.u = new Int32Array(1E3);
    this.ia = new Int32Array(1E3);
    this.ka = new Int32Array(1E3);
    this.v = new Int32Array(1E3);
    this.la = new Int32Array(1E3);
    this.ga = new Int32Array(1E3);
    this.ha = new Int32Array(1E3);
    this.F = new Int32Array(1E3);
    this.G = new Int32Array(1E3);
    this.C = new Int32Array(1E3);
    this.I = new Int32Array(1E3);
    this.h = new Int32Array(1E3);
    this.D = new Int32Array(1E3);
    this.ja = new Int32Array(1E3);
    this.m = new Int32Array(1E3);
    this.K = new Int32Array(1E3);
    this.s = new Int32Array(1E3);
    this.J = new Int32Array(1E3);
    this.H = new Int32Array(1E3);
    this.B = new Int32Array(1E3);
    this.w = new Int32Array(1E3);
    this.A = new Int32Array(1E3);
    this.i = new Int32Array(1E3);
    this.j = new Int32Array(1E3);
    this.sub = new Int32Array(1E3);
    this.U = new Int32Array(1E3);
    this.ea = new Int32Array(1E3);
    this.R = new Int32Array(1E3);
    this.L = new Int32Array(1E3);
    this.$ = new Int32Array(1E3);
    this.ca = new Int32Array(1E3);
    this.Y = new Int32Array(1E3);
    this.Z = new Int32Array(1E3);
    this.T = new Int32Array(1E3);
    this.aa = new Int32Array(1E3);
    this.S = new Int32Array(1E3);
    this.V = new Int32Array(1E3);
    this.W = new Int32Array(1E3);
    this.fa = new Int32Array(1E3);
    this.ba = new Int32Array(1E3);
    this.X = new Int32Array(1E3);
    this.da = new Int32Array(1E3);
    this.M = new Int32Array(1E3);
    this.N = new Int32Array(1E3);
    this.f = new Int32Array(1E3);
    this.O = new Int32Array(1E3);
    this.P = new Int32Array(1E3);
    for (a = this.a = 0; 1E3 > a; a++) this.b[a] = new Vector2D;
    for (a = 0; 1E3 > a; a++) this.c[a] = new Vector2D
}
SR_Projectile.prototype.o = function() {
    this.a = 0
};
SR_Projectile.prototype.add = function(a, b, c, d, e, g, h, q, m, l, A, z, Z, B, S, ia, za, ta, X, T, Y, Ua, eb, Va, ua, pa, Ha, rb, Aa, ka, ab, Pa, Wa, Ca, yb, Hb, Ib, Jb, Kb, Lb, Mb, Nb, Ob, Pb, Qb, sb, Rb, Sb, Tb, Ub, Vb) {
    1E3 != this.a && (this.g[this.a] = a, assignVector2D(this.b[this.a], b, c), assignVector2D(this.c[this.a], d, e), this.u[this.a] = 0, this.ia[this.a] = g, this.ka[this.a] = h, this.v[this.a] = q, this.la[this.a] = m, this.ga[this.a] = l, this.ha[this.a] = A, this.F[this.a] = z, this.G[this.a] = Z, this.C[this.a] = floor(random(B)), this.I[this.a] = S, this.h[this.a] = ia, this.D[this.a] = za, this.ja[this.a] = ta, this.m[this.a] = X, this.K[this.a] = T, this.s[this.a] = Y, this.J[this.a] = Ua, this.H[this.a] = eb, this.B[this.a] = Va, this.w[this.a] = ua, this.A[this.a] = pa, this.i[this.a] = Ha, this.j[this.a] = rb, this.sub[this.a] = Aa, this.U[this.a] = ka, this.ea[this.a] = ab, this.R[this.a] = Pa, this.L[this.a] = Wa, this.$[this.a] = Ca, this.ca[this.a] = yb, this.Y[this.a] = Hb, this.Z[this.a] = Ib, this.T[this.a] = Jb, this.aa[this.a] = Kb, this.S[this.a] = Lb, this.V[this.a] = Mb, this.W[this.a] = Nb, this.fa[this.a] = Ob, this.ba[this.a] = Pb, this.X[this.a] = Qb, this.da[this.a] = sb, this.M[this.a] = Rb, this.N[this.a] = Sb, this.f[this.a] = Tb, this.O[this.a] = Ub, this.P[this.a] = Vb, this.a++)
};

function PJsub(a, b) {
    a.g[b] = a.g[a.a - 1];
    a.b[b].set(a.b[a.a - 1]);
    a.c[b].set(a.c[a.a - 1]);
    a.u[b] = a.u[a.a - 1];
    a.ia[b] = a.ia[a.a - 1];
    a.ka[b] = a.ka[a.a - 1];
    a.v[b] = a.v[a.a - 1];
    a.la[b] = a.la[a.a - 1];
    a.ga[b] = a.ga[a.a - 1];
    a.ha[b] = a.ha[a.a - 1];
    a.F[b] = a.F[a.a - 1];
    a.G[b] = a.G[a.a - 1];
    a.C[b] = a.C[a.a - 1];
    a.I[b] = a.I[a.a - 1];
    a.h[b] = a.h[a.a - 1];
    a.D[b] = a.D[a.a - 1];
    a.ja[b] = a.ja[a.a - 1];
    a.m[b] = a.m[a.a - 1];
    a.K[b] = a.K[a.a - 1];
    a.s[b] = a.s[a.a - 1];
    a.J[b] = a.J[a.a - 1];
    a.H[b] = a.H[a.a - 1];
    a.B[b] = a.B[a.a - 1];
    a.w[b] = a.w[a.a - 1];
    a.A[b] = a.A[a.a - 1];
    a.i[b] = a.i[a.a - 1];
    a.j[b] = a.j[a.a - 1];
    a.sub[b] = a.sub[a.a - 1];
    a.U[b] = a.U[a.a - 1];
    a.ea[b] = a.ea[a.a - 1];
    a.R[b] = a.R[a.a - 1];
    a.L[b] = a.L[a.a - 1];
    a.$[b] = a.$[a.a - 1];
    a.ca[b] = a.ca[a.a - 1];
    a.Y[b] = a.Y[a.a - 1];
    a.Z[b] = a.Z[a.a - 1];
    a.T[b] = a.T[a.a - 1];
    a.aa[b] = a.aa[a.a - 1];
    a.S[b] = a.S[a.a - 1];
    a.V[b] = a.V[a.a - 1];
    a.W[b] = a.W[a.a - 1];
    a.fa[b] = a.fa[a.a - 1];
    a.ba[b] = a.ba[a.a - 1];
    a.X[b] = a.X[a.a - 1];
    a.da[b] = a.da[a.a - 1];
    a.M[b] = a.M[a.a - 1];
    a.N[b] = a.N[a.a - 1];
    a.f[b] = a.f[a.a - 1];
    a.O[b] = a.O[a.a - 1];
    a.P[b] = a.P[a.a - 1];
    a.a--
}

function PJmain() {
    var a = Projectiles,
        b, c, d = new Vector2D,
        e, g;
    for (b = 0; b < a.a; b++)
        if (-64 > a.b[b].x || 576 < a.b[b].x) PJsub(a, b--);
        else if (0 < a.C[b]) a.C[b]--;
    else if (1 == a.u[b]) a.h[b]++, a.h[b] >= a.D[b] && PJsub(a, b--);
    else {
        0 < a.J[b] && (e = a.J[b], e = 1 != Game_Mode ? a.g[b] ? PLfindPlayer(a.b[b].x - e, a.b[b].y - e, a.b[b].x + e, a.b[b].y + e, 0) : ENfindEnemy(a.b[b].x - e, a.b[b].y - e, a.b[b].x + e, a.b[b].y + e) : PLfindPlayer(a.b[b].x - e, a.b[b].y - e, a.b[b].x + e, a.b[b].y + e, 1 - a.g[b] << 2), -1 != e && (1 != Game_Mode ? a.g[b] ? Vdistance(d, Players.a[e][0], a.b[b]) : Vdistance(d, Enemies.a[e][0], a.b[b]) : Vdistance(d, Players.a[e][0], a.b[b]), normalize(d), e = magnitudeOf(a.c[b]), a.c[b].x = .85 * a.c[b].x + .15 * d.x + randomRange(-.1, .1), a.c[b].y = .85 * a.c[b].y + .15 * d.y + randomRange(-.1, .1), normalize(a.c[b]), scaleVector2D(a.c[b], maxOf(e, 1))));
        a.c[b].y += .01 * a.ja[b];
        scaleVector2D(a.c[b], .01 * a.m[b]);
        e = a;
        g = b;
        c = d;
        var h = 0;
        c.set(e.c[g]);
        var q = floor(magnitudeOf(c) / 4) + 1;
        scaleVector2D(c, 1 / q);
        for (var m, l, A, z = 0; z < q; z++) m = e.b[g].y + c.y, l = floor(clamp(e.b[g].x, 0, 511) / 8), A = floor(clamp(m, 0, 255) / 8), l = Terrain.a[A][l], 0 <= l && 8 >= l && !e.K[g] ? e.s[g] ? 2 == e.s[g] && (c.y *= -1, e.c[g].y *= -1) : h = 1 : e.b[g].y = m, m = e.b[g].x + c.x, l = floor(clamp(m, 0, 511) / 8), A = floor(clamp(e.b[g].y, 0, 255) / 8), l = Terrain.a[A][l], 0 <= l && 8 >= l && !e.K[g] ? (e.s[g] && 1 != e.s[g] || (h = 1), 2 == e.s[g] && (c.x *= -1, e.c[g].x *= -1)) : e.b[g].x = m;
        e = h;
        c = 1;
        1 == a.i[b] && a.j[b] && random(1E3) > a.j[b] && (c = 0);
        0 < a.I[b] && (a.I[b]--, c = 0);
        g = -1;
        1 == c && (g = 1 != Game_Mode ? a.g[b] ? PLtakeDamage(a.B[b], a.i[b], a.j[b], a.w[b], a.A[b], a.b[b].x, a.b[b].y, a.F[b], a.G[b], 0) : ENtakeDamage(a.B[b], a.i[b], a.j[b], a.w[b], a.A[b], a.b[b].x, a.b[b].y, a.F[b], a.G[b]) : PLtakeDamage(a.B[b], a.i[b], a.j[b], a.w[b], a.A[b], a.b[b].x, a.b[b].y, a.F[b], a.G[b], 1 - a.g[b] << 2)); - 1 != g && a.H[b] && (1 != Game_Mode ? a.g[b] ? Vdistance(d, Players.a[g][0], a.b[b]) : Vdistance(d, Enemies.a[g][0], a.b[b]) : Vdistance(d, Players.a[g][0], a.b[b]), normalize(d), scaleVector2D(d, .1 * a.H[b]), 1 == Game_Mode || a.g[b] ? scaleVector2D(d, .1) : scaleVector2D(d, Text_Spacing[EN_Info[Enemies.f[g]][EN_Species]] / EN_Info[Enemies.f[g]][EN_Size]), 1 != Game_Mode ? a.g[b] ? Players.g[g][0].sub(d) : Enemies.c[g][0].sub(d) : Players.g[g][0].sub(d), a.H[b] = 0);
        1 == a.i[b] && a.j[b] && (g = -1);
        if (1 == e || -1 != g)
            if (a.u[b] = 1, a.h[b] = 0, 1 == a.sub[b] || 3 == a.sub[b] || 4 == a.sub[b] || 5 == a.sub[b] || 6 == a.sub[b] || 7 == a.sub[b] || 8 == a.sub[b] || 9 == a.sub[b])
                for (h = floor(random(512)), c = 0; c < a.f[b]; c++) 1 == a.sub[b] ? assignVector2D(d, 0, 0) : 3 == a.sub[b] ? (h = floor(random(512)), q = randomRange(.05, .1), d.x = a.f[b] * Xe_arr[h][0] * q, d.y = a.f[b] * Xe_arr[h][1] * q) : 4 == a.sub[b] ? (d.x = randomRange(.1 * -a.f[b], .1 * a.f[b]), d.y = randomRange(.2 * -a.f[b], .1 * -a.f[b])) : 5 == a.sub[b] ? (d.x = a.c[b].x, d.y = a.c[b].y) : 6 == a.sub[b] ? (d.x = randomRange(.01 * -a.f[b], .01 * a.f[b]), d.y = randomRange(.2 * -a.f[b], .05 * -a.f[b])) : 7 == a.sub[b] ? (q = floor(h + 512 * c / a.f[b]) & 511, d.x = a.f[b] * Xe_arr[q][0], d.y = a.f[b] * Xe_arr[q][1]) : 8 == a.sub[b] ? (h = floor(random(512)), q = randomRange(0, .1), d.x = a.f[b] * Xe_arr[h][0] * q, d.y = a.f[b] * Xe_arr[h][1] * q) : 9 == a.sub[b] && (d.x = a.c[b].x, d.y = a.c[b].y, normalize(d)), Projectiles.add(a.g[b], a.b[b].x, a.b[b].y, d.x, d.y, a.U[b], a.ea[b], a.R[b], a.L[b], a.$[b], a.ca[b], a.Y[b], a.Z[b], a.T[b], a.aa[b], a.S[b], a.V[b], a.W[b], a.fa[b], a.ba[b], a.X[b], 0, 0, a.da[b], a.M[b], a.N[b], a.O[b], a.P[b], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        0 < a.h[b] && a.h[b]--;
        a.h[b] || (a.u[b] = 1);
        2 == a.sub[b] && (random(100) < a.f[b] || 1 == e || -1 != g) && (d.x = randomRange(-1, 1), d.y = randomRange(-1, 1), Projectiles.add(a.g[b], a.b[b].x, a.b[b].y, d.x, d.y, a.U[b], a.ea[b], a.R[b], a.L[b], a.$[b], a.ca[b], a.Y[b], a.Z[b], a.T[b], a.aa[b], a.S[b], a.V[b], a.W[b], a.fa[b], a.ba[b], a.X[b], 0, 0, a.da[b], a.M[b], a.N[b], a.O[b], a.P[b], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))
    }
}

function PJrenderProjectiles() {
    var a = Projectiles,
        b, c, d, e = new Vector2D,
        g = new Vector2D,
        h = new Vector2D,
        q = new Vector2D;
    for (b = 0; b < a.a; b++)
        if (!(0 < a.C[b])) {
            c = 16 * a.ka[b];
            d = 1 == a.u[b] ? floor((a.v[b] >> 24 & 255) * (a.D[b] - a.h[b]) / a.D[b]) << 24 | a.v[b] & 16777215 : a.v[b];
            0 < a.I[b] && (d = floor((d >> 24 & 255) / 2) << 24 | d & 16777215);
            Display_Mode = a.la[b];
            Display_Mode2 = 1;
            if (a.ia[b]) {
                g.set(a.c[b]);
                e.set(g);
                setPerpendicular(e);
                normalize(e);
                normalize(g);
                scaleVector2D(e, a.ga[b] >> 1);
                scaleVector2D(g, a.ha[b] >> 1);
                Vdistance(h, g, e);
                sumVector2D(q, g, e);
                var m0 = a.b[b].x + h.x,
                    l0 = a.b[b].y + h.y,
                    A0 = c,
                    z0 = a.b[b].x + q.x,
                    Z0 = a.b[b].y + q.y,
                    B0 = c + 16,
                    S0 = a.b[b].x - h.x,
                    ia0 = a.b[b].y - h.y,
                    za0 = c + 16,
                    ta0 = a.b[b].x - q.x,
                    X0 = a.b[b].y - q.y,
                    T0 = c,
                    Y0 = 0,
                    Ua0 = 0,
                    eb0 = 16,
                    Va0 = 16;
                c = Projectiles_Img;
                var m = m0 << 16,
                    l = l0 << 16,
                    z = z0 << 16,
                    Z = Z0 << 16,
                    S = S0 << 16,
                    ia = ia0 << 16,
                    ta = ta0 << 16,
                    X = X0 << 16,
                    A = 65535 * A0,
                    Y = 65535 * Y0,
                    B = 65535 * B0,
                    Ua = 65535 * Ua0,
                    za = 65535 * za0,
                    eb = 65535 * eb0,
                    T = 65535 * T0,
                    Va = 65535 * Va0,
                    ua, pa;
                pa = 25165824;
                var Ha = 0;
                pa > l && (pa = l);
                pa > Z && (pa = Z);
                pa > ia && (pa = ia);
                pa > X && (pa = X);
                Ha < l && (Ha = l);
                Ha < Z && (Ha = Z);
                Ha < ia && (Ha = ia);
                Ha < X && (Ha = X);
                pa >>= 16;
                Ha >>= 16;
                0 > pa && (pa = 0);
                384 <= Ha && (Ha = 383);
                for (ua = pa; ua <= Ha; ua++) Layer1[ua] = 512, Layer2[ua] = -1;
                drawRotation(m, l, A, Y, z, Z, B, Ua);
                drawRotation(z, Z, B, Ua, S, ia, za, eb);
                drawRotation(S, ia, za, eb, ta, X, T, Va);
                drawRotation(ta, X, T, Va, m, l, A, Y);
                z = d >> 24 & 255;
                m = d >> 16 & 255;
                l = d >> 8 & 255;
                A = d & 255;
                for (ua = pa; ua <= Ha; ua++)
                    for (pa = 512 * ua + Layer1[ua], B = Layer2[ua] - Layer1[ua] + 1, Z = (Layer4[ua] - Layer3[ua]) / B, za = (Layer6[ua] - Layer5[ua]) / B, S = Layer3[ua], ia = Layer5[ua], B = Layer1[ua]; B <= Layer2[ua]; B++, pa++, S += Z, ia += za) 0 > B || 512 <= B || (T = c.l[(ia >> 16) * c.m + (S >> 16)], Display_Mode2 ? (T = z * (T & 255) >> 8) && (Game_Canvas[pa] = colorBlend(Game_Canvas[pa], d, T)) : -1 != T && (ta = m * ((T & 16711680) >> 16) >> 8, X = l * ((T & 65280) >> 8) >> 8, T = A * (T & 255) >> 8, Game_Canvas[pa] = Display_Mode ? colorBlend(Game_Canvas[pa], ta << 16 | X << 8 | T, z) : ta << 16 | X << 8 | T))
            } else dispItemCentered(Projectiles_Img, floor(a.b[b].x), floor(a.b[b].y), a.ga[b], a.ha[b], c, 0, 16, 16, d);
            Display_Mode2 = Display_Mode = 0
        }
}
var Indicators = new SR_Animated_Indicator;

function SR_Animated_Indicator() {
    var a;
    this.b = Array(1E3);
    this.c = Array(1E3);
    this.value = new Int32Array(1E3);
    this.f = new Int32Array(1E3);
    this.g = new Int32Array(1E3);
    for (a = this.a = 0; 1E3 > a; a++) this.b[a] = new Vector2D;
    for (a = 0; 1E3 > a; a++) this.c[a] = new Vector2D
}
SR_Animated_Indicator.prototype.o = function() {
    this.a = 0
};
SR_Animated_Indicator.prototype.add = function(a, b, c, d, e) {
    1E3 != this.a && (a = clamp(a, 16, 495), b = clamp(b, 8, 247), assignVector2D(this.b[this.a], a, b), assignVector2D(this.c[this.a], c, -2), 0 != c && (this.c[this.a].x += randomRange(-.2, .2), this.c[this.a].y += randomRange(-.2, .2)), this.value[this.a] = d, this.f[this.a] = e, this.g[this.a] = 0, this.a++)
};
SR_Animated_Indicator.prototype.sub = function(a) {
    this.b[a].set(this.b[this.a - 1]);
    this.c[a].set(this.c[this.a - 1]);
    this.value[a] = this.value[this.a - 1];
    this.f[a] = this.f[this.a - 1];
    this.g[a] = this.g[this.a - 1];
    this.a--
};

function INmain() {
    var a = Indicators,
        b;
    for (b = 0; b < a.a; b++) {
        if (0 == a.c[b].x) {
            var c = a.b[b],
                d = a.c[b];
            d.y += 0;
            scaleVector2D(d, .96)
        } else c = a.b[b], d = a.c[b], d.y += .05, scaleVector2D(d, .99);
        c.add(d);
        a.b[b].x = clamp(a.b[b].x, 16, 495);
        a.b[b].y = clamp(a.b[b].y, 8, 247);
        a.g[b]++;
        100 <= a.g[b] && a.sub(b--)
    }
}

function INoutput() {
    var a = Indicators,
        b, c, d, e, g;
    for (b = 0; b < a.a; b++) c = a.f[b] >> 16 & 255, d = a.f[b] >> 8 & 255, e = a.f[b] & 255, g = floor(255 * minOf(100 - a.g[b], 50) / 50), largeMessage(Small_Text, floor(a.b[b].x), floor(a.b[b].y), "" + a.value[b], c, d, e, g, 0, 0, 0, g, 5, 7)
}
var Drops = new SR_Drop;

function SR_Drop() {
    var a;
    this.b = Array(100);
    this.c = Array(100);
    this.g = new Int32Array(100);
    this.value = new Int32Array(100);
    this.i = new Int32Array(100);
    this.h = new Int32Array(100);
    for (a = this.f = this.a = 0; 100 > a; a++) this.b[a] = new Vector2D;
    for (a = 0; 100 > a; a++) this.c[a] = new Vector2D
}
SR_Drop.prototype.o = function() {
    this.f = this.a = 0
};
SR_Drop.prototype.add = function(a, b, c, d, e) {
    if (100 != this.a)
        for (a = clamp(a, 16, 495), b = clamp(b, 8, 247), assignVector2D(this.b[this.a], a, b), this.c[this.a].x = Mouse_Xpos < a ? randomRange(-.5, -1) : randomRange(.5, 1), this.c[this.a].y = randomRange(-1, -2), this.g[this.a] = c, this.value[this.a] = d, this.i[this.a] = e, this.h[this.a] = 0, this.a++, c = this.f = 0; c < this.a; c++) this.f += 7 * this.g[c] + 3 * this.value[c] + 11 * this.i[c]
};
SR_Drop.prototype.sub = function(a) {
    this.b[a].set(this.b[this.a - 1]);
    this.c[a].set(this.c[this.a - 1]);
    this.g[a] = this.g[this.a - 1];
    this.value[a] = this.value[this.a - 1];
    this.i[a] = this.i[this.a - 1];
    this.h[a] = this.h[this.a - 1];
    this.a--;
    for (a = this.f = 0; a < this.a; a++) this.f += 7 * this.g[a] + 3 * this.value[a] + 11 * this.i[a]
};

function DPmain() {
    var a = Drops,
        b, c;
    for (b = c = 0; b < a.a; b++) c += 7 * a.g[b] + 3 * a.value[b] + 11 * a.i[b];
    a.f != c && (Game_Canvas = null);
    for (b = 0; b < a.a; b++) {
        a.c[b].y += .04;
        scaleVector2D(a.c[b], .98);
        var d, e;
        c = clamp(a.b[b].y + a.c[b].y, 8, 247);
        d = floor(a.b[b].x / 8);
        e = floor(c / 8);
        d = Terrain.a[e][d];
        0 <= d && 8 >= d || (a.b[b].y = c);
        c = clamp(a.b[b].x + a.c[b].x, 16, 495);
        d = floor(c / 8);
        e = floor(a.b[b].y / 8);
        d = Terrain.a[e][d];
        0 <= d && 8 >= d || (a.b[b].x = c);
        if (100 > a.h[b]) a.h[b]++;
        else if (c = PLfindPlayer(a.b[b].x - 12, a.b[b].y - 6 - 12, a.b[b].x + 12, a.b[b].y - 6 + 12, 0), -1 != c) {
            antiCheatCheck();
            if (1 == a.g[b]) Team_Gold = clamp(Team_Gold + a.value[b], 0, 9999999), Indicators.add(a.b[b].x, a.b[b].y, 0, a.value[b], 16776960);
            else if (2 == a.g[b]) {
                for (d = 0; 4 > d; d++) 0 != Players.H[d] && floor(100 * LP_Current[c] / LP_Max[c]) > floor(100 * LP_Current[d] / LP_Max[d]) && (c = d);
                if (LP_Current[c] == LP_Max[c]) continue;
                antiCheatCheck();
                LP_Current[c] = clamp(LP_Current[c] + floor(LP_Max[c] / 5), 0, LP_Max[c]);
                antiCheatSet();
                Indicators.add(a.b[b].x, a.b[b].y, 0, floor(LP_Max[c] / 5), 65280)
            } else {
                for (c = 16; 40 > c; c++)
                    if (0 == Item_Inv[c]) {
                        Item_Inv[c] = a.g[b];
                        Comp1_Inv[c] = a.value[b];
                        Comp2_Inv[c] = a.i[b];
                        break
                    }
                if (40 == c) {
                    a.c[b].x = randomRange(-1, 1);
                    a.c[b].y = randomRange(-1, -2);
                    a.h[b] = 0;
                    continue
                }
            }
            antiCheatSet();
            a.sub(b--)
        }
    }
}

function DPrenderDrops() {
    var a = Drops,
        b;
    Display_Mode2 = 2;
    for (b = 0; b < a.a; b++)(100 == a.h[b] || a.h[b] & 6) && dispItem(Drop_Img, floor(a.b[b].x) - 6, floor(a.b[b].y) - 12, 12, 12, 12 * getVal(a.g[b], 3), 0, 12, 12, getVal(a.g[b], 6));
    Display_Mode2 = 0
}
var Terrain = new SR_Terrain;

function SR_Terrain() {
    this.m = 64;
    this.f = 48;
    this.a = Array(this.f);
    this.b = new Int32Array(this.m);
    this.g = new Int32Array(this.m);
    this.h = new Int32Array(this.m);
    this.u = new Int32Array(this.m);
    this.s = new Int32Array(48 * this.f);
    this.c = this.i = 0;
    this.j = -1;
    for (var a = 0; a < this.f; a++) this.a[a] = new Int32Array(this.m)
}
SR_Terrain.prototype.o = function(a) {
    var b, c;
    this.c = a;
    this.j != Stage_Spawns[this.c][Current_Screen][1] && (this.j = Stage_Spawns[this.c][Current_Screen][1], Stage_Terrain_Img = new SR_Image, Stage_Terrain_Img.IGset("st" + this.j + ".gif"));
    imgToArray(Stage_Terrain_Img);
    if (Tile_Counter1) return !1;
    this.f = Stage_Terrain_Img.c;
    for (c = 0; c < this.f; c++)
        for (b = 0; b < this.m; b++) this.a[c][b] = -1;
    var d = floor(random(Stage_Terrain_Img.m - 64));
    for (c = 0; c < this.f; c++)
        for (b = 0; b < this.m; b++) {
            a = c * Stage_Terrain_Img.m + clamp(b, 3, 60) + d;
            var e = Stage_Terrain_Img.l[3 >= b || this.m - 3 <= b ? a : a - 1],
                g = Stage_Terrain_Img.l[2 >= b || this.m - 4 <= b ? a : a + 1],
                h = Stage_Terrain_Img.l[c ? a - Stage_Terrain_Img.m : a],
                q = Stage_Terrain_Img.l[c == this.f - 1 ? a : a + Stage_Terrain_Img.m];
            0 == Stage_Terrain_Img.l[a] ? 0 != e && 0 == g && 0 != h && 0 == q ? this.a[c][b] = 0 : 0 == e && 0 == g && 0 != h && 0 == q ? this.a[c][b] = 1 : 0 == e && 0 != g && 0 != h && 0 == q ? this.a[c][b] = 2 : 0 != e && 0 == g && 0 == h && 0 == q ? this.a[c][b] = 3 : 0 == e && 0 == g && 0 == h && 0 == q ? this.a[c][b] = 4 : 0 == e && 0 != g && 0 == h && 0 == q ? this.a[c][b] = 5 : 0 != e && 0 == g && 0 == h && 0 != q ? this.a[c][b] = 6 : 0 == e && 0 == g && 0 == h && 0 != q ? this.a[c][b] = 7 : 0 == e && 0 != g && 0 == h && 0 != q && (this.a[c][b] = 8) : 255 == Stage_Terrain_Img.l[a] && (this.a[c][b] = 9)
        }
    for (b = 0; b < this.m; b++)
        for (c = this.f - 1; 0 <= c; c--)
            if (0 > this.a[c][b] || 8 < this.a[c][b]) {
                this.b[b] = c;
                break
            }
    for (b = 0; b < this.m; b++)
        for (c = 1; c < this.f; c++)
            if ((0 > this.a[c - 1][b] || 8 < this.a[c - 1][b]) && 0 <= this.a[c][b] && 8 >= this.a[c][b]) {
                this.g[b] = c - 1;
                break
            }
    for (b = 0; b < this.m; b++)
        for (c = 0; c < this.f; c++)
            if (0 > this.a[c][b] || 8 < this.a[c][b]) {
                this.h[b] = c;
                break
            }
    for (b = 0; b < this.m; b++)
        for (this.u[b] = this.h[b], c = 1; c < this.f; c++)
            if ((0 > this.a[c - 1][b] || 8 < this.a[c - 1][b]) && 0 <= this.a[c][b] && 9 >= this.a[c][b]) {
                this.u[b] = c - 1;
                break
            }
    this.i = 0;
    for (b = 12; 60 > b; b++)
        for (c = 1; c < this.f - 1; c++) 9 == this.a[c - 1][b] && 9 == this.a[c][b] && (this.s[this.i++] = c * this.m + b);
    if (!Current_Screen) {
        for (a = 0; 196608 > a; a++) Stage_Eff_Canvas.l[a] = 0;
        b = Game_Canvas;
        switch (this.c) {
            case 15:
            case 16:
            case 30:
            case 31:
            case 32:
            case 33:
            case 66:
            case 67:
            case 68:
            case 69:
                Display_Mode = 1;
                Display_Mode2 = 3;
                Game_Canvas = Stage_Eff_Canvas.l;
                for (a = 0; 196608 > a; a++) Game_Canvas[a] = 0;
                for (a = 0; 100 > a; a++) c = randomRange(1.7, 3.69), c = c * c * c * c, dispItemCentered(Projectiles_Img, floor(randomRange(0, 512)), floor(256 - c), 256, 32, 96, 0, 16, 16, 419430399);
                Game_Canvas = b;
                Display_Mode = Display_Mode2 = 0
        }
    }
    return !0
};

function TRdrawTerrain() {
    var a = Terrain,
        b, c, d = new Int32Array([0, 8, 16, 0, 8, 16, 0, 8, 16]),
        e = new Int32Array([0, 0, 0, 8, 8, 8, 16, 16, 16]),
        g = Terrain_Textures[Stage_Spawns[a.c][Current_Screen][0]];
    for (c = 0; c < a.f; c++)
        for (b = 0; b < a.m; b++) {
            var h = a.a[c][b]; - 1 != h && (9 == h ? 82 == a.c ? -1 == a.a[c - 1][b] ? drawItem(Water_Red_Img, 8 * b, 8 * c, 8, 8, 0, 0, 8, 8) : backgroundFill(8 * b - 4, 8 * c, 16, 8, 5570560) : -1 == a.a[c - 1][b] ? drawItem(Water_Img, 8 * b, 8 * c, 8, 8, 0, 0, 8, 8) : backgroundFill(8 * b - 4, 8 * c, 16, 8, 21916) : drawItem(g, 8 * b, 8 * c, 8, 8, d[h], e[h], 8, 8))
        }
}
var WorldMap = new SR_map;

function SR_map() {
    this.m = 78;
    this.a = 0;
    this.b = Array(16);
    this.c = Array(16);
    for (var a = 0; 16 > a; a++) this.b[a] = new Int32Array(this.m), this.c[a] = new Int32Array(this.m)
}
SR_map.prototype.o = function() {
    var a, b, c;
    for (c = 0; 16 > c; c++)
        for (b = 0; b < this.m; b++) this.b[c][b] = -1;
    for (c = 0; 16 > c; c++)
        for (b = 0; b < this.m; b++) {
            a = c * Map_Elev_Index.m + b;
            var d = b ? -1 : 0,
                e = b == this.m - 1 ? 0 : 1,
                g = c ? -this.m : 0,
                h = 15 == c ? 0 : this.m,
                q = Map_Elev_Index.l[a + d + g],
                m = Map_Elev_Index.l[a + g],
                g = Map_Elev_Index.l[a + e + g],
                l = Map_Elev_Index.l[a + d],
                A = Map_Elev_Index.l[a + e],
                d = Map_Elev_Index.l[a + d + h],
                z = Map_Elev_Index.l[a + h],
                e = Map_Elev_Index.l[a + e + h];
            65535 == Map_Feature_Index.l[a] ? this.b[c][b] = 15 : 6684672 == Map_Feature_Index.l[a] ? this.b[c][b] = 17 : 0 != Map_Elev_Index.l[a] && (13209 == Map_Elev_Index.l[a] ? this.b[c][b] = 13 : 16764006 == Map_Feature_Index.l[a] ? this.b[c][b] = 14 : 6710886 == Map_Feature_Index.l[a] ? this.b[c][b] = 16 : (a = Map_Elev_Index.l[a], m >= a && l >= a && A >= a && z >= a && e < a ? this.b[c][b] = 3 : m >= a && l >= a && A >= a && z >= a && d < a ? this.b[c][b] = 4 : m >= a && l >= a && A >= a && z >= a && g < a ? this.b[c][b] = 8 : m >= a && l >= a && A >= a && z >= a && q < a ? this.b[c][b] = 9 : l < a && A >= a && m < a && z >= a ? this.b[c][b] = 0 : l >= a && A >= a && m < a && z >= a ? this.b[c][b] = 1 : l >= a && A < a && m < a && z >= a ? this.b[c][b] = 2 : l < a && A >= a && m >= a && z >= a ? this.b[c][b] = 5 : l >= a && A < a && m >= a && z >= a ? this.b[c][b] = 7 : l < a && A >= a && m >= a && z < a ? this.b[c][b] = 10 : l >= a && A >= a && m >= a && z < a ? this.b[c][b] = 11 : l >= a && A < a && m >= a && z < a && (this.b[c][b] = 12)))
        }
    for (c = 0; 16 > c; c++)
        for (b = 0; b < this.m; b++) a = c * Map_Feature_Index.m + b, this.c[c][b] = -1, 26112 == Map_Feature_Index.l[a] ? this.c[c][b] = 0 : 10066329 == Map_Feature_Index.l[a] ? this.c[c][b] = 1 : 8404992 == Map_Feature_Index.l[a] ? this.c[c][b] = 2 : 13434879 == Map_Feature_Index.l[a] ? this.c[c][b] = 5 : 12288 == Map_Feature_Index.l[a] && (this.c[c][b] = 6)
};
var doc = document,
    cv = doc.getElementById("cv"),
    ctx = cv.getContext("2d"),
    My_Img_Data = ctx.createImageData(512, 384),
    Bit_8_Color = new Uint32Array(My_Img_Data.data.buffer),
    Win_Console = WIN.console,
    chrCode = String.fromCharCode,
    timeOut = setTimeout,
    Host_Name = location.hostname;
Host_Name = 'dan-ball.jp';
WIN.fff = putImageData;

function putImageData(a, b, c) {
    try {
        cv = doc.getElementById("cv"), ctx = cv.getContext("2d"), ctx.putImageData(a, b, c)
    } catch (d) {}
}
WIN.fff = logCopyright;

function logCopyright(a) {
    try {
        Win_Console.log(a)
    } catch (b) {}
}
WIN.Init = gameStartup;
var chr_C_DAN_BALL = chrCode(40, 67, 41, 32, 50, 48, 48, 56, 32, 104, 97, 53, 53, 105, 105, 32, 68, 65, 78, 45, 66, 65, 76, 76, 46, 106, 112),
    chr_Copyright_DAN_BALL = chrCode(67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 48, 56, 32, 104, 97, 53, 53, 105, 105, 32, 68, 65, 78, 45, 66, 65, 76, 76, 46, 106, 112),
    chr_dot_data = chrCode(46, 47, 100, 97, 116, 97, 47); //'./data/'
chrCode(102, 112, 115);
var chr_canvas = chrCode(99, 97, 110, 118, 97, 115),
    chr_2d = chrCode(50, 100),
    Check_Host2 = 0,
    chr_dan_ball_jp = chrCode(100, 97, 110, 45, 98, 97, 108, 108, 46, 106, 112),
    Game_Canvas = new Int32Array(196608),
    Layer1 = new Int32Array(384),
    Layer2 = new Int32Array(384),
    Layer3 = new Float32Array(384),
    Layer4 = new Float32Array(384),
    Layer5 = new Float32Array(384),
    Layer6 = new Float32Array(384);
chr_dan_ball_jp = 'dan-ball.jp';

function mainSequence() {
    if (Animation_Frame) {
        Animation_Frame(mainSequence);
        Animation_Frame_Counter++;
        Time_Current = Date.now();
        var game_ticks_passed = floor(60 * (Time_Current - Time_Prev) / 1E3 + .5);
        if (0 > game_ticks_passed || 60 <= game_ticks_passed) Frame_Counter = Animation_Frame_Counter = 0, Time_Prev = Time_Current, game_ticks_passed = 0;
        else if (game_ticks_passed == Prev_Game_Ticks_Passed) return;
        Frame_Counter++;
        Prev_Game_Ticks_Passed = game_ticks_passed
    }
    Clicked = false == Left_Click_Was_Down && true == Left_Click_Is_Down;
    Released = true == Left_Click_Was_Down && false == Left_Click_Is_Down;
    Right_Click_Clicked = false == Right_Click_Was_Down && true == Right_Click_Is_Down;
    Right_Click_Released = true == Right_Click_Was_Down && false == Right_Click_Is_Down;
    Left_Click_Was_Down = Left_Click_Is_Down;
    Right_Click_Was_Down = Right_Click_Is_Down;
    Left_Click_Is_Up = !(Released || Left_Click_Was_Down || Right_Click_Released || Right_Click_Was_Down);
    Sett_Change = Clicked ? 1 : Right_Click_Clicked ? -1 : 0;
    Left_Click_Is_Down ? Left_Click_Down_Time++ : Left_Click_Down_Time = 0;
    Mouse_Xpos = Mouse_Xpos2;
    Mouse_Ypos = Mouse_Ypos2;
    for (game_ticks_passed = 0; 256 > game_ticks_passed; game_ticks_passed++) Is_Key_Pressed1[game_ticks_passed] = Arr256_2[game_ticks_passed], Arr256_2[game_ticks_passed] = !1;
    Rand_EF = Rand_EF + floor(1024 * Math.random()) & 1023;
    Rand_FF = floor(512 * Math.random()) | 1;
    playSequence();
    for (var b = 11 == Check_Host2 ? 196608 : 0, game_ticks_passed = 0; game_ticks_passed < b; game_ticks_passed++) Bit_8_Color[game_ticks_passed] = 4278190080 | (Game_Canvas[game_ticks_passed] & 255) << 16 | Game_Canvas[game_ticks_passed] & 65280 | Game_Canvas[game_ticks_passed] >> 16 & 255;
    putImageData(My_Img_Data, 0, 0);
    Animation_Frame || timeOut(mainSequence, timePF())
}
var Check_Host1 = 1;

function checkFalseHost() {
    if (Host_Name.length != chr_dan_ball_jp.length) return !0;
    for (Check_Host1 = 0; Check_Host2 < Host_Name.length; Check_Host2++)
        if (Host_Name[Check_Host2] != chr_dan_ball_jp[Check_Host2]) return !0;
    return !1
}
var Animation_Frame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame,
    Animation_Frame_Counter = 0,
    Prev_Game_Ticks_Passed = 0,
    Frame_Counter = 0,
    Time_Increment1 = 20,
    Time_Current = Date.now(),
    Time_Prev = Time_Current,
    Time_Future = Time_Current + Time_Increment1,
    Time_Min = Time_Current,
    Time_Desert_Haze = 0;

function timePF() {
    Time_Current = Date.now();
    var a = clamp(Time_Future - Time_Current, 5, Time_Increment1);
    Frame_Counter++;
    Time_Desert_Haze++;
    Time_Future += Time_Increment1;
    if (Time_Current + a >= Time_Min || Time_Current < Time_Prev) Frame_Counter = 0, Time_Future = Time_Current + Time_Increment1, Time_Min = Time_Current + 1E3;
    Time_Prev = Time_Current;
    return a
}
var Tile_Counter1 = 0;

function SR_Image() {
    this.b = 0;
    this.i = "";
    this.j = this.f = this.h = this.a = this.g = this.l = this.c = this.m = 0
}

function setArea(a, b, c) {
    a.m = b;
    a.c = c;
    for (b = 0; 16 > b; b++);
    a.l = new Int32Array(a.m * a.c)
}
SR_Image.prototype.IGset = function(a) {
    this.i != a && (Tile_Counter1++, this.i = a, this.b = new Image, this.b.src = chr_dot_data + a + "?18.9", delete this.l, this.g = this.l = 0)
};

function imgToArray(a) {
    if (!a.g && a.b.complete) {
        Tile_Counter1--;
        var b = a.b.width,
            c = a.b.height;
        if (!b || !c) throw delete a.b, a.i = "", chr_ERROR;
        var d = doc.createElement(chr_canvas);
        d.width = b;
        d.height = c;
        d = d.getContext(chr_2d);
        d.drawImage(a.b, 0, 0);
        d = d.getImageData(0, 0, b, c).data;
        setArea(a, b, c);
        b = 0;
        for (c = d.length; b < c; b += 4) a.l[b >> 2] = 0 == d[b + 3] ? -1 : d[b + 0] << 16 | d[b + 1] << 8 | d[b + 2];
        delete a.b;
        a.g = 1
    }
}

function doVSModeText(a, b) {
    a.g || (a.g = 1, setArea(a, 512, 16), a.h = doc.createElement(chr_canvas), a.h.width = a.m, a.h.height = a.c, a.f = a.h.getContext(chr_2d));
    var c = b + "sans-serif014";
    if (a.j != c) {
        a.j = c;
        a.f.fillStyle = "#000000";
        a.f.fillRect(0, 0, a.m, a.c);
        a.f.font = "14px sans-serif";
        a.f.fillStyle = "#ffffff";
        a.f.fillText(b, 0, 14);
        for (var d = a.f.getImageData(0, 0, a.m, a.c).data, c = 0, e = d.length; c < e; c += 4) a.l[c >> 2] = 1 <= d[c + 0] ? 16777215 : -1;
        for (c = d = a.a = 0; d < a.c; d++)
            for (e = 0; e < a.m; e++, c++) 16777215 == a.l[c] && a.a <= e && (a.a = e + 1)
    }
}
var PvP_Text_Spaces = [
        [0, 2, 0, 0, 1, 0, 0, 2, 2, 1, 1, 1, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 3, 1, 0],
        [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]
    ],
    PVE_Text_Spaces = [
        [0, 1, 1, 0, 0, 0, 0, 2, 1, 2, 0, 0, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 0
        ],
        [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]
    ],
    Large_Text = new SR_Text,
    Small_Text = new SR_Text;

function SR_Text() {
    this.f = new SR_Image;
    this.a = this.b = this.g = this.c = 0
}
SR_Text.prototype.o = function(a, b, c) {
    this.f.IGset(a);
    this.c = b;
    this.g = c;
    this.a = this.b = 0
};

function TXoutputB(a, b, c, d, e, g) {
    var h, q, m, l, A, z, Z, B = 512 - a.c,
        S = a.f.m - a.c,
        ia = -1 < e ? 16777215 : 1,
        za = -1 < g ? 0 : 1,
        ta = d.length;
    for (h = 0; h < ta; h++, b += a.c + a.b)
        if (A = d.charCodeAt(h) - 32) {
            96 <= A && (A = 31);
            0 != a.a && (b -= PvP_Text_Spaces[a.a - 1][A]);
            z = A * a.c;
            l = 512 * c + b;
            for (m = 0; m < a.g; m++, l += B, z += S)
                for (q = 0; q < a.c; q++, l++, z++) Z = a.f.l[z], Z == ia ? Game_Canvas[l] = e : Z == za && (Game_Canvas[l] = g);
            0 != a.a && (b -= PVE_Text_Spaces[a.a - 1][A])
        }
    a.a = 0
}

function centeredText(a, b, c, d, e, g) {
    b -= d.length * (a.c + a.b) >> 1;
    c -= a.g >> 1;
    TXoutputB(a, b, c, d, e, g)
}

function itemText(a, b, c, d, e, g) {
    var h = Large_Text;
    h.b = g;
    TXoutputB(h, a, b, c, d, e);
    h.b = 0
}

function TXoutputM(a, b, c, d, e, g, h, q, m, l, A, z, Z, B) {
    e = e * q >> 8;
    g = g * q >> 8;
    h = h * q >> 8;
    q = 255 - q;
    m = m * z >> 8;
    l = l * z >> 8;
    A = A * z >> 8;
    z = 255 - z;
    var S, ia, za, ta, X, T, Y, Ua, eb, Va = 512 - Z,
        ua = 255 != q ? 16777215 : 1,
        pa = 255 != z ? 0 : 1,
        Ha = d.length;
    for (S = 0; S < Ha; S++, b += Z + a.b)
        if (X = d.charCodeAt(S) - 32) {
            96 <= X && (X = 31);
            0 != a.a && (b -= floor(PvP_Text_Spaces[a.a - 1][X] * Z / a.c));
            T = X * a.c;
            ta = 512 * c + b;
            for (za = 0; za < B; za++, ta += Va)
                for (Ua = floor(za * a.g / B) * a.f.m + T << 8, eb = floor((a.c << 8) / Z), ia = 0; ia < Z; ia++, ta++, Ua += eb) Y = a.f.l[Ua >> 8], Y == ua ? (Y = Game_Canvas[ta], Game_Canvas[ta] = e + ((Y >> 16 & 255) * q >> 8) << 16 | g + ((Y >> 8 & 255) * q >> 8) << 8 | h + ((Y & 255) * q >> 8)) : Y == pa && (Y = Game_Canvas[ta], Game_Canvas[ta] = m + ((Y >> 16 & 255) * z >> 8) << 16 | l + ((Y >> 8 & 255) * z >> 8) << 8 | A + ((Y & 255) * z >> 8));
            0 != a.a && (b -= floor(PVE_Text_Spaces[a.a - 1][X] * Z / a.c))
        }
    a.a = 0
}

function largeMessage(a, b, c, d, e, g, h, q, m, l, A, z, Z, B) {
    b -= d.length * (Z + a.b) >> 1;
    TXoutputM(a, b, c - (B >> 1), d, e, g, h, q, m, l, A, z, Z, B)
}

function screenTransition(a) {
    var b, c, d, e, g;
    b = 196608;
    for (c = 0; c < b; c++) d = Game_Canvas[c] >> 16 & 255, e = ((0 - d) * a >> 8) + d, d = Game_Canvas[c] >> 8 & 255, g = ((0 - d) * a >> 8) + d, d = Game_Canvas[c] & 255, d = ((0 - d) * a >> 8) + d, Game_Canvas[c] = e << 16 | g << 8 | d
}
var Display_Mode = 0;

function colorBlend(a, b, c) {
    var d = Display_Mode,
        e = 0,
        g = 0,
        h = 0;
    1 == d ? (d = a >> 16 & 255, e = (((b >> 16 & 255) - d) * c >> 8) + d, d = a >> 8 & 255, g = (((b >> 8 & 255) - d) * c >> 8) + d, d = a & 255, h = (((b & 255) - d) * c >> 8) + d) : 2 == d ? (e = ((b >> 16 & 255) * c >> 8) + (a >> 16 & 255), 255 < e && (e = 255), g = ((b >> 8 & 255) * c >> 8) + (a >> 8 & 255), 255 < g && (g = 255), h = ((b & 255) * c >> 8) + (a & 255), 255 < h && (h = 255)) : 3 == d ? (e = (a >> 16 & 255) - ((b >> 16 & 255) * c >> 8), 0 > e && (e = 0), g = (a >> 8 & 255) - ((b >> 8 & 255) * c >> 8), 0 > g && (g = 0), h = (a & 255) - ((b & 255) * c >> 8), 0 > h && (h = 0)) : 4 == d ? (e = (b >> 16 & 255) * (a >> 16 & 255) >> 8, g = (b >> 8 & 255) * (a >> 8 & 255) >> 8, h = (b & 255) * (a & 255) >> 8) : 5 == d ? (d = a >> 16 & 255, e = d + ((b >> 16 & 255) * d * c >> 16), 255 < e && (e = 255), d = a >> 8 & 255, g = d + ((b >> 8 & 255) * d * c >> 16), 255 < g && (g = 255), d = a & 255, h = d + ((b & 255) * d * c >> 16), 255 < h && (h = 255)) : 6 == d && (d = a >> 16 & 255, e = d + (c - (2 * d * c >> 8)), d = a >> 8 & 255, g = d + (c - (2 * d * c >> 8)), d = a & 255, h = d + (c - (2 * d * c >> 8)));
    return e << 16 | g << 8 | h
}
var Display_Mode2 = 0;

function drawLine(a, b, c, d, e) {
    c -= a;
    d -= b;
    var g, h;
    absVal(c) >= absVal(d) ? (h = floor(absVal(c)), 0 != h && (d = floor(65536 * d / h)), c = 0 <= c ? 65536 : -65536) : (h = floor(absVal(d)), 0 != h && (c = floor(65536 * c / h)), d = 0 <= d ? 65536 : -65536);
    a = floor(65536 * a) + 32768;
    for (b = floor(65536 * b) + 32768; 0 <= h; h--, a += c, b += d) 0 > a || 512 <= a >> 16 || 0 > b || 384 <= b >> 16 || (g = 512 * (b >> 16) + (a >> 16), Game_Canvas[g] = Display_Mode ? colorBlend(Game_Canvas[g], e, e >> 24 & 255) : e)
}

function outlineRect(a, b, c, d, e) {
    c--;
    d--;
    drawLine(a, b, a + c, b, e);
    drawLine(a, b + d, a + c, b + d, e);
    drawLine(a, b, a, b + d, e);
    drawLine(a + c, b, a + c, b + d, e)
}

function outlineRectCentered(a, b, c, d, e) {
    outlineRect(a - (c >> 1), b - (d >> 1), c, d, e)
}

function filledRect(a, b, c, d, e) {
    var g, h;
    c = 512 < a + c ? 512 : ~~(a + c);
    a = 0 > a ? 0 : ~~a;
    g = 512 * (0 > b ? 0 : ~~b) + a;
    h = 512 - (c - a);
    c = g + c - a;
    d = 512 * (384 < b + d ? 384 : ~~(b + d));
    if (Display_Mode)
        for (; g < d; g += h, c += 512)
            for (; g < c; g++) Game_Canvas[g] = colorBlend(Game_Canvas[g], e, e >> 24 & 255);
    else
        for (; g < d; g += h, c += 512)
            for (; g < c; g++) Game_Canvas[g] = e
}

function filledRectCentered(a, b, c, d, e) {
    filledRect(a - (c >> 1), b - (d >> 1), c, d, e)
}

function drawItem(a, b, c, d, e, g, h, q, m) {
    var l, A;
    if (0 != d && 0 != e)
        for (q = ~~((q << 8) / d), m = ~~((m << 8) / e), g <<= 8, h <<= 8, 0 > b && (g += q * -b), 0 > c && (h += m * -c), d = 512 < b + d ? 512 : ~~(b + d), b = 0 > b ? 0 : ~~b, l = 512 * (0 > c ? 0 : ~~c) + b, A = 512 - (d - b), d = l + d - b, e = 512 * (384 < c + e ? 384 : ~~(c + e)); l < e; l += A, d += 512, h += m)
            for (b = ((h >> 8) * a.m << 8) + g; l < d; l++, b += q) c = a.l[b >> 8], -1 != c && (Game_Canvas[l] = c)
}

function dispItem(a, b, c, d, e, g, h, q, m, l) {
    var A, z, Z, B;
    if (0 != d && 0 != e) {
        q = floor((q << 8) / d);
        m = floor((m << 8) / e);
        g <<= 8;
        h <<= 8;
        0 > b && (g += q * -b);
        0 > c && (h += m * -c);
        d = 512 < b + d ? 512 : floor(b + d);
        e = 384 < c + e ? 384 : floor(c + e);
        b = 0 > b ? 0 : floor(b);
        c = 0 > c ? 0 : floor(c);
        var S = l >> 24 & 255,
            ia = l >> 16 & 255,
            za = l >> 8 & 255,
            ta = l & 255,
            X, T, Y;
        if (!Display_Mode2)
            for (; c < e; c++, h += m)
                for (z = 512 * c + b, Z = ((h >> 8) * a.m << 8) + g, A = b; A < d; A++, z++, Z += q) {
                    if (B = a.l[Z >> 8], -1 != B)(X = ia * (B >> 16 & 255) >> 8, T = za * (B >> 8 & 255) >> 8, Y = ta * (B & 255) >> 8, Display_Mode) ? 1 == Display_Mode ? (B = Game_Canvas[z] >> 16 & 255, X = ((X - B) * S >> 8) + B, B = Game_Canvas[z] >> 8 & 255, T = ((T - B) * S >> 8) + B, B = Game_Canvas[z] & 255, Y = ((Y - B) * S >> 8) + B, Game_Canvas[z] = X << 16 | T << 8 | Y) : 2 == Display_Mode ? (X = (X * S >> 8) + (Game_Canvas[z] >> 16 & 255), 255 < X && (X = 255), T = (T * S >> 8) + (Game_Canvas[z] >> 8 & 255), 255 < T && (T = 255), Y = (Y * S >> 8) + (Game_Canvas[z] & 255), 255 < Y && (Y = 255), Game_Canvas[z] = X << 16 | T << 8 | Y) : 5 == Display_Mode && (B = Game_Canvas[z] >> 16 & 255, X = B + (X * B * S >> 16), 255 < X && (X = 255), B = Game_Canvas[z] >> 8 & 255, T = B + (T * B * S >> 16), 255 < T && (T = 255), B = Game_Canvas[z] & 255, Y = B + (Y * B * S >> 16), 255 < Y && (Y = 255), Game_Canvas[z] = X << 16 | T << 8 | Y) : Game_Canvas[z] = X << 16 | T << 8 | Y
                } else if (1 == Display_Mode2)
                    for (; c < e; c++, h += m)
                        for (z = 512 * c + b, Z = ((h >> 8) * a.m << 8) + g, A = b; A < d; A++, z++, Z += q) {
                            if (B = S * (a.l[Z >> 8] & 255) >> 8) 1 == Display_Mode ? (X = Game_Canvas[z] >> 16 & 255, X = ((ia - X) * B >> 8) + X, T = Game_Canvas[z] >> 8 & 255, T = ((za - T) * B >> 8) + T, Y = Game_Canvas[z] & 255, Y = ((ta - Y) * B >> 8) + Y, Game_Canvas[z] = X << 16 | T << 8 | Y) : 2 == Display_Mode ? (X = (Game_Canvas[z] >> 16 & 255) + (ia * B >> 8), 255 < X && (X = 255), T = (Game_Canvas[z] >> 8 & 255) + (za * B >> 8), 255 < T && (T = 255), Y = (Game_Canvas[z] & 255) + (ta * B >> 8), 255 < Y && (Y = 255), Game_Canvas[z] = X << 16 | T << 8 | Y) : 3 == Display_Mode ? (X = (Game_Canvas[z] >> 16 & 255) - B, 0 > X && (X = 0), T = (Game_Canvas[z] >> 8 & 255) - B, 0 > T && (T = 0), Y = (Game_Canvas[z] & 255) - B, 0 > Y && (Y = 0), Game_Canvas[z] = X << 16 | T << 8 | Y) : Game_Canvas[z] = colorBlend(Game_Canvas[z], l, B)
                        } else if (2 == Display_Mode2)
                            for (; c < e; c++, h += m)
                                for (z = 512 * c + b, Z = ((h >> 8) * a.m << 8) + g, A = b; A < d; A++, z++, Z += q) B = a.l[Z >> 8], 0 != B && (X = B >> 16 & 255, T = B >> 8 & 255, Y = B & 255, Game_Canvas[z] = X == T && T == Y ? ia * X >> 8 << 16 | za * T >> 8 << 8 | ta * Y >> 8 : X << 16 | T << 8 | Y);
                        else if (3 == Display_Mode2)
            for (; c < e; c++, h += m)
                for (z = 512 * c + b, Z = ((h >> 8) * a.m << 8) + g, A = b; A < d; A++, z++, Z += q)
                    if (B = S * (a.l[Z >> 8] & 255) >> 8) 1 == Display_Mode ? Game_Canvas[z] = ((255 - Game_Canvas[z]) * B >> 8) + Game_Canvas[z] : 2 == Display_Mode ? (X = (Game_Canvas[z] >> 16 & 255) + (ia * B >> 8), 255 < X && (X = 255), T = (Game_Canvas[z] >> 8 & 255) + (za * B >> 8), 255 < T && (T = 255), Y = (Game_Canvas[z] & 255) + (ta * B >> 8), 255 < Y && (Y = 255), Game_Canvas[z] = X << 16 | T << 8 | Y) : 3 == Display_Mode && (B = Game_Canvas[z] - B, 0 > B && (B = 0), Game_Canvas[z] = B)
    }
}

function dispItemCentered(a, b, c, d, e, g, h, q, m, l) {
    dispItem(a, b - (d >> 1), c - (e >> 1), d, e, g, h, q, m, l)
}

function backgroundFill(a, b, c, d, e) {
    var g, h;
    c = 512 < a + c ? 512 : ~~(a + c);
    a = 0 > a ? 0 : ~~a;
    g = 512 * (0 > b ? 0 : ~~b) + a;
    h = 512 - (c - a);
    c = g + c - a;
    for (d = 512 * (384 < b + d ? 384 : ~~(b + d)); g < d; g += h, c += 512)
        for (; g < c; g++) Game_Canvas[g] & 16777215 || (Game_Canvas[g] = e)
}

function colorPortraitWeap(a, b, c, d) {
    var e, g, h, q, m, l = 0 > a ? -a : 0,
        A = 512 < a + 24 ? 24 - (a + 24 - 512) : 24,
        z = 384 < b + 24 ? 24 - (b + 24 - 384) : 24;
    for (g = 0 > b ? -b : 0; g < z; g++)
        for (h = 512 * (b + g) + (a + l), q = (0 + floor(24 * g / 24)) * Player_Img.m + c, e = l; e < A; e++, h++) m = q + floor(24 * e / 24), 16711680 == Player_Img.l[m] && (Game_Canvas[h] = d)
}

function drawRotation(a, b, c, d, e, g, h, q) {
    var m = maxOf(absVal(e - a >> 16), absVal(g - b >> 16)) + 1;
    e = floor((e - a) / m);
    g = floor((g - b) / m);
    h = floor((h - c) / m);
    q = floor((q - d) / m);
    c = floor(c);
    d = floor(d);
    for (var l, A, z = 0; z < m; z++, a += e, b += g, c += h, d += q) l = a >> 16, A = b >> 16, 0 > A || 384 <= A || (Layer1[A] > l && (Layer1[A] = l, Layer3[A] = c, Layer5[A] = d), Layer2[A] < l && (Layer2[A] = l, Layer4[A] = c, Layer6[A] = d))
}
var vec_2d = new Vector2D;

function pullJoints(a, b, c, d, e) {
    Vdistance(vec_2d, a, b);
    c -= normalize(vec_2d);
    d *= c;
    e *= c;
    a.x += vec_2d.x * d;
    a.y += vec_2d.y * d;
    b.x -= vec_2d.x * e;
    b.y -= vec_2d.y * e
}

function moveJoint(a, b, c, d) {
    Vdistance(vec_2d, a, b);
    b.set(a);
    vec_2d.y += c;
    scaleVector2D(vec_2d, d);
    a.add(vec_2d)
}
var Clicked = !1,
    Released = !1,
    Left_Click_Was_Down = !1,
    Left_Click_Is_Down = !1,
    Right_Click_Clicked = !1,
    Right_Click_Released = !1,
    Right_Click_Was_Down = !1,
    Right_Click_Is_Down = !1,
    Left_Click_Is_Up = !1,
    Sett_Change = 0,
    Left_Click_Down_Time = 0,
    Mouse_Xpos = 0,
    Mouse_Ypos = 0,
    Mouse_Xpos2 = 0,
    Mouse_Ypos2 = 0,
    Mouse_In_Window = 0;

function isMouseHovered(a, b, c, d) {
    return Mouse_Xpos < a || a + c <= Mouse_Xpos || Mouse_Ypos < b || b + d <= Mouse_Ypos ? !1 : !0
}

function isMouseHoveredCenter(a, b, c, d) {
    return isMouseHovered(a - c / 2, b - d / 2, c, d)
}

function getMousePos(a) {
    var b = cv.getBoundingClientRect(),
        c = b.right - b.left,
        d = b.bottom - b.top,
        e = minOf(c / 512, d / 384),
        d = floor(d / 2 - 384 * e / 2);
    Mouse_Xpos2 = floor((a.clientX - b.left - floor(c / 2 - 512 * e / 2)) / e);
    Mouse_Ypos2 = floor((a.clientY - b.top - d) / e)
}
doc.onmousemove = getMousePos;
doc.onmousedown = function(a) {
    getMousePos(a);
    Mouse_In_Window2 = !1;
    if (!(0 > Mouse_Xpos2 || 512 <= Mouse_Xpos2 || 0 > Mouse_Ypos2 || 384 <= Mouse_Ypos2) && (Mouse_In_Window2 = !0, 0 == a.button && (Left_Click_Is_Down = !0), 2 == a.button && (Right_Click_Is_Down = !0), Mouse_In_Window2)) return !0
};
doc.onmouseup = function(a) {
    getMousePos(a);
    0 == a.button && (Left_Click_Is_Down = !1);
    2 == a.button && (Right_Click_Is_Down = !1)
};
doc.oncontextmenu = function() {
    if (Mouse_In_Window2) return !1
};

function ci(a) {
    var b = cv.getBoundingClientRect(),
        c = b.right - b.left,
        d = b.bottom - b.top,
        e = minOf(c / 512, d / 384),
        c = floor(c / 2 - 512 * e / 2),
        d = floor(d / 2 - 384 * e / 2);
    a = a.touches;
    Mouse_In_Window = a.length;
    1 == Mouse_In_Window ? (Mouse_Xpos2 = floor((a[0].clientX - b.left - c) / e), Mouse_Ypos2 = floor((a[0].clientY - b.top - d) / e)) : 2 == Mouse_In_Window && (Mouse_Xpos2 = floor((a[0].clientX - b.left - c) / e), Mouse_Ypos2 = floor((a[0].clientY - b.top - d) / e), d = floor((a[1].clientY - b.top - d) / e), Mouse_Xpos2 = floor((Mouse_Xpos2 + floor((a[1].clientX - b.left - c) / e)) / 2), Mouse_Ypos2 = floor((Mouse_Ypos2 + d) / 2))
}
cv.ontouchstart = function(a) {
    ci(a);
    1 == Mouse_In_Window ? (Left_Click_Is_Down = !0, Mouse_Xpos = Mouse_Xpos2, Mouse_Ypos = Mouse_Ypos2) : 2 == Mouse_In_Window && (Left_Click_Is_Down = !1, Mouse_Xpos = Mouse_Xpos2, Mouse_Ypos = Mouse_Ypos2);
    return !0
};
cv.ontouchmove = function(a) {
    ci(a);
    return !0
};
cv.ontouchend = function(a) {
    ci(a);
    0 == Mouse_In_Window ? Left_Click_Is_Down = !1 : 1 == Mouse_In_Window ? (Mouse_Xpos = Mouse_Xpos2, Mouse_Ypos = Mouse_Ypos2) : 2 == Mouse_In_Window && (Mouse_Xpos = Mouse_Xpos2, Mouse_Ypos = Mouse_Ypos2);
    return !0
};
cv.ontouchcancel = function() {
    Mouse_In_Window = 0;
    Right_Click_Is_Down = Left_Click_Is_Down = !1
};
var Is_Key_Pressed1 = Array(256),
    Arr256_2 = Array(256),
    Is_Key_Held = Array(256),
    Arr256_4 = Array(256),
    Arr256_5 = Array(256);
doc.onkeydown = function(a) {
    var b = a.keyCode;
    65 <= b & 90 >= b ? a.shiftKey || (b += 32) : b = a.shiftKey ? Arr256_5[b] : Arr256_4[b];
    0 <= b && 256 > b && (Is_Key_Held[b] = !0, Arr256_2[b] = !0);
    if (0 != b && Mouse_In_Window2) return !1
};
doc.onkeyup = function(a) {
    var b = a.keyCode;
    65 <= b & 90 >= b ? a.shiftKey || (b += 32) : b = a.shiftKey ? Arr256_5[b] : Arr256_4[b];
    0 <= b && 256 > b && (Is_Key_Held[b] = !1);
    if (0 != b && Mouse_In_Window2) return !1
};
var Mouse_In_Window2 = !1,
    prompt_res = "",
    VS_Image = new SR_Image,
    VS_result = Array(100),
    Global_Eg = 0,
    chr_POST = chrCode(80, 79, 83, 84),
    chr_and_b_equal = chrCode(38, 98, 61),
    chr_and_c_equal = chrCode(38, 99, 61),
    chr_and_d_equal = chrCode(38, 100, 61),
    chr_and_e_equal = chrCode(38, 101, 61);
chrCode(38, 102, 61);
chrCode(38, 103, 61);
chrCode(38, 104, 61);
chrCode(38, 105, 61);
chrCode(38, 106, 61);
chrCode(38, 107, 61);
chrCode(111, 107);
var chr_ERROR = chrCode(69, 82, 82, 79, 82),
    chr_equal = chrCode(61),
    chr_Line_Return = chrCode(10),
    chr_Content_Type = chrCode(67, 111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101),
    chr_app_www = chrCode(97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 47, 120, 45, 119, 119, 119, 45, 102, 111, 114, 109, 45, 117, 114, 108, 101, 110, 99, 111, 100, 101, 100);

function funct_Dg(a) {
    for (var b = Global_Eg = 0; 100 > b; b++) VS_result[b] = "";
    if (false) {
        try {
            var c = new XMLHttpRequest;
            c.onreadystatechange = function() {
                if (4 == c.readyState)
                    if (200 == c.status) {
                        var a, b, g = 0,
                            h = c.responseText.length;
                        for (a = 0; a < h; a++)
                            if (b = c.responseText[a], b == chr_equal) {
                                for (a += 1; a < h; a++) {
                                    b = c.responseText[a];
                                    if (b == chr_Line_Return) break;
                                    VS_result[g] += b
                                }
                                g++
                            } else
                                for (; a < h && c.responseText[a] != chr_Line_Return; a++);
                        Global_Eg = 1
                    } else Global_Eg = -1
            };
            c.open(chr_POST, a, !0);
            c.setRequestHeader(chr_Content_Type, chr_app_www);
            c.send("")
        } catch (d) {
            Global_Eg = -2
        }
    } else {
        VS_result[0] = "ok";
        VS_result[1] = "1";
        VS_result[2] = "2";
        VS_result[3] = "3";
        VS_result[4] = "4";
        VS_result[5] = "5";
        VS_result[6] = "6";
        Global_Eg = 1;
    }
}

function Vector2D() {
    this.y = this.x = 0
}
Vector2D.prototype.set = function(a) {
    this.x = a.x;
    this.y = a.y;
    return this
};

function assignVector2D(a, b, c) {
    a.x = b;
    a.y = c
}
Vector2D.prototype.add = function(a) {
    this.x += a.x;
    this.y += a.y;
    return this
};

function sumVector2D(a, b, c) {
    a.x = b.x + c.x;
    a.y = b.y + c.y
}
Vector2D.prototype.sub = function(a) {
    this.x -= a.x;
    this.y -= a.y;
    return this
};

function Vdistance(a, b, c) {
    a.x = b.x - c.x;
    a.y = b.y - c.y
}

function scaleVector2D(a, b) {
    a.x *= b;
    a.y *= b
}

function setPerpendicular(a) {
    var b = a.x;
    a.x = a.y;
    a.y = -b
}

function magnitudeOf(a) {
    return Math.sqrt(a.x * a.x + a.y * a.y)
}

function normalize(a) {
    var b = magnitudeOf(a);
    if (0 == b) return 0;
    a.x /= b;
    a.y /= b;
    return b
}

function angleToXAxis(a) {
    var b = Math.acos(a.x / Math.sqrt(a.x * a.x + a.y * a.y));
    0 < a.y && (b = TwoPi - b);
    return b
}
var Rand_Arr_Df = new Float32Array(1024),
    Rand_EF = 0,
    Rand_FF = 0;

function random(a) {
    Rand_EF += Rand_FF;
    Rand_EF &= 1023;
    return Rand_Arr_Df[Rand_EF] * a
}

function randomRange(a, b) {
    Rand_EF += Rand_FF;
    Rand_EF &= 1023;
    return Rand_Arr_Df[Rand_EF] * (b - a) + a
}

function fiftyfifty(a, b) {
    Rand_EF += Rand_FF;
    Rand_EF &= 1023;
    return .5 > Rand_Arr_Df[Rand_EF] ? a : b
}

function randInt(a) {
    Rand_EF += Rand_FF;
    Rand_EF &= 1023;
    return ~~(Rand_Arr_Df[Rand_EF] * a)
}
var Xe_arr = Array(513),
    Pi = 3.1415927,
    TwoPi = 6.2831855;

function absVal(a) {
    return 0 > a ? -a : a
}

function maxOf(a, b) {
    return a > b ? a : b
}

function minOf(a, b) {
    return a < b ? a : b
}

function clamp(a, b, c) {
    return a < b ? b : a > c ? c : a
}

function cycle(a, b, c) {
    return a < b ? c : a > c ? b : a
}

function floor(a) {
    return Math.floor(a)
};
